[{"path":"https://tengmcing.github.io/visage/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 visage authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://tengmcing.github.io/visage/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Weihao Li. Author, maintainer.","code":""},{"path":"https://tengmcing.github.io/visage/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Li W (2023). visage: Visual Inference Linear Regression Diagnostics. https://tengmcing.github.io/visage/, https://github.com/TengMCing/visage/.","code":"@Manual{,   title = {visage: Visual Inference for Linear Regression Diagnostics},   author = {Weihao Li},   year = {2023},   note = {https://tengmcing.github.io/visage/, https://github.com/TengMCing/visage/}, }"},{"path":"https://tengmcing.github.io/visage/index.html","id":"visage","dir":"","previous_headings":"","what":"Visual Inference for Linear Regression Diagnostics","title":"Visual Inference for Linear Regression Diagnostics","text":"goal visage provide set tools running visual inference experiments linear regression models.","code":""},{"path":"https://tengmcing.github.io/visage/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Visual Inference for Linear Regression Diagnostics","text":"development version GitHub :","code":"# install.packages(\"remotes\") remotes::install_url(\"https://github.com/TengMCing/visage/raw/master/built/visage_0.1.0.tar.gz\") library(visage)"},{"path":"https://tengmcing.github.io/visage/index.html","id":"table-of-content","dir":"","previous_headings":"","what":"Table of Content","title":"Visual Inference for Linear Regression Diagnostics","text":"Visual inference cubic linear model class CUBIC_MODEL Visual inference heteroskedasticity linear model class HETER_MODEL Closed form expression CLOSED_FORM","code":""},{"path":"https://tengmcing.github.io/visage/index.html","id":"id_1-visual-inference-cubic-linear-model-class-cubic_model","dir":"","previous_headings":"","what":"1. Visual inference cubic linear model class CUBIC_MODEL","title":"Visual Inference for Linear Regression Diagnostics","text":"1.1. Define model visual inference cubic linear model defined : x z random variables, , b c parameters e random error term. cubic_model() cubic model class constructor, takes arguments , b, c, sigma, x z, first four numeric values defined , x z random variable instances created random variable abstract base class constructor rand_var(). like x z uniform random variables ranged −1 1, can achieved using uniform random variable class constructor rand_uniform(). takes two arguments lower bound upper bound support. 1.2. Generate random values model instance cubic model class contains methods simulating data making residual plot. Method gen() returns data frame containing realizations x, z, y e simulated model. number realizations depends integer argument n. addition, null model fitted using simulated data residuals fitted values included returned data frame. null model defined : Generates five realizations model: 1.3. Make residual plot Method plot() produce ggplot object. takes data frame containing columns .resid .fitted input, along character argument type indicating type data plot, aesthetic arguments size alpha control appearance plot.  1.4. Make lineup lineup matrix residual plots can produced using methods gen_lineup() plot_lineup(). Method gen_lineup() takes number realizations n number plots lineup k inputs. , method plot_lineup() user interface plot(). Generate lineup consists 2 plots 8 realizations: Plot lineup consists 20 plots 300 realizations:","code":"CUBIC_MODEL$formula #> y ~ 1 + (2 - c) * x + c * z + a * (((2 - c) * x)^2 + (c * z)^2) +  #>     b * (((2 - c) * x)^3 + (c * z)^3) + e mod <- cubic_model(a = -3, b = -3, c = 1, sigma = 1,                    x = rand_uniform(-1, 1), z = rand_uniform(-1, 1)) mod #>  #> ── <CUBIC_MODEL object> #> y = 1 + (2 - c) * x + c * z + a * (((2 - c) * x)^2 + (c * z)^2) + b * (((2 - c) * x)^3 + (c * z)^3) + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - z: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #> Parameters: #>  - a: -3 #>  - b: -3 #>  - c: 1 #>  - sigma: 1 CUBIC_MODEL$null_formula #> y ~ x + z mod$gen(n = 5) #>            y          x          z           e     .resid    .fitted #> 1 -4.6642862  0.9566625 -0.5212399 -0.33725359 -1.8092145 -2.8550717 #> 2 -0.3454638  0.6679040  0.2980351  0.26662555  0.5503441 -0.8958079 #> 3 -0.1475324 -0.2525023 -0.8917560  0.39793762 -0.9455994  0.7980670 #> 4 -0.2839915  0.3731374 -0.8566907  0.08864603  0.9956816 -1.2796731 #> 5 -0.9782251  0.6228871 -0.9077765  0.42364073  1.2087882 -2.1870133 mod$plot(mod$gen(n = 100), type = \"resid\", size = 1) mod$gen_lineup(n = 8, k = 2) #>             y          x            z           e     .resid    .fitted #> 1  -2.0731250  0.6639641 -0.001229654 -1.53518733 -1.0187631 -1.0543619 #> 2  -3.1739190  0.9718971 -0.231977520  0.79801845 -1.5978166 -1.5761024 #> 3  -1.2638997 -0.6510833 -0.548610223 -0.21291028 -0.3594960 -0.9044037 #> 4   0.3138087  0.3036746  0.447574135 -0.20682682  0.5152735 -0.2014649 #> 5  -0.9588352 -0.9938087 -0.642996876  0.13911850 -0.1589585 -0.7998767 #> 6  -1.1501286 -0.9313476 -0.985159318 -0.01176225  0.1560223 -1.3061508 #> 7  -1.2663724 -0.4701171 -0.641952970 -0.36031661 -0.1126522 -1.1537202 #> 8   1.0754090  0.6882399 -0.318498674  2.31209231  2.5763907 -1.5009817 #> 9  -0.1628888  0.6639641 -0.001229654 -1.53518733  0.8914731 -1.0543619 #> 10 -2.9753329  0.9718971 -0.231977520  0.79801845 -1.3992305 -1.5761024 #> 11 -1.2846643 -0.6510833 -0.548610223 -0.21291028 -0.3802606 -0.9044037 #> 12  0.3167032  0.3036746  0.447574135 -0.20682682  0.5181680 -0.2014649 #> 13 -2.4283380 -0.9938087 -0.642996876  0.13911850 -1.6284613 -0.7998767 #> 14  0.7464072 -0.9313476 -0.985159318 -0.01176225  2.0525580 -1.3061508 #> 15 -1.7525570 -0.4701171 -0.641952970 -0.36031661 -0.5988368 -1.1537202 #> 16 -0.9563916  0.6882399 -0.318498674  2.31209231  0.5445901 -1.5009817 #>    test_name statistic   p_value k  null #> 1     F-test  2.123557 0.4697207 1 FALSE #> 2     F-test  2.123557 0.4697207 1 FALSE #> 3     F-test  2.123557 0.4697207 1 FALSE #> 4     F-test  2.123557 0.4697207 1 FALSE #> 5     F-test  2.123557 0.4697207 1 FALSE #> 6     F-test  2.123557 0.4697207 1 FALSE #> 7     F-test  2.123557 0.4697207 1 FALSE #> 8     F-test  2.123557 0.4697207 1 FALSE #> 9     F-test  3.919170 0.3599713 2  TRUE #> 10    F-test  3.919170 0.3599713 2  TRUE #> 11    F-test  3.919170 0.3599713 2  TRUE #> 12    F-test  3.919170 0.3599713 2  TRUE #> 13    F-test  3.919170 0.3599713 2  TRUE #> 14    F-test  3.919170 0.3599713 2  TRUE #> 15    F-test  3.919170 0.3599713 2  TRUE #> 16    F-test  3.919170 0.3599713 2  TRUE mod$plot_lineup(mod$gen_lineup(n = 300, k = 20), type = \"resid\", alpha = 0.6)"},{"path":"https://tengmcing.github.io/visage/index.html","id":"id_2-visual-inference-heteroskedasticity-linear-model-class-heter_model","dir":"","previous_headings":"","what":"2. Visual inference heteroskedasticity linear model class HETER_MODEL","title":"Visual Inference for Linear Regression Diagnostics","text":"visual inference heteroskedasticity linear model defined : x random variables, , b parameters e random error term. Similar cubic model, heteroskedasticity model built heteroskedasticity model class constructor heter_model(). function takes three arguments inputs, , b x. b numeric parameters defined . x needs random variable object. Since cubic model class CUBIC_MODEL heteroskedasticity model class HETER_MODEL inherited visual inference model class VI_MODEL, heteroskedasticity model object can used similar way cubic model object. following codes give examples use object.","code":"HETER_MODEL$formula #> y ~ 1 + x + sqrt(1 + (2 - abs(a)) * (x - a)^2 * b) * e mod <- heter_model(a = 0, b = 16, x = rand_uniform(-1, 1))  mod #>  #> ── <HETER_MODEL object> #> y = 1 + x + sqrt(1 + (2 - abs(a)) * (x - a)^2 * b) * e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #> Parameters: #>  - a: 0 #>  - b: 16 mod$gen(n = 5) #>           y           x          e      .resid   .fitted #> 1 1.2372740 -0.01168696 0.24841870 -1.36946686 2.6067409 #> 2 5.2544224  0.67213061 0.91118823  0.80470718 4.4497152 #> 3 3.3506552  0.24579463 1.22898498  0.04996907 3.3006861 #> 4 1.0081627 -0.93212743 0.17520187  0.88212459 0.1260381 #> 5 0.4139335 -0.68901101 0.02558343 -0.36733398 0.7812674 mod$plot(mod$gen(n = 300), type = \"resid\", size = 1) mod$plot_lineup(mod$gen_lineup(n = 300), alpha = 0.6)"},{"path":"https://tengmcing.github.io/visage/index.html","id":"id_3-closed-form-expression-closed_form","dir":"","previous_headings":"","what":"3. Closed form expression CLOSED_FORM","title":"Visual Inference for Linear Regression Diagnostics","text":"3.1. Define evaluate closed form expression “Closed form expression” defined special type R expression can replace random variables expression realizations evaluation. may sound confusing, let’s look examples. closed_form() closed form expression constructor, takes one arguments expr required formula. Considering simplest case first, expression contains zero random variables, 1 + 3. can evaluated using method compute() directly typical R expression. However, closed form expression contains random variables, can evaluated directly since values random variables unknown. following example, x uniform random variable ranged -1 1, x + 1 expression can evaluated method compute(). case, gen() method try generate n realizations random variables, evaluate expression. addition, rhs_val = TRUE, realizations generated random variables returned. 3.2. Nested closed form expression Nested closed form expression useful hierarchical structure present expression. Consider following statistical model: y = x + e, x uniform random variable ranged -1 1, e = 1 + x^2 * z, z standard normal random variable. can define model using following code: Note y depends e e closed form expression. y e depend x. method gen() return values x, z e rhs_val = TRUE. 3.3. Turn gen() result dataframe via method as_dataframe() Results gen() either vector list, can converted dataframe via method as_dataframe(). lhs argument naming left hand side result closed form expression. 3.4. Current limitiation CLOSED_FORM closed_form(), simple expressions can provided, long symbols exist current environment. Note function tries evaluate atomic symbols expression initialization, store values object. Hence, calls like $b also decomposed $, b, b interpreted variable b exists current environment. Therefore, use ~[[\"b\"]] instead ~$b. pre-define function like myfun = function() 1, use expression ~myfun().","code":"cf <- closed_form(~1 + 3) cf #>  #> ── <CLOSED_FORM object> #> EXPR = 1 + 3 cf$compute() #> [1] 4 x <- rand_uniform(-1, 1) cf <- closed_form(~1 + x) cf$gen(n = 5, rhs_val = TRUE) #> $lhs #> [1] 1.4380714 1.0621618 0.3475848 0.6295953 1.7880562 #>  #> $rhs #> $rhs$x #> [1]  0.43807142  0.06216181 -0.65241520 -0.37040467  0.78805621 z <- rand_normal(mu = 0, sigma = 1) x <- rand_uniform(-1, 1) e <- closed_form(~1 + x^2 * z) y <- closed_form(~x + e) y #>  #> ── <CLOSED_FORM object> #> EXPR = x + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <CLOSED_FORM object> #>    EXPR = 1 + x^2 * z #>     - x: <RAND_UNIFORM object> #>       [a: -1, b: 1] #>     - z: <RAND_NORMAL object> #>       [mu: 0, sigma: 1] y$gen(n = 5, rhs_val = TRUE) #> $lhs #> [1] 0.7669146 0.9233197 1.1509608 1.1625842 1.0457129 #>  #> $rhs #> $rhs$x #> [1] -0.22046378 -0.06867940  0.14701180  0.32966808  0.04621975 #>  #> $rhs$z #> [1] -0.2596807 -1.6962257  0.1827199 -1.5373788 -0.2372567 #>  #> $rhs$e #> [1] 0.9873784 0.9919991 1.0039490 0.8329161 0.9994932 y$as_dataframe(y$gen(n = 5, rhs_val = TRUE), lhs = \"y\") #>          y          x          z        e #> 1 0.880380 -0.1444586  1.1902570 1.024839 #> 2 1.369657  0.3072558  0.6609818 1.062401 #> 3 1.469948  0.8942250 -0.5305861 0.575723 #> 4 1.439847 -0.8188864  1.8770961 2.258734 #> 5 2.053579  0.6144952  1.1628157 1.439084"},{"path":"https://tengmcing.github.io/visage/reference/AR1_MODEL-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — AR1_MODEL$..init..","title":"Initialization method — AR1_MODEL$..init..","text":"function called instance built. User input stored environment. response variable model y. formula y defined AR1_MODEL$formula, null formula defined AR1_MODEL$null_formula, alternative defined AR1_MODEL$alt_formula.","code":""},{"path":"https://tengmcing.github.io/visage/reference/AR1_MODEL-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — AR1_MODEL$..init..","text":"phi Numeric. parameter AR(1) term. Default phi = 0.5. sigma Positive numeric. Default sigma = 1. x Random variable closed form expression. Default x = rand_uniform(-1, 1, env = new.env(parent = parent.env(self))). e Random variable closed form expression. Default e = rand_normal(0, sigma, env = new.env(parent = parent.env(self))).","code":""},{"path":"https://tengmcing.github.io/visage/reference/AR1_MODEL-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — AR1_MODEL$..init..","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/AR1_MODEL-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — AR1_MODEL$..init..","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal(sigma = 0.5)  test <- ar1_model(phi = 0.9, x = x, e = e)  test #>  #> ── <AR1_MODEL object> #> y = ar1(1 + x + e, phi) #>  - x: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #> Parameters: #>  - phi: 0.9 #>  - sigma: 1   # Generate data test$gen(10) #>           y         x           e     .resid  .fitted #> 1  0.974252 0.7041656 -0.72991367 -4.8418460 5.816098 #> 2  1.698146 0.9556848 -1.13436590 -4.1096826 5.807828 #> 3  3.282547 0.2353804  0.51883591 -2.5489639 5.831511 #> 4  4.996622 0.6570756  0.38525361 -0.8210244 5.817646 #> 5  6.092544 0.5869880  0.00859646  0.2725934 5.819951 #> 6  6.759900 0.5227754 -0.24616539  0.9378378 5.822062 #> 7  6.930801 0.2391326 -0.39224123  1.0994133 5.831388 #> 8  8.454915 0.8377031  0.37949051  2.6432073 5.811707 #> 9  9.361961 0.9208756 -0.16833761  3.5529885 5.808973 #> 10 9.636827 0.5444136 -0.33335144  3.8154767 5.821351  # Generate lineup test$gen_lineup(10, k = 3) #> Error in match.arg(type): 'arg' should be one of “Box-Pierce”, “Ljung-Box”  # Plot the lineup test$plot_lineup(test$gen_lineup(100)) #> Error in match.arg(type): 'arg' should be one of “Box-Pierce”, “Ljung-Box”  test <- ar1_model(phi = 0.1, x = x, e = e) test$plot_lineup(test$gen_lineup(100)) #> Error in match.arg(type): 'arg' should be one of “Box-Pierce”, “Ljung-Box”  test <- ar1_model(phi = 0.3, x = x, e = e) test$plot_lineup(test$gen_lineup(100)) #> Error in match.arg(type): 'arg' should be one of “Box-Pierce”, “Ljung-Box”  test <- ar1_model(phi = 0.5, x = x, e = e) test$plot_lineup(test$gen_lineup(100)) #> Error in match.arg(type): 'arg' should be one of “Box-Pierce”, “Ljung-Box”  test <- ar1_model(phi = 0.7, x = x, e = e) test$plot_lineup(test$gen_lineup(100)) #> Error in match.arg(type): 'arg' should be one of “Box-Pierce”, “Ljung-Box”"},{"path":"https://tengmcing.github.io/visage/reference/AR1_MODEL.html","id":null,"dir":"Reference","previous_headings":"","what":"AR1_MODEL class environment — AR1_MODEL","title":"AR1_MODEL class environment — AR1_MODEL","text":"class visual inference orthogonal polynomial linear model, inherited VI_MODEL.","code":""},{"path":"https://tengmcing.github.io/visage/reference/AR1_MODEL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AR1_MODEL class environment — AR1_MODEL","text":"","code":"AR1_MODEL"},{"path":"https://tengmcing.github.io/visage/reference/AR1_MODEL.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"AR1_MODEL class environment — AR1_MODEL","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — CLOSED_FORM$..init..","title":"Initialization method — CLOSED_FORM$..init..","text":"function called instance built. User input stored environment. simple expressions can provided, long symbols exist current environment. Note function tries evaluate atomic symbols expression initialization, store values object. Hence, calls like $b also decomposed $, b, b interpreted variable \"b\" exists current environment. Therefore, use ~[[\"b\"]] instead ~$b. pre-define function like myfun = function() 1, use expression ~myfun().  Random variables replaced returns gen method, typically vectors.  Inner closed form expressions hierarchical closed form expression also replaced returns gen method.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — CLOSED_FORM$..init..","text":"expr Formula. right hand side last ~ kept final expression.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — CLOSED_FORM$..init..","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — CLOSED_FORM$..init..","text":"","code":"# Constant variable a <- 1  # Random uniform variable b <- rand_uniform()  # Define a closed form expression cf <- closed_form(~3 * (exp(a) + b))  cf #>  #> ── <CLOSED_FORM object> #> EXPR = 3 * (exp(a) + b) #>  - b: <RAND_UNIFORM object> #>    [a: 0, b: 1]   d <- rand_normal()  # Define a closed form expression with another closed form expression cf2 <- closed_form(~cf + 3 * d)  cf2 #>  #> ── <CLOSED_FORM object> #> EXPR = cf + 3 * d #>  - cf: <CLOSED_FORM object> #>    EXPR = 3 * (exp(a) + b) #>     - b: <RAND_UNIFORM object> #>       [a: 0, b: 1] #>  - d: <RAND_NORMAL object> #>    [mu: 0, sigma: 1]"},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-..len...html","id":null,"dir":"Reference","previous_headings":"","what":"Length of the object — CLOSED_FORM$..len..","title":"Length of the object — CLOSED_FORM$..len..","text":"function recursively count symbols stored closed form expression nested closed form expression.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-..len...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Length of the object — CLOSED_FORM$..len..","text":"integer.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-..len...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Length of the object — CLOSED_FORM$..len..","text":"","code":"test <- closed_form(~1+1) test$..len..() #> [1] 1"},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-..str...html","id":null,"dir":"Reference","previous_headings":"","what":"String representation of the object — CLOSED_FORM$..str..","title":"String representation of the object — CLOSED_FORM$..str..","text":"function returns string representation object.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-..str...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"String representation of the object — CLOSED_FORM$..str..","text":"string.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-..str...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"String representation of the object — CLOSED_FORM$..str..","text":"","code":"CLOSED_FORM$..str..() #> [1] \"<CLOSED_FORM class>\"  test <- closed_form(~1+1) test$..str..() #> [1] \"<CLOSED_FORM object>\\n EXPR = 1 + 1\""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-as_dataframe.html","id":null,"dir":"Reference","previous_headings":"","what":"Transforming list to data frame — CLOSED_FORM$as_dataframe","title":"Transforming list to data frame — CLOSED_FORM$as_dataframe","text":"function transforms result generated gen data frame.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-as_dataframe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transforming list to data frame — CLOSED_FORM$as_dataframe","text":"dat Vector List. Results generated gen method. lhs Character. name expression. Default \".lhs\".","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-as_dataframe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transforming list to data frame — CLOSED_FORM$as_dataframe","text":"data frame.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-as_dataframe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transforming list to data frame — CLOSED_FORM$as_dataframe","text":"","code":"# Constant variable a <- 1  # Random uniform variable b <- rand_uniform()  # Define a closed form expression cf <- closed_form(~3 * (exp(a) + b))  # Generate data result1 <- cf$gen(10)  cf$as_dataframe(result1) #>         .lhs #> 1   9.057197 #> 2   8.320691 #> 3   8.619028 #> 4  10.625013 #> 5  10.418953 #> 6   8.977855 #> 7  10.175870 #> 8  10.663651 #> 9   8.885736 #> 10 10.514192  # Generate data and keep the RHS result2 <- cf$gen(10, rhs_val = TRUE)  # Specify the name cf$as_dataframe(result2, lhs = \"y\") #>            y          b #> 1   8.352566 0.06590679 #> 2  10.244726 0.69662680 #> 3   8.448997 0.09805035 #> 4  10.880030 0.90839492 #> 5   8.898211 0.24778838 #> 6   9.214681 0.35327859 #> 7  10.148772 0.66464205 #> 8  10.973869 0.93967458 #> 9   9.367891 0.40434846 #> 10  8.903579 0.24957774"},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-ast.html","id":null,"dir":"Reference","previous_headings":"","what":"Abstract syntax tree of the expression — CLOSED_FORM$ast","title":"Abstract syntax tree of the expression — CLOSED_FORM$ast","text":"function returns abstract syntax tree exrpession","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-ast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abstract syntax tree of the expression — CLOSED_FORM$ast","text":"expr Language. quoted expression.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-ast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Abstract syntax tree of the expression — CLOSED_FORM$ast","text":"list.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-ast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Abstract syntax tree of the expression — CLOSED_FORM$ast","text":"","code":"CLOSED_FORM$ast(quote(a + b)) #> [[1]] #> `+` #>  #> [[2]] #> a #>  #> [[3]] #> b #>  CLOSED_FORM$ast(quote(exp(a) + b^2)) #> [[1]] #> `+` #>  #> [[2]] #> [[2]][[1]] #> exp #>  #> [[2]][[2]] #> a #>  #>  #> [[3]] #> [[3]][[1]] #> `^` #>  #> [[3]][[2]] #> b #>  #> [[3]][[3]] #> [1] 2 #>  #>"},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-compute.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the expression without generating any random values — CLOSED_FORM$compute","title":"Compute the expression without generating any random values — CLOSED_FORM$compute","text":"function computes deterministic expression.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-compute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the expression without generating any random values — CLOSED_FORM$compute","text":"Numeric value.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-compute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the expression without generating any random values — CLOSED_FORM$compute","text":"","code":"test <- closed_form(~1+mean(c(1,2,3))) test$compute() #> [1] 3"},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-expr.html","id":null,"dir":"Reference","previous_headings":"","what":"Expression extracted from the provided formula — CLOSED_FORM$expr","title":"Expression extracted from the provided formula — CLOSED_FORM$expr","text":"language object.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-expr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expression extracted from the provided formula — CLOSED_FORM$expr","text":"","code":"# Constant variable a <- 1  # Random uniform variable b <- rand_uniform()  # Define a closed form expression cf <- closed_form(omit~omit~3 * (exp(a) + b))  # Only the right hand side of the last `~` will be kept cf$expr #> 3 * (exp(a) + b)  d <- rand_normal()  # Define a closed form expression with another closed form expression cf2 <- closed_form(~cf + 3 * d)  cf2$expr #> cf + 3 * d"},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-gen.html","id":null,"dir":"Reference","previous_headings":"","what":"Generating random values from the expression — CLOSED_FORM$gen","title":"Generating random values from the expression — CLOSED_FORM$gen","text":"function generates random values expression. Random values closed form expression share value long name.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-gen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generating random values from the expression — CLOSED_FORM$gen","text":"n Integer. Number observations. rhs_val Boolean. Whether keep right hand side values expression. Default FALSE. computed List. Default NULL. provided, random variables random closed form expression use values list, makes expression potentially deterministic.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-gen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generating random values from the expression — CLOSED_FORM$gen","text":"Numeric values.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-gen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generating random values from the expression — CLOSED_FORM$gen","text":"","code":"# Constant variable a <- 1  # Random uniform variable b <- rand_uniform()  # Define a closed form expression cf <- closed_form(~3 * (exp(a) + b))  # Generate 5 values cf$gen(5) #> [1]  8.959852 10.446422  9.861103  8.264035  9.633606  # Generate 5 values, and keep RHS cf$gen(5, rhs_val = TRUE) #> $lhs #> [1] 10.206462  9.827970  8.701981  9.533368 10.405271 #>  #> $rhs #> $rhs$b #> [1] 0.6838723 0.5577083 0.1823785 0.4595073 0.7501418 #>  #>   d <- rand_normal()  # Define a closed form expression with another closed form expression cf2 <- closed_form(~cf + 3 * d)  # Generate 5 values cf2$gen(5) #> [1] 11.816465  6.850042  2.661122 11.862288  7.399018  # Generate 5 values, and keep RHS cf2$gen(5, rhs_val = TRUE) #> $lhs #> [1] 11.133017  9.049520  8.712975  9.089639  8.543909 #>  #> $rhs #> $rhs$b #> [1] 0.8200285 0.1633284 0.7143805 0.1096769 0.1000993 #>  #> $rhs$cf #> [1] 10.614931  8.644831 10.297987  8.483876  8.455144 #>  #> $rhs$d #> [1]  0.17269536  0.13489642 -0.52833732  0.20192105  0.02958848 #>  #>   # Define a closed form expression with two random variables of the same name cf3 <- closed_form(~d + d)  # Both `d` will share the same values cf3$gen(5, rhs_val = TRUE) #> $lhs #> [1]  1.630258 -2.634585  3.058232 -2.784523 -1.792654 #>  #> $rhs #> $rhs$d #> [1]  0.8151291 -1.3172926  1.5291161 -1.3922617 -0.8963269 #>  #>   # Define a closed form expression with two closed form expressions of the same name cf4 <- closed_form(~cf3 + cf3)  # Both `cf3` will share the same values, both `d` will share the same values as well cf4$gen(5, rhs_val = TRUE) #> $lhs #> [1] -2.165233 -7.491106 -6.102828  6.146870 -0.943537 #>  #> $rhs #> $rhs$d #> [1] -0.5413082 -1.8727764 -1.5257070  1.5367174 -0.2358843 #>  #> $rhs$cf3 #> [1] -1.0826164 -3.7455528 -3.0514140  3.0734348 -0.4717685 #>  #>   # Define a closed form expression with two different closed form expressions, # but contains same random variables cf5 <- closed_form(~cf3 + cf4)  # Both `d` in `cf3` and `cf4` will share the same value cf5$gen(5, rhs_val = TRUE) #> $lhs #> [1]  5.3136212 -0.9000544  5.3162708 10.2709045 -2.0343197 #>  #> $rhs #> $rhs$d #> [1]  0.8856035 -0.1500091  0.8860451  1.7118174 -0.3390533 #>  #> $rhs$cf3 #> [1]  1.7712071 -0.3000181  1.7720903  3.4236348 -0.6781066 #>  #> $rhs$cf4 #> [1]  3.5424141 -0.6000362  3.5441805  6.8472697 -1.3562131 #>  #>   # Control the value of `d` cf5$gen(5, rhs_val = TRUE, computed = list(d = 1)) #> $lhs #> [1] 6 #>  #> $rhs #> $rhs$d #> [1] 1 #>  #> $rhs$cf3 #> [1] 2 #>  #> $rhs$cf4 #> [1] 4 #>  #>"},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-set_expr.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the closed form expression — CLOSED_FORM$set_expr","title":"Set the closed form expression — CLOSED_FORM$set_expr","text":"function updates closed form expression. update symbol values. updating symbol values, please check CLOSED_FORM$set_sym.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-set_expr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the closed form expression — CLOSED_FORM$set_expr","text":"expr Formula. right hand side last ~ kept final expression.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-set_expr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the closed form expression — CLOSED_FORM$set_expr","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-set_expr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the closed form expression — CLOSED_FORM$set_expr","text":"","code":"# Constant variable a <- 1  # Random uniform variable z <- closed_form(~2 + a)  z$compute() #> [1] 3  # Update the expression z$set_expr(~2 - a)  z$compute() #> [1] 1"},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-set_sym.html","id":null,"dir":"Reference","previous_headings":"","what":"Set values for symbols — CLOSED_FORM$set_sym","title":"Set values for symbols — CLOSED_FORM$set_sym","text":"function stores user inputs updated values symbols. List symbol names symbol types updated automatically. protection values modified, may lead error loss binding objects. Please use function caution.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-set_sym.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set values for symbols — CLOSED_FORM$set_sym","text":"sym_name Vector List. sequence character symbol names. sym_value Vector List. sequence symbol values.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-set_sym.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set values for symbols — CLOSED_FORM$set_sym","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-set_sym.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set values for symbols — CLOSED_FORM$set_sym","text":"","code":"# Constant variable a <- 1  # Random uniform variable z <- closed_form(~2 + a)  z$compute() #> [1] 3  # Update value for \"a\" z$set_sym(\"a\", 3)  z$compute() #> [1] 5  # Update value for \"+\" z$set_sym(\"+\", list(function(a, b) a * b))  z$compute() #> [1] 6"},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-sym.html","id":null,"dir":"Reference","previous_headings":"","what":"List of symbols in the abstract syntax tree of the expression — CLOSED_FORM$sym","title":"List of symbols in the abstract syntax tree of the expression — CLOSED_FORM$sym","text":"list, initialized instance built.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-sym.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of symbols in the abstract syntax tree of the expression — CLOSED_FORM$sym","text":"","code":"# Constant variable a <- 1  # Random uniform variable b <- rand_uniform()  # Define a closed form expression cf <- closed_form(~3 * (exp(a) + b))  cf #>  #> ── <CLOSED_FORM object> #> EXPR = 3 * (exp(a) + b) #>  - b: <RAND_UNIFORM object> #>    [a: 0, b: 1]   # Get the list of symbols cf$sym #> $`*` #> function (e1, e2)  .Primitive(\"*\") #>  #> $`(` #> .Primitive(\"(\") #>  #> $`+` #> function (e1, e2)  .Primitive(\"+\") #>  #> $exp #> function (x)  .Primitive(\"exp\") #>  #> $a #> [1] 1 #>  #> $b #>  #> ── <RAND_UNIFORM object> #> [a: 0, b: 1]  #>   # Get the list of symbol names cf$sym_name #> [[1]] #> [1] \"*\" #>  #> [[2]] #> [1] \"(\" #>  #> [[3]] #> [1] \"+\" #>  #> [[4]] #> [1] \"exp\" #>  #> [[5]] #> [1] \"a\" #>  #> [[6]] #> [1] \"b\" #>   # Get the list of symbol types cf$sym_type #> $`*` #> [1] \"other\" #>  #> $`(` #> [1] \"other\" #>  #> $`+` #> [1] \"other\" #>  #> $exp #> [1] \"other\" #>  #> $a #> [1] \"other\" #>  #> $b #> [1] \"rand_var or closed_form\" #>   d <- rand_normal()  # Define a closed form expression with another closed form expression cf2 <- closed_form(~cf + 3 * d)  cf2 #>  #> ── <CLOSED_FORM object> #> EXPR = cf + 3 * d #>  - cf: <CLOSED_FORM object> #>    EXPR = 3 * (exp(a) + b) #>     - b: <RAND_UNIFORM object> #>       [a: 0, b: 1] #>  - d: <RAND_NORMAL object> #>    [mu: 0, sigma: 1]   # Get the list of symbols, constants are not counted as symbols cf2$sym #> $`+` #> function (e1, e2)  .Primitive(\"+\") #>  #> $cf #>  #> ── <CLOSED_FORM object> #> EXPR = 3 * (exp(a) + b) #>  - b: <RAND_UNIFORM object> #>    [a: 0, b: 1]  #>  #> $`*` #> function (e1, e2)  .Primitive(\"*\") #>  #> $d #>  #> ── <RAND_NORMAL object> #> [mu: 0, sigma: 1]  #>   # Get the list of symbol names cf2$sym_name #> [[1]] #> [1] \"+\" #>  #> [[2]] #> [1] \"cf\" #>  #> [[3]] #> [1] \"*\" #>  #> [[4]] #> [1] \"d\" #>   # Get the list of symbol types cf$sym_type #> $`*` #> [1] \"other\" #>  #> $`(` #> [1] \"other\" #>  #> $`+` #> [1] \"other\" #>  #> $exp #> [1] \"other\" #>  #> $a #> [1] \"other\" #>  #> $b #> [1] \"rand_var or closed_form\" #>"},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-sym_name.html","id":null,"dir":"Reference","previous_headings":"","what":"List of symbol names in the abstract syntax tree of the expression — CLOSED_FORM$sym_name","title":"List of symbol names in the abstract syntax tree of the expression — CLOSED_FORM$sym_name","text":"list, initialized instance built.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-sym_type.html","id":null,"dir":"Reference","previous_headings":"","what":"List of symbol types in the abstract syntax tree of the expression — CLOSED_FORM$sym_type","title":"List of symbol types in the abstract syntax tree of the expression — CLOSED_FORM$sym_type","text":"list, initialized instance built.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM.html","id":null,"dir":"Reference","previous_headings":"","what":"CLOSED_FORM class environment — CLOSED_FORM","title":"CLOSED_FORM class environment — CLOSED_FORM","text":"base class closed form expression, inherited bandicoot::BASE.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CLOSED_FORM class environment — CLOSED_FORM","text":"","code":"CLOSED_FORM"},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CLOSED_FORM class environment — CLOSED_FORM","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — CUBIC_MODEL$..init..","title":"Initialization method — CUBIC_MODEL$..init..","text":"function called instance built. User input stored environment. response variable model y. formula y defined CUBIC_MODEL$formula, null formula defined CUBIC_MODEL$null_formula, alternative defined CUBIC_MODEL$alt_formula.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — CUBIC_MODEL$..init..","text":"Numeric. Default = 1. b Numeric. Default b = 1. c Numeric. Default c = 1. sigma Positive numeric. Default sigma = 1. x Random variable closed form expression. Default x = rand_uniform(-1, 1, env = new.env(parent = parent.env(self))). z Random variable closed form expression. Default z = rand_uniform(-1, 1, env = new.env(parent = parent.env(self))). e Random variable closed form expression. Default e = rand_normal(0, sigma, env = new.env(parent = parent.env(self))).","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — CUBIC_MODEL$..init..","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — CUBIC_MODEL$..init..","text":"","code":"# Instantiate x <- rand_uniform() z <- rand_uniform() e <- rand_normal()  test <- cubic_model(a = 200, b = 200, c = 1, x = x, z = z, e = e)  test #>  #> ── <CUBIC_MODEL object> #> y = 1 + (2 - c) * x + c * z + a * (((2 - c) * x)^2 + (c * z)^2) + b * (((2 - c) * x)^3 + (c * z)^3) + e #>  - x: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - z: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #> Parameters: #>  - a: 200 #>  - b: 200 #>  - c: 1 #>  - sigma: 1   # Generate data test$gen(10) #>           y         x          z           e     .resid   .fitted #> 1  220.8642 0.6075038 0.56505148  0.09937536 -38.036050 258.90026 #> 2  297.5228 0.8645419 0.27672570 -2.89598151  -9.784643 307.30745 #> 3  632.1132 0.9440338 0.87013651 -0.39560367  -9.116048 641.22925 #> 4  746.9505 0.9923328 0.95112040 -1.38110958  33.467544 713.48295 #> 5  224.3388 0.7133659 0.40509102  1.72232577 -35.240662 259.57945 #> 6  633.8455 0.9130585 0.90510798 -0.08749536  -1.655759 635.50123 #> 7  107.0265 0.4500055 0.41243441 -1.61427217  31.654477  75.37198 #> 8  567.4541 0.7314013 0.97829215  0.83542990  27.182805 540.27127 #> 9  321.3205 0.8185745 0.50133741 -0.18077413 -58.191372 379.51183 #> 10 227.7337 0.7890232 0.09377538  1.17320495  59.719708 168.01396  # Generate lineup test$gen_lineup(10, k = 3) #>            y         x          z          e     .resid   .fitted test_name #> 1   67.68699 0.4325239 0.20884279  1.9023890 -34.098145 101.78513    F-test #> 2  327.59150 0.6568586 0.72345334  1.8306520 -18.984202 346.57570    F-test #> 3  311.39491 0.6819291 0.67749326 -1.3860450 -31.281086 342.67600    F-test #> 4  225.76945 0.4288586 0.70928767 -0.9125020 -25.730238 251.49969    F-test #> 5  217.16534 0.1965623 0.76668358 -1.7367900  40.835282 176.33006    F-test #> 6  479.28497 0.9931804 0.52285803  0.2874034  59.370964 419.91401    F-test #> 7  315.41288 0.8379049 0.43546327  0.6256381 -16.265318 331.67819    F-test #> 8   30.16223 0.3143396 0.08069625  1.3858971  14.152269  16.00996    F-test #> 9   33.34391 0.1404927 0.32811326 -1.2234380  11.825674  21.51824    F-test #> 10 132.84767 0.6310569 0.04936684  0.7476936   0.174800 132.67287    F-test #> 11 128.17165 0.4325239 0.20884279  1.9023890  26.386519 101.78513    F-test #> 12 315.34930 0.6568586 0.72345334  1.8306520 -31.226399 346.57570    F-test #> 13 385.17969 0.6819291 0.67749326 -1.3860450  42.503690 342.67600    F-test #> 14 221.37838 0.4288586 0.70928767 -0.9125020 -30.121313 251.49969    F-test #> 15 175.66885 0.1965623 0.76668358 -1.7367900  -0.661207 176.33006    F-test #> 16 429.28577 0.9931804 0.52285803  0.2874034   9.371763 419.91401    F-test #> 17 321.80249 0.8379049 0.43546327  0.6256381  -9.875704 331.67819    F-test #> 18 -35.69631 0.3143396 0.08069625  1.3858971 -51.706272  16.00996    F-test #> 19  62.74215 0.1404927 0.32811326 -1.2234380  41.223914  21.51824    F-test #> 20 136.77788 0.6310569 0.04936684  0.7476936   4.105009 132.67287    F-test #> 21  89.56403 0.4325239 0.20884279  1.9023890 -12.221099 101.78513    F-test #> 22 354.94816 0.6568586 0.72345334  1.8306520   8.372454 346.57570    F-test #> 23 361.84900 0.6819291 0.67749326 -1.3860450  19.173003 342.67600    F-test #> 24 253.40285 0.4288586 0.70928767 -0.9125020   1.903160 251.49969    F-test #> 25 189.48187 0.1965623 0.76668358 -1.7367900  13.151818 176.33006    F-test #> 26 404.20027 0.9931804 0.52285803  0.2874034 -15.713739 419.91401    F-test #> 27 292.45327 0.8379049 0.43546327  0.6256381 -39.224921 331.67819    F-test #> 28 -20.39314 0.3143396 0.08069625  1.3858971 -36.403097  16.00996    F-test #> 29  11.82339 0.1404927 0.32811326 -1.2234380  -9.694848  21.51824    F-test #> 30 203.33014 0.6310569 0.04936684  0.7476936  70.657269 132.67287    F-test #>       statistic      p_value k  null #> 1  1431.7757914 2.993931e-05 2 FALSE #> 2  1431.7757914 2.993931e-05 2 FALSE #> 3  1431.7757914 2.993931e-05 2 FALSE #> 4  1431.7757914 2.993931e-05 2 FALSE #> 5  1431.7757914 2.993931e-05 2 FALSE #> 6  1431.7757914 2.993931e-05 2 FALSE #> 7  1431.7757914 2.993931e-05 2 FALSE #> 8  1431.7757914 2.993931e-05 2 FALSE #> 9  1431.7757914 2.993931e-05 2 FALSE #> 10 1431.7757914 2.993931e-05 2 FALSE #> 11    0.3836159 8.112958e-01 1  TRUE #> 12    0.3836159 8.112958e-01 1  TRUE #> 13    0.3836159 8.112958e-01 1  TRUE #> 14    0.3836159 8.112958e-01 1  TRUE #> 15    0.3836159 8.112958e-01 1  TRUE #> 16    0.3836159 8.112958e-01 1  TRUE #> 17    0.3836159 8.112958e-01 1  TRUE #> 18    0.3836159 8.112958e-01 1  TRUE #> 19    0.3836159 8.112958e-01 1  TRUE #> 20    0.3836159 8.112958e-01 1  TRUE #> 21    0.9142031 5.518327e-01 3  TRUE #> 22    0.9142031 5.518327e-01 3  TRUE #> 23    0.9142031 5.518327e-01 3  TRUE #> 24    0.9142031 5.518327e-01 3  TRUE #> 25    0.9142031 5.518327e-01 3  TRUE #> 26    0.9142031 5.518327e-01 3  TRUE #> 27    0.9142031 5.518327e-01 3  TRUE #> 28    0.9142031 5.518327e-01 3  TRUE #> 29    0.9142031 5.518327e-01 3  TRUE #> 30    0.9142031 5.518327e-01 3  TRUE  # Plot the lineup test$plot_lineup(test$gen_lineup(100))"},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-E.html","id":null,"dir":"Reference","previous_headings":"","what":"Expectation of the residuals — CUBIC_MODEL$E","title":"Expectation of the residuals — CUBIC_MODEL$E","text":"function calculate expectation residuals use Frisch–Waugh–Lovell theorem.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-E.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expectation of the residuals — CUBIC_MODEL$E","text":"dat Dataframe/List. List contains variable x z. Numeric. Default = self$prm$. b Numeric. Default b = self$prm$b. c Numeric. Default c = self$prm$c.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-E.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expectation of the residuals — CUBIC_MODEL$E","text":"vector numeric expectations.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-E.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expectation of the residuals — CUBIC_MODEL$E","text":"","code":"mod <- cubic_model(-1, 1, 1, 0.5) dat <- mod$gen(1000, fit_model = TRUE) dat$exp <- mod$E(dat) mod$plot(dat) + ggplot2::geom_point(ggplot2::aes(.fitted, exp),                                     col = \"red\",                                     alpha = 0.6)"},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-alt_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the alternative model — CUBIC_MODEL$alt_formula","title":"Formula for fitting the alternative model — CUBIC_MODEL$alt_formula","text":"Quoted formula fitting alternative model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-alt_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the alternative model — CUBIC_MODEL$alt_formula","text":"","code":"CUBIC_MODEL$alt_formula #> y ~ x + I(x^2) + I(x^3) + z + I(z^2) + I(z^3)"},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-effect_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the effect size of the simulated data — CUBIC_MODEL$effect_size","title":"Compute the effect size of the simulated data — CUBIC_MODEL$effect_size","text":"function computes effect size simulated data.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-effect_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the effect size of the simulated data — CUBIC_MODEL$effect_size","text":"dat Dataframe/List. List contains variable x z. Numeric. Default = self$prm$. b Numeric. Default b = self$prm$b. c Numeric. Default c = self$prm$c. sigma Positive numeric. Default sigma = self$prm$sigma.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-effect_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the effect size of the simulated data — CUBIC_MODEL$effect_size","text":"numeric value.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-effect_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the effect size of the simulated data — CUBIC_MODEL$effect_size","text":"","code":"mod <- cubic_model(-1, 1, 1, 0.5) dat <- mod$gen(1000, fit_model = TRUE) mod$effect_size(dat) #> [1] 3.386465"},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Closed form expression of y — CUBIC_MODEL$formula","title":"Closed form expression of y — CUBIC_MODEL$formula","text":"quoted formula, passed CLOSED_FORM$instantiate define closed form expression y.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Closed form expression of y — CUBIC_MODEL$formula","text":"","code":"CUBIC_MODEL$formula #> y ~ 1 + (2 - c) * x + c * z + a * (((2 - c) * x)^2 + (c * z)^2) +  #>     b * (((2 - c) * x)^3 + (c * z)^3) + e"},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-null_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the null model — CUBIC_MODEL$null_formula","title":"Formula for fitting the null model — CUBIC_MODEL$null_formula","text":"Quoted formula fitting null model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-null_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the null model — CUBIC_MODEL$null_formula","text":"","code":"CUBIC_MODEL$null_formula #> y ~ x + z"},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-sample_effect_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the sample baased effect size of the simulated data — CUBIC_MODEL$sample_effect_size","title":"Compute the sample baased effect size of the simulated data — CUBIC_MODEL$sample_effect_size","text":"function computes sample based effect size simulated data.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-sample_effect_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the sample baased effect size of the simulated data — CUBIC_MODEL$sample_effect_size","text":"dat Dataframe/List. List contains variable x z. Numeric. Default = self$prm$. b Numeric. Default b = self$prm$b. c Numeric. Default c = self$prm$c. sigma Positive numeric. Default sigma = self$prm$sigma.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-sample_effect_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the sample baased effect size of the simulated data — CUBIC_MODEL$sample_effect_size","text":"numeric value.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-sample_effect_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the sample baased effect size of the simulated data — CUBIC_MODEL$sample_effect_size","text":"","code":"mod <- cubic_model(-1, 1, 1, 0.5) dat <- mod$gen(1000, fit_model = TRUE) mod$sample_effect_size(dat) #> [1] 3.70664"},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-set_prm.html","id":null,"dir":"Reference","previous_headings":"","what":"Set parameter for the model — CUBIC_MODEL$set_prm","title":"Set parameter for the model — CUBIC_MODEL$set_prm","text":"function store values environment update values closed form expression y, except parameter sigma. parameter sigma, value updated, corresponding value e updated.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-set_prm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set parameter for the model — CUBIC_MODEL$set_prm","text":"prm_name List Vector. Parameter character names. prm_val List Vector. Parameter values.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-set_prm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set parameter for the model — CUBIC_MODEL$set_prm","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-set_prm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set parameter for the model — CUBIC_MODEL$set_prm","text":"","code":"# Instantiate mod <- cubic_model(a = -1, b = 1, c = 1, sigma = 0.5)  mod #>  #> ── <CUBIC_MODEL object> #> y = 1 + (2 - c) * x + c * z + a * (((2 - c) * x)^2 + (c * z)^2) + b * (((2 - c) * x)^3 + (c * z)^3) + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - z: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #> Parameters: #>  - a: -1 #>  - b: 1 #>  - c: 1 #>  - sigma: 0.5   mod$set_prm(\"a\", 2)  mod #>  #> ── <CUBIC_MODEL object> #> y = 1 + (2 - c) * x + c * z + a * (((2 - c) * x)^2 + (c * z)^2) + b * (((2 - c) * x)^3 + (c * z)^3) + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - z: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #> Parameters: #>  - a: 2 #>  - b: 1 #>  - c: 1 #>  - sigma: 0.5   mod$set_prm(\"sigma\", 1)  mod #>  #> ── <CUBIC_MODEL object> #> y = 1 + (2 - c) * x + c * z + a * (((2 - c) * x)^2 + (c * z)^2) + b * (((2 - c) * x)^3 + (c * z)^3) + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - z: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #> Parameters: #>  - a: 2 #>  - b: 1 #>  - c: 1 #>  - sigma: 1"},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL.html","id":null,"dir":"Reference","previous_headings":"","what":"CUBIC_MODEL class environment — CUBIC_MODEL","title":"CUBIC_MODEL class environment — CUBIC_MODEL","text":"class visual inference cubic linear model, inherited VI_MODEL.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CUBIC_MODEL class environment — CUBIC_MODEL","text":"","code":"CUBIC_MODEL"},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CUBIC_MODEL class environment — CUBIC_MODEL","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — HETER_MODEL$..init..","title":"Initialization method — HETER_MODEL$..init..","text":"function called instance built. User input stored environment. response variable model y. formula y defined HETER_MODEL$formula, null formula defined HETER_MODEL$null_formula.","code":""},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — HETER_MODEL$..init..","text":"Numeric. Default = 0. b Numeric. Default b = 1. x Random variable closed form expression. Default x = rand_uniform(-1, 1, env = new.env(parent = parent.env(self))). e Random variable closed form expression. Default e = rand_normal(0, 1, env = new.env(parent = parent.env(self))).","code":""},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — HETER_MODEL$..init..","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — HETER_MODEL$..init..","text":"","code":"# Instantiate test <- heter_model(a = 0, b = 20)  test #>  #> ── <HETER_MODEL object> #> y = 1 + x + sqrt(1 + (2 - abs(a)) * (x - a)^2 * b) * e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #> Parameters: #>  - a: 0 #>  - b: 20   # Generate data test$gen(10) #>              y          x           e      .resid     .fitted #> 1   -1.5086223 -0.8251711 -0.31680840   3.8221977 -5.33081997 #> 2    4.0487782 -0.1896665  2.07365430   3.9908953  0.05788284 #> 3   -0.6064962 -0.2578774 -0.70493145  -0.0859910 -0.52050516 #> 4   11.9960314  0.5952189  2.67026337   5.2827848  6.71324660 #> 5    4.1318972  0.3396011  1.17857694  -0.4138612  4.54575837 #> 6  -15.8998479 -0.8397968 -2.97151931 -10.4450105 -5.45483739 #> 7   -0.4846850  0.4457313 -0.64537321  -5.9303646  5.44567957 #> 8   -1.2659697 -0.9239447 -0.22636892   4.9023917 -6.16836139 #> 9    0.8528714 -0.2138335  0.03965902   0.9999107 -0.14703933 #> 10   1.5407451  0.2355773  0.17006694  -2.1229529  3.66369802  # Generate lineup test$gen_lineup(10, k = 3) #>              y            x            e      .resid   .fitted test_name #> 1   0.67482899 -0.345042070  0.008278055  0.47292157 0.2019074   BP-test #> 2   3.07500358 -0.032101075  2.064976103  2.87616455 0.1988390   BP-test #> 3  -1.51733845  0.320333965 -1.255981839 -1.71272186 0.1953834   BP-test #> 4   2.10145588  0.681625683  0.094867390  1.90961494 0.1918409   BP-test #> 5  -5.02990772  0.380709105 -2.458797453 -5.22469915 0.1947914   BP-test #> 6   1.91151847  0.163267319  0.520542384  1.71459502 0.1969234   BP-test #> 7   0.22784044  0.730901673 -0.317801833  0.03648265 0.1913578   BP-test #> 8   4.09897014 -0.463870630  1.149480608  3.89589761 0.2030725   BP-test #> 9   0.49891620  0.007225706 -0.507779549  0.30046277 0.1984534   BP-test #> 10 -4.06332592 -0.700448128 -0.960671669 -4.26871810 0.2053922   BP-test #> 11  0.39658123 -0.345042070  0.008278055  0.19467382 0.2019074   BP-test #> 12 -4.65379805 -0.032101075  2.064976103 -4.85263708 0.1988390   BP-test #> 13  3.03926792  0.320333965 -1.255981839  2.84388451 0.1953834   BP-test #> 14  0.76980691  0.681625683  0.094867390  0.57796598 0.1918409   BP-test #> 15 -0.08751358  0.380709105 -2.458797453 -0.28230501 0.1947914   BP-test #> 16 -4.13142090  0.163267319  0.520542384 -4.32834434 0.1969234   BP-test #> 17 -0.07640201  0.730901673 -0.317801833 -0.26775980 0.1913578   BP-test #> 18  2.17029568 -0.463870630  1.149480608  1.96722315 0.2030725   BP-test #> 19  5.05070375  0.007225706 -0.507779549  4.85225032 0.1984534   BP-test #> 20 -0.49955937 -0.700448128 -0.960671669 -0.70495155 0.2053922   BP-test #> 21 -4.50437171 -0.345042070  0.008278055 -4.70627913 0.2019074   BP-test #> 22  2.76958760 -0.032101075  2.064976103  2.57074856 0.1988390   BP-test #> 23  0.67955299  0.320333965 -1.255981839  0.48416958 0.1953834   BP-test #> 24  3.89252434  0.681625683  0.094867390  3.70068341 0.1918409   BP-test #> 25 -2.46873211  0.380709105 -2.458797453 -2.66352354 0.1947914   BP-test #> 26  3.17501502  0.163267319  0.520542384  2.97809158 0.1969234   BP-test #> 27 -2.84974454  0.730901673 -0.317801833 -3.04110233 0.1913578   BP-test #> 28 -1.02558365 -0.463870630  1.149480608 -1.22865618 0.2030725   BP-test #> 29 -0.79542777  0.007225706 -0.507779549 -0.99388120 0.1984534   BP-test #> 30  3.10514142 -0.700448128 -0.960671669  2.89974924 0.2053922   BP-test #>    statistic    p_value k  null #> 1  1.0852734 0.58121373 3 FALSE #> 2  1.0852734 0.58121373 3 FALSE #> 3  1.0852734 0.58121373 3 FALSE #> 4  1.0852734 0.58121373 3 FALSE #> 5  1.0852734 0.58121373 3 FALSE #> 6  1.0852734 0.58121373 3 FALSE #> 7  1.0852734 0.58121373 3 FALSE #> 8  1.0852734 0.58121373 3 FALSE #> 9  1.0852734 0.58121373 3 FALSE #> 10 1.0852734 0.58121373 3 FALSE #> 11 5.3798494 0.06788605 1  TRUE #> 12 5.3798494 0.06788605 1  TRUE #> 13 5.3798494 0.06788605 1  TRUE #> 14 5.3798494 0.06788605 1  TRUE #> 15 5.3798494 0.06788605 1  TRUE #> 16 5.3798494 0.06788605 1  TRUE #> 17 5.3798494 0.06788605 1  TRUE #> 18 5.3798494 0.06788605 1  TRUE #> 19 5.3798494 0.06788605 1  TRUE #> 20 5.3798494 0.06788605 1  TRUE #> 21 0.6647215 0.71722854 2  TRUE #> 22 0.6647215 0.71722854 2  TRUE #> 23 0.6647215 0.71722854 2  TRUE #> 24 0.6647215 0.71722854 2  TRUE #> 25 0.6647215 0.71722854 2  TRUE #> 26 0.6647215 0.71722854 2  TRUE #> 27 0.6647215 0.71722854 2  TRUE #> 28 0.6647215 0.71722854 2  TRUE #> 29 0.6647215 0.71722854 2  TRUE #> 30 0.6647215 0.71722854 2  TRUE  # Plot the lineup test$plot_lineup(test$gen_lineup(100))"},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-alt_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the alternative model — HETER_MODEL$alt_formula","title":"Formula for fitting the alternative model — HETER_MODEL$alt_formula","text":"Quoted formula fitting alternative model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-alt_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the alternative model — HETER_MODEL$alt_formula","text":"","code":"HETER_MODEL$alt_formula #> NULL"},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-effect_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the effect size of the simulated data — HETER_MODEL$effect_size","title":"Compute the effect size of the simulated data — HETER_MODEL$effect_size","text":"function computes effect size simulated data.","code":""},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-effect_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the effect size of the simulated data — HETER_MODEL$effect_size","text":"dat Dataframe. number rows data frame used. Numeric. Default = self$prm$. b Numeric. Default b = self$prm$b. type Character. Type effect size. Default type = NULL.","code":""},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-effect_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the effect size of the simulated data — HETER_MODEL$effect_size","text":"single numeric value.","code":""},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-effect_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the effect size of the simulated data — HETER_MODEL$effect_size","text":"","code":"mod <- heter_model(a = 0, b = 16) mod$effect_size(mod$gen(100)) #> [1] 160"},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Closed form expression of y — HETER_MODEL$formula","title":"Closed form expression of y — HETER_MODEL$formula","text":"quoted formula, passed CLOSED_FORM$instantiate define closed form expression y.","code":""},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Closed form expression of y — HETER_MODEL$formula","text":"","code":"HETER_MODEL$formula #> y ~ 1 + x + sqrt(1 + (2 - abs(a)) * (x - a)^2 * b) * e"},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-null_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the null model — HETER_MODEL$null_formula","title":"Formula for fitting the null model — HETER_MODEL$null_formula","text":"Quoted formula fitting null model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-null_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the null model — HETER_MODEL$null_formula","text":"","code":"HETER_MODEL$null_formula #> y ~ x"},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-sample_effect_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the sample based effect size of the simulated data — HETER_MODEL$sample_effect_size","title":"Compute the sample based effect size of the simulated data — HETER_MODEL$sample_effect_size","text":"function computes sample based effect size simulated data.","code":""},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-sample_effect_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the sample based effect size of the simulated data — HETER_MODEL$sample_effect_size","text":"dat Dataframe. number rows data frame used. Numeric. Default = self$prm$. b Numeric. Default b = self$prm$b. type Character. Type effect size. Default type = NULL.","code":""},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-sample_effect_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the sample based effect size of the simulated data — HETER_MODEL$sample_effect_size","text":"single numeric value.","code":""},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-sample_effect_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the sample based effect size of the simulated data — HETER_MODEL$sample_effect_size","text":"","code":"mod <- heter_model(a = 0, b = 16) mod$sample_effect_size(mod$gen(100)) #> [1] 160"},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-test.html","id":null,"dir":"Reference","previous_headings":"","what":"Test the null model — HETER_MODEL$test","title":"Test the null model — HETER_MODEL$test","text":"function test null model. class, test BP-test computed using lmtest::bptest. variance formula ~ x + (x^2).","code":""},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test the null model — HETER_MODEL$test","text":"dat Data frame. data frame containing variables needed null_formula. null_formula Formula. Formula fitting null model. Default null_formula = self$null_formula.","code":""},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test the null model — HETER_MODEL$test","text":"list containing test name, test statistic p-value.","code":""},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test the null model — HETER_MODEL$test","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- heter_model(a = 0, b = 100)   dat <- test$gen(100000) test$test(dat) #> $name #> [1] \"BP-test\" #>  #> $statistic #> [1] 17867.76 #>  #> $p_value #> [1] 0 #>"},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL.html","id":null,"dir":"Reference","previous_headings":"","what":"HETER_MODEL class environment — HETER_MODEL","title":"HETER_MODEL class environment — HETER_MODEL","text":"class visual inference heteroskedasticity linear model, inherited VI_MODEL.","code":""},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HETER_MODEL class environment — HETER_MODEL","text":"","code":"HETER_MODEL"},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"HETER_MODEL class environment — HETER_MODEL","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/NON_NORMAL_MODEL-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — NON_NORMAL_MODEL$..init..","title":"Initialization method — NON_NORMAL_MODEL$..init..","text":"function called instance built. User input stored environment. response variable model y. formula y defined NON_NORMAL_MODEL$formula, null formula defined NON_NORMAL_MODEL$null_formula, alternative defined NON_NORMAL_MODEL$alt_formula.","code":""},{"path":"https://tengmcing.github.io/visage/reference/NON_NORMAL_MODEL-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — NON_NORMAL_MODEL$..init..","text":"x Random variable closed form expression. Default x = rand_uniform(-1, 1, env = new.env(parent = parent.env(self))). e Random variable closed form expression. Default e = rand_lognormal(0, sigma, env = new.env(parent = parent.env(self))).","code":""},{"path":"https://tengmcing.github.io/visage/reference/NON_NORMAL_MODEL-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — NON_NORMAL_MODEL$..init..","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/NON_NORMAL_MODEL-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — NON_NORMAL_MODEL$..init..","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_lognormal(sigma = 0.5)  test <- non_normal_model(x = x, e = e)  test #>  #> ── <NON_NORMAL_MODEL object> #> y = 1 + x + e #>  - x: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - e: <RAND_LOGNORMAL object> #>    [mu: 0, sigma: 0.5]   # Generate data test$gen(10) #>           y          x         e      .resid  .fitted #> 1  2.928855 0.95260892 0.9762458 -0.13324492 3.062100 #> 2  2.909340 0.89822635 1.0111137 -0.07703486 2.986375 #> 3  1.793973 0.07010865 0.7238644 -0.03929324 1.833266 #> 4  3.353190 0.73364835 1.6195417  0.59598096 2.757209 #> 5  1.941897 0.45956849 0.4823285 -0.43367083 2.375568 #> 6  3.104775 0.50557284 1.5992025  0.66514898 2.439626 #> 7  2.491262 0.83331957 0.6579420 -0.40473414 2.895996 #> 8  1.810016 0.27780858 0.5322077 -0.31246080 2.122477 #> 9  2.615035 0.59019236 1.0248425  0.05758039 2.557454 #> 10 2.068730 0.18051537 0.8882147  0.08172845 1.987002  # Generate lineup test$gen_lineup(10, k = 3) #>           y         x         e       .resid  .fitted    test_name statistic #> 1  2.896413 0.2973732 1.5990397  0.094755745 2.801657 Shapiro-test 0.7300485 #> 2  3.906180 0.2447297 2.6614500  1.147944881 2.758235 Shapiro-test 0.7300485 #> 3  2.384634 0.2793961 1.1052380 -0.402194932 2.786829 Shapiro-test 0.7300485 #> 4  2.585653 0.3577107 1.2279421 -0.265773070 2.851426 Shapiro-test 0.7300485 #> 5  4.481142 0.9572582 2.5238840  1.135186433 3.345956 Shapiro-test 0.7300485 #> 6  2.733534 0.8430906 0.8904439 -0.518251490 3.251786 Shapiro-test 0.7300485 #> 7  3.059188 0.7369987 1.3221897 -0.105088820 3.164277 Shapiro-test 0.7300485 #> 8  2.327702 0.2278376 1.0998642 -0.416599761 2.744302 Shapiro-test 0.7300485 #> 9  2.946052 0.8837575 1.0622947 -0.339277394 3.285330 Shapiro-test 0.7300485 #> 10 2.922053 0.8442650 1.0777880 -0.330701590 3.252755 Shapiro-test 0.7300485 #> 11 2.615967 0.2973732 1.5990397 -0.185690647 2.801657 Shapiro-test 0.9193375 #> 12 2.607953 0.2447297 2.6614500 -0.150281672 2.758235 Shapiro-test 0.9193375 #> 13 3.337203 0.2793961 1.1052380  0.550373717 2.786829 Shapiro-test 0.9193375 #> 14 3.108612 0.3577107 1.2279421  0.257185952 2.851426 Shapiro-test 0.9193375 #> 15 3.036235 0.9572582 2.5238840 -0.309720797 3.345956 Shapiro-test 0.9193375 #> 16 2.313759 0.8430906 0.8904439 -0.938027029 3.251786 Shapiro-test 0.9193375 #> 17 2.937964 0.7369987 1.3221897 -0.226313084 3.164277 Shapiro-test 0.9193375 #> 18 2.334369 0.2278376 1.0998642 -0.409932540 2.744302 Shapiro-test 0.9193375 #> 19 3.318181 0.8837575 1.0622947  0.032851049 3.285330 Shapiro-test 0.9193375 #> 20 4.632310 0.8442650 1.0777880  1.379555051 3.252755 Shapiro-test 0.9193375 #> 21 2.799340 0.2973732 1.5990397 -0.002317287 2.801657 Shapiro-test 0.9456738 #> 22 3.047266 0.2447297 2.6614500  0.289030769 2.758235 Shapiro-test 0.9456738 #> 23 3.278386 0.2793961 1.1052380  0.491557320 2.786829 Shapiro-test 0.9456738 #> 24 2.464283 0.3577107 1.2279421 -0.387143202 2.851426 Shapiro-test 0.9456738 #> 25 3.667661 0.9572582 2.5238840  0.321705195 3.345956 Shapiro-test 0.9456738 #> 26 4.065600 0.8430906 0.8904439  0.813814111 3.251786 Shapiro-test 0.9456738 #> 27 2.654685 0.7369987 1.3221897 -0.509592294 3.164277 Shapiro-test 0.9456738 #> 28 2.386642 0.2278376 1.0998642 -0.357659496 2.744302 Shapiro-test 0.9456738 #> 29 2.039223 0.8837575 1.0622947 -1.246106559 3.285330 Shapiro-test 0.9456738 #> 30 3.839466 0.8442650 1.0777880  0.586711443 3.252755 Shapiro-test 0.9456738 #>        p_value k  null #> 1  0.002040348 2 FALSE #> 2  0.002040348 2 FALSE #> 3  0.002040348 2 FALSE #> 4  0.002040348 2 FALSE #> 5  0.002040348 2 FALSE #> 6  0.002040348 2 FALSE #> 7  0.002040348 2 FALSE #> 8  0.002040348 2 FALSE #> 9  0.002040348 2 FALSE #> 10 0.002040348 2 FALSE #> 11 0.351462501 1  TRUE #> 12 0.351462501 1  TRUE #> 13 0.351462501 1  TRUE #> 14 0.351462501 1  TRUE #> 15 0.351462501 1  TRUE #> 16 0.351462501 1  TRUE #> 17 0.351462501 1  TRUE #> 18 0.351462501 1  TRUE #> 19 0.351462501 1  TRUE #> 20 0.351462501 1  TRUE #> 21 0.617683994 3  TRUE #> 22 0.617683994 3  TRUE #> 23 0.617683994 3  TRUE #> 24 0.617683994 3  TRUE #> 25 0.617683994 3  TRUE #> 26 0.617683994 3  TRUE #> 27 0.617683994 3  TRUE #> 28 0.617683994 3  TRUE #> 29 0.617683994 3  TRUE #> 30 0.617683994 3  TRUE  # Plot the lineup test$plot_lineup(test$gen_lineup(100))   test <- non_normal_model(x = x, e = rand_lognormal(sigma = 0.1)) test$plot_lineup(test$gen_lineup(100))   test <- non_normal_model(x = x, e = rand_lognormal(sigma = 0.5)) test$plot_lineup(test$gen_lineup(100))   test <- non_normal_model(x = x, e = rand_lognormal(sigma = 1)) test$plot_lineup(test$gen_lineup(100))   test <- non_normal_model(x = x, e = rand_lognormal(sigma = 2)) test$plot_lineup(test$gen_lineup(100))"},{"path":"https://tengmcing.github.io/visage/reference/NON_NORMAL_MODEL.html","id":null,"dir":"Reference","previous_headings":"","what":"NON_NORMAL_MODEL class environment — NON_NORMAL_MODEL","title":"NON_NORMAL_MODEL class environment — NON_NORMAL_MODEL","text":"class visual inference orthogonal polynomial linear model, inherited VI_MODEL.","code":""},{"path":"https://tengmcing.github.io/visage/reference/NON_NORMAL_MODEL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NON_NORMAL_MODEL class environment — NON_NORMAL_MODEL","text":"","code":"NON_NORMAL_MODEL"},{"path":"https://tengmcing.github.io/visage/reference/NON_NORMAL_MODEL.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"NON_NORMAL_MODEL class environment — NON_NORMAL_MODEL","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — POLY_MODEL$..init..","title":"Initialization method — POLY_MODEL$..init..","text":"function called instance built. User input stored environment. response variable model y. formula y defined POLY_MODEL$formula, null formula defined POLY_MODEL$null_formula, alternative defined POLY_MODEL$alt_formula. formula raw orthogonal polynomial term defined POLY_MODEL$raw_z_formula, scaled orthogonal polynomial term defined POLY_MODEL$z_formula.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — POLY_MODEL$..init..","text":"shape Integer. shape orthogonal polynomial used model. Note value 1 4. Default shape = 1. sigma Positive numeric. Default sigma = 1. include_z Boolean. Whether include z formula y. Default include_z = TRUE. x Random variable closed form expression. Default x = rand_uniform(-1, 1, env = new.env(parent = parent.env(self))). e Random variable closed form expression. Default e = rand_normal(0, sigma, env = new.env(parent = parent.env(self))).","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — POLY_MODEL$..init..","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — POLY_MODEL$..init..","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal(sigma = 0.5)  test <- poly_model(shape = 1, x = x, e = e)  test #>  #> ── <POLY_MODEL object> #> y = 1 + x + include_z * z + e #>  - x: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - z: <CLOSED_FORM object> #>    EXPR = (raw_z - min(raw_z))/max(raw_z - min(raw_z)) * 2 - 1 #>     - raw_z: <CLOSED_FORM object> #>       EXPR = hermite(shape)((x - min(x))/max(x - min(x)) * 4 - 2) #>        - x: <RAND_UNIFORM object> #>          [a: 0, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #> Parameters: #>  - shape: 1 #>  - include_z: TRUE #>  - sigma: 1   # Generate data test$gen(10) #>            y         x       raw_z          z            e      .resid #> 1  2.4855707 0.1568605  3.00000000  1.0000000  0.328710250  1.53436915 #> 2  1.6072501 0.3702745 -0.22644957 -0.6147620  0.851737545  0.34280859 #> 3  0.3468584 0.3752350 -0.27158306 -0.6373502 -0.391026281 -0.92486376 #> 4  0.4494384 0.4134670 -0.57392474 -0.7886651 -0.175363556 -0.87839924 #> 5  2.9248862 0.9187251  3.00000000  1.0000000  0.006161165  0.85545274 #> 6  1.3524655 0.7229399 -0.05507256 -0.5289918  0.158517460 -0.42960296 #> 7  0.4422994 0.5260395 -0.99619214 -1.0000000 -0.083740132 -1.05076723 #> 8  2.2864021 0.8599218  1.86038327  0.4296487 -0.003168402  0.30327746 #> 9  2.1078933 0.7108256 -0.17468148 -0.5888533  0.985920922  0.34360559 #> 10 1.9267002 0.8868036  2.35770252  0.6785452 -0.638648637 -0.09588034 #>      .fitted #> 1  0.9512016 #> 2  1.2644415 #> 3  1.2717222 #> 4  1.3278376 #> 5  2.0694335 #> 6  1.7820685 #> 7  1.4930666 #> 8  1.9831246 #> 9  1.7642877 #> 10 2.0225805  # Generate lineup test$gen_lineup(10, k = 3) #>            y          x       raw_z           z           e      .resid #> 1  0.6417907 0.28269576 -0.25196142 -0.80128186  0.16037676 -0.53145809 #> 2  2.2443635 0.81839709  0.88364711 -0.17226116  0.59822762  0.15289523 #> 3  0.9840238 0.73087116  0.01386545 -0.65403868 -0.09280872 -0.95742062 #> 4  4.2240708 0.96865231  3.00000000  1.00000000  1.25541845  1.87505729 #> 5  1.1562322 0.29586936 -0.34410604 -0.85232134  0.71268423 -0.03959673 #> 6  1.6937399 0.71199992 -0.13864286 -0.73851400  0.72025398 -0.21535820 #> 7  1.1903239 0.73472277  0.04651895 -0.63595171  0.09155282 -0.75772235 #> 8  1.5829824 0.63917098 -0.61071912 -1.00000000  0.94381142 -0.20128317 #> 9  1.8301552 0.84058508  1.14660064 -0.02660955  0.01617970 -0.29934443 #> 10 1.6816265 0.01091081  3.00000000  1.00000000 -0.32928434  0.97423107 #> 11 0.6875295 0.28269576 -0.25196142 -0.80128186  0.16037676 -0.48571925 #> 12 1.1982075 0.81839709  0.88364711 -0.17226116  0.59822762 -0.89326079 #> 13 0.8380409 0.73087116  0.01386545 -0.65403868 -0.09280872 -1.10340346 #> 14 3.7933159 0.96865231  3.00000000  1.00000000  1.25541845  1.44430240 #> 15 1.8908752 0.29586936 -0.34410604 -0.85232134  0.71268423  0.69504623 #> 16 2.8287565 0.71199992 -0.13864286 -0.73851400  0.72025398  0.91965842 #> 17 1.9658834 0.73472277  0.04651895 -0.63595171  0.09155282  0.01783712 #> 18 1.9731431 0.63917098 -0.61071912 -1.00000000  0.94381142  0.18887751 #> 19 1.2738007 0.84058508  1.14660064 -0.02660955  0.01617970 -0.85569894 #> 20 0.7797562 0.01091081  3.00000000  1.00000000 -0.32928434  0.07236076 #> 21 0.4788809 0.28269576 -0.25196142 -0.80128186  0.16037676 -0.69436790 #> 22 1.9638071 0.81839709  0.88364711 -0.17226116  0.59822762 -0.12766118 #> 23 2.8911592 0.73087116  0.01386545 -0.65403868 -0.09280872  0.94971480 #> 24 2.1988526 0.96865231  3.00000000  1.00000000  1.25541845 -0.15016089 #> 25 1.7177752 0.29586936 -0.34410604 -0.85232134  0.71268423  0.52194621 #> 26 3.6105766 0.71199992 -0.13864286 -0.73851400  0.72025398  1.70147847 #> 27 0.9448942 0.73472277  0.04651895 -0.63595171  0.09155282 -1.00315199 #> 28 1.5842276 0.63917098 -0.61071912 -1.00000000  0.94381142 -0.20003793 #> 29 1.2400059 0.84058508  1.14660064 -0.02660955  0.01617970 -0.88949374 #> 30 0.5991296 0.01091081  3.00000000  1.00000000 -0.32928434 -0.10826584 #>      .fitted test_name  statistic    p_value k  null #> 1  1.1732488    F-test 17.2365604 0.00428601 1 FALSE #> 2  2.0914683    F-test 17.2365604 0.00428601 1 FALSE #> 3  1.9414444    F-test 17.2365604 0.00428601 1 FALSE #> 4  2.3490135    F-test 17.2365604 0.00428601 1 FALSE #> 5  1.1958290    F-test 17.2365604 0.00428601 1 FALSE #> 6  1.9090981    F-test 17.2365604 0.00428601 1 FALSE #> 7  1.9480462    F-test 17.2365604 0.00428601 1 FALSE #> 8  1.7842656    F-test 17.2365604 0.00428601 1 FALSE #> 9  2.1294997    F-test 17.2365604 0.00428601 1 FALSE #> 10 0.7073954    F-test 17.2365604 0.00428601 1 FALSE #> 11 1.1732488    F-test  0.4132604 0.54079623 2  TRUE #> 12 2.0914683    F-test  0.4132604 0.54079623 2  TRUE #> 13 1.9414444    F-test  0.4132604 0.54079623 2  TRUE #> 14 2.3490135    F-test  0.4132604 0.54079623 2  TRUE #> 15 1.1958290    F-test  0.4132604 0.54079623 2  TRUE #> 16 1.9090981    F-test  0.4132604 0.54079623 2  TRUE #> 17 1.9480462    F-test  0.4132604 0.54079623 2  TRUE #> 18 1.7842656    F-test  0.4132604 0.54079623 2  TRUE #> 19 2.1294997    F-test  0.4132604 0.54079623 2  TRUE #> 20 0.7073954    F-test  0.4132604 0.54079623 2  TRUE #> 21 1.1732488    F-test  0.2983589 0.60187970 3  TRUE #> 22 2.0914683    F-test  0.2983589 0.60187970 3  TRUE #> 23 1.9414444    F-test  0.2983589 0.60187970 3  TRUE #> 24 2.3490135    F-test  0.2983589 0.60187970 3  TRUE #> 25 1.1958290    F-test  0.2983589 0.60187970 3  TRUE #> 26 1.9090981    F-test  0.2983589 0.60187970 3  TRUE #> 27 1.9480462    F-test  0.2983589 0.60187970 3  TRUE #> 28 1.7842656    F-test  0.2983589 0.60187970 3  TRUE #> 29 2.1294997    F-test  0.2983589 0.60187970 3  TRUE #> 30 0.7073954    F-test  0.2983589 0.60187970 3  TRUE  # Plot the lineup test$plot_lineup(test$gen_lineup(100))   test <- poly_model(shape = 1, include_z = FALSE, x = x, e = e) test$plot_lineup(test$gen_lineup(100))   test <- poly_model(shape = 2, x = x, e = e) test$plot_lineup(test$gen_lineup(100))   test <- poly_model(shape = 3, x = x, e = e) test$plot_lineup(test$gen_lineup(100))   test <- poly_model(shape = 4, x = x, e = e) test$plot_lineup(test$gen_lineup(100))"},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-E.html","id":null,"dir":"Reference","previous_headings":"","what":"Expectation of the residuals — POLY_MODEL$E","title":"Expectation of the residuals — POLY_MODEL$E","text":"function calculate expectation residuals use Frisch–Waugh–Lovell theorem.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-E.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expectation of the residuals — POLY_MODEL$E","text":"dat Dataframe/List. List contains variable x z.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-E.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expectation of the residuals — POLY_MODEL$E","text":"vector numeric expectations.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-E.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expectation of the residuals — POLY_MODEL$E","text":"","code":"mod <- poly_model(4, 0.5) dat <- mod$gen(1000, fit_model = TRUE) dat$exp <- mod$E(dat) mod$plot(dat) + ggplot2::geom_point(ggplot2::aes(.fitted, exp),                                     col = \"red\",                                     alpha = 0.6)"},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-alt_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the alternative model — POLY_MODEL$alt_formula","title":"Formula for fitting the alternative model — POLY_MODEL$alt_formula","text":"Quoted formula fitting alternative model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-alt_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the alternative model — POLY_MODEL$alt_formula","text":"","code":"POLY_MODEL$alt_formula #> y ~ x + z"},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-effect_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the effect size of the simulated data — POLY_MODEL$effect_size","title":"Compute the effect size of the simulated data — POLY_MODEL$effect_size","text":"function computes effect size simulated data.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-effect_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the effect size of the simulated data — POLY_MODEL$effect_size","text":"dat Dataframe/List. List contains variable x z. sigma Positive numeric. Default sigma = self$prm$sigma. type Character. Type effect size measure. Default type = kl.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-effect_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the effect size of the simulated data — POLY_MODEL$effect_size","text":"numeric value.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-effect_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the effect size of the simulated data — POLY_MODEL$effect_size","text":"","code":"mod <- poly_model(4, 0.5) dat <- mod$gen(1000, fit_model = TRUE) mod$effect_size(dat) #> [1] 638.206"},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Closed form expression of y — POLY_MODEL$formula","title":"Closed form expression of y — POLY_MODEL$formula","text":"quoted formula, passed CLOSED_FORM$instantiate define closed form expression y.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Closed form expression of y — POLY_MODEL$formula","text":"","code":"POLY_MODEL$formula #> y ~ 1 + x + include_z * z + e"},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-hermite.html","id":null,"dir":"Reference","previous_headings":"","what":"Hermite polynomial functions — POLY_MODEL$hermite","title":"Hermite polynomial functions — POLY_MODEL$hermite","text":"function returns Hermite polynomial function defined using mpoly::hermite.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-hermite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hermite polynomial functions — POLY_MODEL$hermite","text":"shape Integer. value 1 4.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-hermite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hermite polynomial functions — POLY_MODEL$hermite","text":"function.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-hermite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hermite polynomial functions — POLY_MODEL$hermite","text":"","code":"POLY_MODEL$hermite(1) #> function (.)  #> { #>     if (length(.) > 1) { #>         .[] <- sapply(., f) #>         return(.) #>     } #>     -1 + .^2 #> } #> <environment: 0x12c1bc7a8> POLY_MODEL$hermite(2) #> function (.)  #> { #>     if (length(.) > 1) { #>         .[] <- sapply(., f) #>         return(.) #>     } #>     -3 * . + .^3 #> } #> <environment: 0x12bfed010> POLY_MODEL$hermite(3) #> function (.)  #> { #>     if (length(.) > 1) { #>         .[] <- sapply(., f) #>         return(.) #>     } #>     -15 + 45 * .^2 - 15 * .^4 + .^6 #> } #> <environment: 0x12cd11078> POLY_MODEL$hermite(4) #> function (.)  #> { #>     if (length(.) > 1) { #>         .[] <- sapply(., f) #>         return(.) #>     } #>     -34459425 + 310134825 * .^2 - 413513100 * .^4 + 192972780 *  #>         .^6 - 41351310 * .^8 + 4594590 * .^10 - 278460 * .^12 +  #>         9180 * .^14 - 153 * .^16 + .^18 #> } #> <environment: 0x12c1da880>"},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-null_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the null model — POLY_MODEL$null_formula","title":"Formula for fitting the null model — POLY_MODEL$null_formula","text":"Quoted formula fitting null model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-null_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the null model — POLY_MODEL$null_formula","text":"","code":"POLY_MODEL$null_formula #> y ~ x"},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-raw_z_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for the raw orthogonal polynomial term raw_z — POLY_MODEL$raw_z_formula","title":"Formula for the raw orthogonal polynomial term raw_z — POLY_MODEL$raw_z_formula","text":"Quoted formula raw orthogonal polynomial term raw_z.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-raw_z_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for the raw orthogonal polynomial term raw_z — POLY_MODEL$raw_z_formula","text":"","code":"POLY_MODEL$raw_z_formula #> raw_z ~ hermite(shape)((x - min(x))/max(x - min(x)) * 4 - 2)"},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-sample_effect_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the sample based effect size of the simulated data — POLY_MODEL$sample_effect_size","title":"Compute the sample based effect size of the simulated data — POLY_MODEL$sample_effect_size","text":"function computes sample based effect size simulated data.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-sample_effect_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the sample based effect size of the simulated data — POLY_MODEL$sample_effect_size","text":"dat Dataframe/List. List contains variable x z. sigma Positive numeric. Default sigma = self$prm$sigma. include_z Boolean. Default include_z = self$prm$include_z. shape Positive integer. Default shape = self$prm$shape. type Character. Type effect size measure. Default type = kl.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-sample_effect_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the sample based effect size of the simulated data — POLY_MODEL$sample_effect_size","text":"numeric value.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-sample_effect_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the sample based effect size of the simulated data — POLY_MODEL$sample_effect_size","text":"","code":"mod <- poly_model(4, 0.5) dat <- mod$gen(1000, fit_model = TRUE) mod$sample_effect_size(dat) #> [1] 611.5485"},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-set_prm.html","id":null,"dir":"Reference","previous_headings":"","what":"Set parameter for the model — POLY_MODEL$set_prm","title":"Set parameter for the model — POLY_MODEL$set_prm","text":"function store values environment update values closed form expression y, except parameter sigma, shape raw_z. parameter sigma, value updated, corresponding value e updated. parameter shape, value updated, corresponding value raw_z updated. parameter raw_z, value updated, corresponding value z updated.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-set_prm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set parameter for the model — POLY_MODEL$set_prm","text":"prm_name List Vector. Parameter character names. prm_val List Vector. Parameter values.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-set_prm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set parameter for the model — POLY_MODEL$set_prm","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-set_prm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set parameter for the model — POLY_MODEL$set_prm","text":"","code":"# Instantiate mod <- poly_model(shape = 2, sigma = 0.5)  mod #>  #> ── <POLY_MODEL object> #> y = 1 + x + include_z * z + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - z: <CLOSED_FORM object> #>    EXPR = (raw_z - min(raw_z))/max(raw_z - min(raw_z)) * 2 - 1 #>     - raw_z: <CLOSED_FORM object> #>       EXPR = hermite(shape)((x - min(x))/max(x - min(x)) * 4 - 2) #>        - x: <RAND_UNIFORM object> #>          [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #> Parameters: #>  - shape: 2 #>  - include_z: TRUE #>  - sigma: 0.5   mod$set_prm(\"shape\", 4)  mod #>  #> ── <POLY_MODEL object> #> y = 1 + x + include_z * z + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - z: <CLOSED_FORM object> #>    EXPR = (raw_z - min(raw_z))/max(raw_z - min(raw_z)) * 2 - 1 #>     - raw_z: <CLOSED_FORM object> #>       EXPR = hermite(shape)((x - min(x))/max(x - min(x)) * 4 - 2) #>        - x: <RAND_UNIFORM object> #>          [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #> Parameters: #>  - shape: 4 #>  - include_z: TRUE #>  - sigma: 0.5   mod$set_prm(\"sigma\", 1)  mod #>  #> ── <POLY_MODEL object> #> y = 1 + x + include_z * z + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - z: <CLOSED_FORM object> #>    EXPR = (raw_z - min(raw_z))/max(raw_z - min(raw_z)) * 2 - 1 #>     - raw_z: <CLOSED_FORM object> #>       EXPR = hermite(shape)((x - min(x))/max(x - min(x)) * 4 - 2) #>        - x: <RAND_UNIFORM object> #>          [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #> Parameters: #>  - shape: 4 #>  - include_z: TRUE #>  - sigma: 1"},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-test.html","id":null,"dir":"Reference","previous_headings":"","what":"Test the null model — POLY_MODEL$test","title":"Test the null model — POLY_MODEL$test","text":"function test null model. class, test either F-test computed using stats::anova RESET test computed using lmtest::resettest.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test the null model — POLY_MODEL$test","text":"dat Data frame. data frame containing variables needed null_formula. null_formula Formula. Formula fitting null model. Default null_formula = self$null_formula. alt_formula Formula. Formula fitting alternative model. used F-test. Default alt_formula = self$alt_formula. test Character. string representing test. Either \"F\" \"RESET\". power Integer. vector integers representing power variables included. used RESET test. Default 2:3. power_type Character. Argument passed lmtest::resettest. \"fitted\", \"regressor\" \"princomp\". used RESET test. Default \"fitted\".","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test the null model — POLY_MODEL$test","text":"list containing test name, test statistic p-value.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test the null model — POLY_MODEL$test","text":"","code":"# Instantiate mod <- poly_model(shape = 2, sigma = 0.5)  mod #>  #> ── <POLY_MODEL object> #> y = 1 + x + include_z * z + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - z: <CLOSED_FORM object> #>    EXPR = (raw_z - min(raw_z))/max(raw_z - min(raw_z)) * 2 - 1 #>     - raw_z: <CLOSED_FORM object> #>       EXPR = hermite(shape)((x - min(x))/max(x - min(x)) * 4 - 2) #>        - x: <RAND_UNIFORM object> #>          [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #> Parameters: #>  - shape: 2 #>  - include_z: TRUE #>  - sigma: 0.5   dat <- mod$gen(100000)  # F-test mod$test(dat, test = \"F\") #> $name #> [1] \"F-test\" #>  #> $statistic #> [1] 147985.2 #>  #> $p_value #> [1] 0 #>   # RESET test mod$test(dat, test = \"RESET\", power = 2:4) #> $name #> [1] \"RESET-test\" #>  #> $statistic #> [1] 49330.52 #>  #> $p_value #> [1] 0 #>"},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-z_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for the scaled orthogonal polynomial term z — POLY_MODEL$z_formula","title":"Formula for the scaled orthogonal polynomial term z — POLY_MODEL$z_formula","text":"Quoted formula scaled orthogonal polynomial term z.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-z_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for the scaled orthogonal polynomial term z — POLY_MODEL$z_formula","text":"","code":"POLY_MODEL$z_formula #> z ~ (raw_z - min(raw_z))/max(raw_z - min(raw_z)) * 2 - 1"},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL.html","id":null,"dir":"Reference","previous_headings":"","what":"POLY_MODEL class environment — POLY_MODEL","title":"POLY_MODEL class environment — POLY_MODEL","text":"class visual inference orthogonal polynomial linear model, inherited VI_MODEL.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"POLY_MODEL class environment — POLY_MODEL","text":"","code":"POLY_MODEL"},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"POLY_MODEL class environment — POLY_MODEL","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — QUARTIC_MODEL$..init..","title":"Initialization method — QUARTIC_MODEL$..init..","text":"function called instance built. User input stored environment. response variable model y. formula y defined QUARTIC_MODEL$formula, null formula defined QUARTIC_MODEL$null_formula, alternative defined QUARTIC_MODEL$alt_formula.","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — QUARTIC_MODEL$..init..","text":"Numeric. Default = 1. b Numeric. Default b = 1. c Numeric. Default c = 1. sigma Positive numeric. Default sigma = 1. x Random variable closed form expression. Default x = rand_uniform(-1, 1, env = new.env(parent = parent.env(self))). e Random variable closed form expression. Default e = rand_normal(0, sigma, env = new.env(parent = parent.env(self))).","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — QUARTIC_MODEL$..init..","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — QUARTIC_MODEL$..init..","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal()  test <- quartic_model(a = 200, b = 200, c = 20, x = x, e = e)  test #>  #> ── <QUARTIC_MODEL object> #> y = 1 + x + a * x^2 + b * x^3 + c * x^4 + e #>  - x: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #> Parameters: #>  - a: 200 #>  - b: 200 #>  - c: 20 #>  - sigma: 1   # Generate data test$gen(10) #>             y           x            e     .resid    .fitted #> 1    2.657276 0.084945158  0.005566533  15.919452 -13.262175 #> 2   69.071405 0.475595943 -0.180895478 -65.478791 134.550196 #> 3    3.740258 0.111003205 -0.111673441   7.142728  -3.402470 #> 4    5.364179 0.138435817 -0.145107358  -1.613158   6.977337 #> 5    2.978942 0.003310238  1.973433364  47.129705 -44.150763 #> 6  166.611340 0.689011512  0.047620956 -48.689906 215.301246 #> 7  354.302841 0.933210139  0.481691866  46.603015 307.699826 #> 8  367.846420 0.946884493  0.710526067  54.972564 312.873856 #> 9    2.911882 0.102249419 -0.497344229   9.626563  -6.714681 #> 10  84.571841 0.516914290  0.562989447 -65.612172 150.184013  # Generate lineup test$gen_lineup(10, k = 3) #>             y         x           e     .resid   .fitted test_name    statistic #> 1   89.044512 0.5293631  0.23138023 -28.654007 117.69852    F-test 1332.4871469 #> 2  226.198394 0.7815102 -0.65801962  18.617554 207.58084    F-test 1332.4871469 #> 3  174.155044 0.6980662  2.21552356  -3.680686 177.83573    F-test 1332.4871469 #> 4  196.149392 0.7386684 -1.27780151   3.840284 192.30911    F-test 1332.4871469 #> 5  263.401701 0.8298910  0.02898431  38.574674 224.82703    F-test 1332.4871469 #> 6   48.783085 0.4062674  0.41018695 -25.035771  73.81886    F-test 1332.4871469 #> 7    8.068617 0.1686035  0.23983957  18.969274 -10.90066    F-test 1332.4871469 #> 8    3.291963 0.1211652 -1.12548216  31.102832 -27.81087    F-test 1332.4871469 #> 9  111.741082 0.5842597 -0.33407866 -25.526298 137.26738    F-test 1332.4871469 #> 10  71.937729 0.4801218  1.15621254 -28.207855 100.14558    F-test 1332.4871469 #> 11  69.442169 0.5293631  0.23138023 -48.256350 117.69852    F-test    0.3806156 #> 12 217.329745 0.7815102 -0.65801962   9.748905 207.58084    F-test    0.3806156 #> 13 182.729751 0.6980662  2.21552356   4.894021 177.83573    F-test    0.3806156 #> 14 162.429911 0.7386684 -1.27780151 -29.879197 192.30911    F-test    0.3806156 #> 15 239.958657 0.8298910  0.02898431  15.131630 224.82703    F-test    0.3806156 #> 16  95.857612 0.4062674  0.41018695  22.038755  73.81886    F-test    0.3806156 #> 17  10.431644 0.1686035  0.23983957  21.332302 -10.90066    F-test    0.3806156 #> 18 -43.244782 0.1211652 -1.12548216 -15.433913 -27.81087    F-test    0.3806156 #> 19 171.231184 0.5842597 -0.33407866  33.963804 137.26738    F-test    0.3806156 #> 20  86.605627 0.4801218  1.15621254 -13.539957 100.14558    F-test    0.3806156 #> 21  58.637844 0.5293631  0.23138023 -59.060675 117.69852    F-test    0.8478568 #> 22 210.182119 0.7815102 -0.65801962   2.601279 207.58084    F-test    0.8478568 #> 23 160.240550 0.6980662  2.21552356 -17.595180 177.83573    F-test    0.8478568 #> 24 211.742635 0.7386684 -1.27780151  19.433526 192.30911    F-test    0.8478568 #> 25 250.594384 0.8298910  0.02898431  25.767357 224.82703    F-test    0.8478568 #> 26  81.396652 0.4062674  0.41018695   7.577795  73.81886    F-test    0.8478568 #> 27 -23.254704 0.1686035  0.23983957 -12.354047 -10.90066    F-test    0.8478568 #> 28   2.067063 0.1211652 -1.12548216  29.877932 -27.81087    F-test    0.8478568 #> 29 131.101729 0.5842597 -0.33407866  -6.165651 137.26738    F-test    0.8478568 #> 30 110.063246 0.4801218  1.15621254   9.917662 100.14558    F-test    0.8478568 #>         p_value k  null #> 1  1.123164e-07 2 FALSE #> 2  1.123164e-07 2 FALSE #> 3  1.123164e-07 2 FALSE #> 4  1.123164e-07 2 FALSE #> 5  1.123164e-07 2 FALSE #> 6  1.123164e-07 2 FALSE #> 7  1.123164e-07 2 FALSE #> 8  1.123164e-07 2 FALSE #> 9  1.123164e-07 2 FALSE #> 10 1.123164e-07 2 FALSE #> 11 7.718183e-01 1  TRUE #> 12 7.718183e-01 1  TRUE #> 13 7.718183e-01 1  TRUE #> 14 7.718183e-01 1  TRUE #> 15 7.718183e-01 1  TRUE #> 16 7.718183e-01 1  TRUE #> 17 7.718183e-01 1  TRUE #> 18 7.718183e-01 1  TRUE #> 19 7.718183e-01 1  TRUE #> 20 7.718183e-01 1  TRUE #> 21 5.242143e-01 3  TRUE #> 22 5.242143e-01 3  TRUE #> 23 5.242143e-01 3  TRUE #> 24 5.242143e-01 3  TRUE #> 25 5.242143e-01 3  TRUE #> 26 5.242143e-01 3  TRUE #> 27 5.242143e-01 3  TRUE #> 28 5.242143e-01 3  TRUE #> 29 5.242143e-01 3  TRUE #> 30 5.242143e-01 3  TRUE  # Plot the lineup test$plot_lineup(test$gen_lineup(100))"},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-E.html","id":null,"dir":"Reference","previous_headings":"","what":"Expectation of the residuals — QUARTIC_MODEL$E","title":"Expectation of the residuals — QUARTIC_MODEL$E","text":"function calculate expectation residuals use Frisch–Waugh–Lovell theorem.","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-E.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expectation of the residuals — QUARTIC_MODEL$E","text":"dat Dataframe/List. List contains variable x z. Numeric. Default = self$prm$. b Numeric. Default b = self$prm$b. c Numeric. Default c = self$prm$c.","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-E.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expectation of the residuals — QUARTIC_MODEL$E","text":"vector numeric expectations.","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-E.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expectation of the residuals — QUARTIC_MODEL$E","text":"","code":"mod <- quartic_model(-1, 1, 1, 0.5) dat <- mod$gen(1000, fit_model = TRUE) dat$exp <- mod$E(dat) mod$plot(dat) + ggplot2::geom_point(ggplot2::aes(.fitted, exp),                                     col = \"red\",                                     alpha = 0.6)"},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-alt_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the alternative model — QUARTIC_MODEL$alt_formula","title":"Formula for fitting the alternative model — QUARTIC_MODEL$alt_formula","text":"Quoted formula fitting alternative model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-alt_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the alternative model — QUARTIC_MODEL$alt_formula","text":"","code":"QUARTIC_MODEL$alt_formula #> y ~ x + I(x^2) + I(x^3) + I(x^4)"},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-effect_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the effect size of the simulated data — QUARTIC_MODEL$effect_size","title":"Compute the effect size of the simulated data — QUARTIC_MODEL$effect_size","text":"function computes effect size simulated data.","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-effect_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the effect size of the simulated data — QUARTIC_MODEL$effect_size","text":"dat Dataframe/List. List contains variable x. Numeric. Default = self$prm$. b Numeric. Default b = self$prm$b. c Numeric. Default c = self$prm$c. sigma Positive numeric. Default sigma = self$prm$sigma.","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-effect_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the effect size of the simulated data — QUARTIC_MODEL$effect_size","text":"numeric value.","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-effect_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the effect size of the simulated data — QUARTIC_MODEL$effect_size","text":"","code":"mod <- quartic_model(-1, 1, 1, 0.5) dat <- mod$gen(1000, fit_model = TRUE) mod$effect_size(dat) #> [1] 0.6262444"},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Closed form expression of y — QUARTIC_MODEL$formula","title":"Closed form expression of y — QUARTIC_MODEL$formula","text":"quoted formula, passed CLOSED_FORM$instantiate define closed form expression y.","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Closed form expression of y — QUARTIC_MODEL$formula","text":"","code":"QUARTIC_MODEL$formula #> y ~ 1 + x + a * x^2 + b * x^3 + c * x^4 + e"},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-null_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the null model — QUARTIC_MODEL$null_formula","title":"Formula for fitting the null model — QUARTIC_MODEL$null_formula","text":"Quoted formula fitting null model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-null_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the null model — QUARTIC_MODEL$null_formula","text":"","code":"QUARTIC_MODEL$null_formula #> y ~ x"},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-sample_effect_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the sample based effect size of the simulated data — QUARTIC_MODEL$sample_effect_size","title":"Compute the sample based effect size of the simulated data — QUARTIC_MODEL$sample_effect_size","text":"function computes sample based effect size simulated data.","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-sample_effect_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the sample based effect size of the simulated data — QUARTIC_MODEL$sample_effect_size","text":"dat Dataframe/List. List contains variable x. Numeric. Default = self$prm$. b Numeric. Default b = self$prm$b. c Numeric. Default c = self$prm$c. sigma Positive numeric. Default sigma = self$prm$sigma.","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-sample_effect_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the sample based effect size of the simulated data — QUARTIC_MODEL$sample_effect_size","text":"numeric value.","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-sample_effect_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the sample based effect size of the simulated data — QUARTIC_MODEL$sample_effect_size","text":"","code":"mod <- quartic_model(-1, 1, 1, 0.5) dat <- mod$gen(1000, fit_model = TRUE) mod$sample_effect_size(dat) #> [1] 0.6271718"},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-set_prm.html","id":null,"dir":"Reference","previous_headings":"","what":"Set parameter for the model — QUARTIC_MODEL$set_prm","title":"Set parameter for the model — QUARTIC_MODEL$set_prm","text":"function store values environment update values closed form expression y, except parameter sigma. parameter sigma, value updated, corresponding value e updated.","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-set_prm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set parameter for the model — QUARTIC_MODEL$set_prm","text":"prm_name List Vector. Parameter character names. prm_val List Vector. Parameter values.","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-set_prm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set parameter for the model — QUARTIC_MODEL$set_prm","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-set_prm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set parameter for the model — QUARTIC_MODEL$set_prm","text":"","code":"# Instantiate mod <- quartic_model(a = -1, b = 1, c = 1, sigma = 0.5)  mod #>  #> ── <QUARTIC_MODEL object> #> y = 1 + x + a * x^2 + b * x^3 + c * x^4 + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #> Parameters: #>  - a: -1 #>  - b: 1 #>  - c: 1 #>  - sigma: 0.5   mod$set_prm(\"a\", 2)  mod #>  #> ── <QUARTIC_MODEL object> #> y = 1 + x + a * x^2 + b * x^3 + c * x^4 + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #> Parameters: #>  - a: 2 #>  - b: 1 #>  - c: 1 #>  - sigma: 0.5   mod$set_prm(\"sigma\", 1)  mod #>  #> ── <QUARTIC_MODEL object> #> y = 1 + x + a * x^2 + b * x^3 + c * x^4 + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #> Parameters: #>  - a: 2 #>  - b: 1 #>  - c: 1 #>  - sigma: 1"},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL.html","id":null,"dir":"Reference","previous_headings":"","what":"QUARTIC_MODEL class environment — QUARTIC_MODEL","title":"QUARTIC_MODEL class environment — QUARTIC_MODEL","text":"class visual inference quartic linear model, inherited VI_MODEL.","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"QUARTIC_MODEL class environment — QUARTIC_MODEL","text":"","code":"QUARTIC_MODEL"},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"QUARTIC_MODEL class environment — QUARTIC_MODEL","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/RAND_LOGNORMAL-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — RAND_LOGNORMAL$..init..","title":"Initialization method — RAND_LOGNORMAL$..init..","text":"function called instance built. User input stored environment.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_LOGNORMAL-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — RAND_LOGNORMAL$..init..","text":"mu Numeric. Mean log random variable. Default 0. sigma Numeric. Standard deviation log random variable. Default 1.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_LOGNORMAL-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — RAND_LOGNORMAL$..init..","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_LOGNORMAL-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — RAND_LOGNORMAL$..init..","text":"","code":"# Instantiate test <- rand_lognormal(mu = 1, sigma = 2) test #>  #> ── <RAND_LOGNORMAL object> #> [mu: 1, sigma: 2]"},{"path":"https://tengmcing.github.io/visage/reference/RAND_LOGNORMAL-cash-gen.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random values — RAND_LOGNORMAL$gen","title":"Generate random values — RAND_LOGNORMAL$gen","text":"function generates random values random variable.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_LOGNORMAL-cash-gen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random values — RAND_LOGNORMAL$gen","text":"n Integer. Number observations. mu Numeric. provided length n, values used realization. sigma Numeric. provided length n, values used realization.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_LOGNORMAL-cash-gen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random values — RAND_LOGNORMAL$gen","text":"vector numeric values.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/RAND_LOGNORMAL-cash-gen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random values — RAND_LOGNORMAL$gen","text":"","code":"test <- rand_lognormal(mu = 1, sigma = 2) test$gen(10) #>  [1]   9.6588421   0.5534303 116.8474261   1.2414718   8.8490136   1.0874447 #>  [7]   0.1819335   8.2930158 177.3957496   3.6886216  test$gen(3, mu = c(0,1,2), sigma = c(1,2,3)) #> [1] 1.6065865 0.3446981 0.9682315"},{"path":"https://tengmcing.github.io/visage/reference/RAND_LOGNORMAL.html","id":null,"dir":"Reference","previous_headings":"","what":"RAND_LOGNORMAL class environment — RAND_LOGNORMAL","title":"RAND_LOGNORMAL class environment — RAND_LOGNORMAL","text":"class log-normal random variable, inherited RAND_VAR.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_LOGNORMAL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RAND_LOGNORMAL class environment — RAND_LOGNORMAL","text":"","code":"RAND_LOGNORMAL"},{"path":"https://tengmcing.github.io/visage/reference/RAND_LOGNORMAL.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"RAND_LOGNORMAL class environment — RAND_LOGNORMAL","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/RAND_NORMAL-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — RAND_NORMAL$..init..","title":"Initialization method — RAND_NORMAL$..init..","text":"function called instance built. User input stored environment.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_NORMAL-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — RAND_NORMAL$..init..","text":"mu Numeric. Mean. Default 0. sigma Numeric. Standard deviation. Default 1.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_NORMAL-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — RAND_NORMAL$..init..","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_NORMAL-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — RAND_NORMAL$..init..","text":"","code":"# Instantiate test <- rand_normal(mu = 1, sigma = 2) test #>  #> ── <RAND_NORMAL object> #> [mu: 1, sigma: 2]"},{"path":"https://tengmcing.github.io/visage/reference/RAND_NORMAL-cash-gen.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random values — RAND_NORMAL$gen","title":"Generate random values — RAND_NORMAL$gen","text":"function generates random values random variable.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_NORMAL-cash-gen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random values — RAND_NORMAL$gen","text":"n Integer. Number observations. mu Numeric. provided length n, values used realization. sigma Numeric. provided length n, values used realization.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_NORMAL-cash-gen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random values — RAND_NORMAL$gen","text":"vector numeric values.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/RAND_NORMAL-cash-gen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random values — RAND_NORMAL$gen","text":"","code":"test <- rand_normal(mu = 1, sigma = 2) test$gen(10) #>  [1]  4.5371402  3.1704972  4.2687397  1.2319645 -0.8762802  0.9325470 #>  [7] -1.1678624  2.5796242 -0.5166398  0.2773677  test$gen(3, mu = c(0,1,2), sigma = c(1,2,4)) #> [1] -0.2632228  3.1204421  5.1146882"},{"path":"https://tengmcing.github.io/visage/reference/RAND_NORMAL.html","id":null,"dir":"Reference","previous_headings":"","what":"RAND_NORMAL class environment — RAND_NORMAL","title":"RAND_NORMAL class environment — RAND_NORMAL","text":"class normal random variable, inherited RAND_VAR.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_NORMAL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RAND_NORMAL class environment — RAND_NORMAL","text":"","code":"RAND_NORMAL"},{"path":"https://tengmcing.github.io/visage/reference/RAND_NORMAL.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"RAND_NORMAL class environment — RAND_NORMAL","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/RAND_T-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — RAND_T$..init..","title":"Initialization method — RAND_T$..init..","text":"function called instance built. User input stored environment.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_T-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — RAND_T$..init..","text":"mu Numeric. Mean. Default 0. tau Numeric. Scale parameter. Default 1. df Integer. Degree freedom. Default 10.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_T-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — RAND_T$..init..","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_T-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — RAND_T$..init..","text":"","code":"# Instantiate test <- rand_t(mu = 0, tau = 1, df = 3) test #>  #> ── <RAND_T object> #> [mu: 0, tau: 1, df: 3]"},{"path":"https://tengmcing.github.io/visage/reference/RAND_T-cash-gen.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random values — RAND_T$gen","title":"Generate random values — RAND_T$gen","text":"function generates random values random variable.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_T-cash-gen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random values — RAND_T$gen","text":"n Integer. Number observations. mu Numeric. provided length n, values used realization. tau Numeric. provided length n, values used realization. df Integer. provided length n, values used realization.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_T-cash-gen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random values — RAND_T$gen","text":"vector numeric values.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/RAND_T-cash-gen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random values — RAND_T$gen","text":"","code":"test <- rand_t(df = 12) test$gen(10) #>  [1] -0.53452388  1.11214875 -0.24036332 -0.42063400 -2.18327795 -0.01239887 #>  [7]  2.13263644  0.44653663 -0.49993335  1.06190691  test$gen(3, mu = c(1,2,3), tau = c(2,3,4), df = 10) #> [1] -1.140263  1.621839  3.615464"},{"path":"https://tengmcing.github.io/visage/reference/RAND_T.html","id":null,"dir":"Reference","previous_headings":"","what":"RAND_T class environment — RAND_T","title":"RAND_T class environment — RAND_T","text":"class discrete uniform random variable, inherited RAND_VAR.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_T.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RAND_T class environment — RAND_T","text":"","code":"RAND_T"},{"path":"https://tengmcing.github.io/visage/reference/RAND_T.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"RAND_T class environment — RAND_T","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — RAND_UNIFORM$..init..","title":"Initialization method — RAND_UNIFORM$..init..","text":"function called instance built. User input stored environment.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — RAND_UNIFORM$..init..","text":"Numeric. Lower bound. Default 0. b Numeric. Upper bound. Default 1.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — RAND_UNIFORM$..init..","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — RAND_UNIFORM$..init..","text":"","code":"# Instantiate test <- rand_uniform(a = 1, b = 2) test #>  #> ── <RAND_UNIFORM object> #> [a: 1, b: 2]"},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM-cash-gen.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random values — RAND_UNIFORM$gen","title":"Generate random values — RAND_UNIFORM$gen","text":"function generates random values random variable.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM-cash-gen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random values — RAND_UNIFORM$gen","text":"n Integer. Number observations. Numeric. provided length n, values used realization. b Numeric. provided length n, values used realization.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM-cash-gen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random values — RAND_UNIFORM$gen","text":"vector numeric values.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM-cash-gen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random values — RAND_UNIFORM$gen","text":"","code":"test <- rand_uniform(a = 1, b = 2) test$gen(10) #>  [1] 1.612827 1.294330 1.919080 1.438586 1.871579 1.729424 1.607710 1.564717 #>  [9] 1.286361 1.220711  test$gen(3, a = c(1,2,3), b = c(2,3,4)) #> [1] 1.181878 2.817737 3.733866"},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM.html","id":null,"dir":"Reference","previous_headings":"","what":"RAND_UNIFORM class environment — RAND_UNIFORM","title":"RAND_UNIFORM class environment — RAND_UNIFORM","text":"class uniform random variable, inherited RAND_VAR.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RAND_UNIFORM class environment — RAND_UNIFORM","text":"","code":"RAND_UNIFORM"},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"RAND_UNIFORM class environment — RAND_UNIFORM","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM_D-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — RAND_UNIFORM_D$..init..","title":"Initialization method — RAND_UNIFORM_D$..init..","text":"function called instance built. User input stored environment.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM_D-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — RAND_UNIFORM_D$..init..","text":"Numeric. Lower bound. Default 0. b Numeric. Upper bound. Default 1. k Integer. Number unique discrete values. Default 5. even Boolean. Whether candidate values evenly spaced.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM_D-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — RAND_UNIFORM_D$..init..","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM_D-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — RAND_UNIFORM_D$..init..","text":"","code":"# Instantiate test <- rand_uniform_d(a = 1, b = 2, k = 3) test #>  #> ── <RAND_UNIFORM_D object> #> [a: 1, b: 2, k: 3, even: 0]"},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM_D-cash-gen.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random values — RAND_UNIFORM_D$gen","title":"Generate random values — RAND_UNIFORM_D$gen","text":"function generates random values random variable.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM_D-cash-gen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random values — RAND_UNIFORM_D$gen","text":"n Integer. Number observations. Numeric. provided length n, values used realization. b Numeric. provided length n, values used realization. k Numeric. provided length n, values used realization. even Boolean. provided length n, values used realization.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM_D-cash-gen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random values — RAND_UNIFORM_D$gen","text":"vector numeric values.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM_D-cash-gen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random values — RAND_UNIFORM_D$gen","text":"","code":"test <- rand_uniform_d(a = 1, b = 2, k = 2, even = TRUE) test$gen(10) #>  [1] 1 1 2 1 2 1 1 2 1 2  test$gen(3, a = c(1,2,3), b = c(2,3,4), k = 1, even = c(TRUE, TRUE, FALSE)) #> [1] 1 1 3"},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM_D.html","id":null,"dir":"Reference","previous_headings":"","what":"RAND_UNIFORM_D class environment — RAND_UNIFORM_D","title":"RAND_UNIFORM_D class environment — RAND_UNIFORM_D","text":"class discrete uniform random variable, inherited RAND_VAR.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM_D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RAND_UNIFORM_D class environment — RAND_UNIFORM_D","text":"","code":"RAND_UNIFORM_D"},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM_D.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"RAND_UNIFORM_D class environment — RAND_UNIFORM_D","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — RAND_VAR$..init..","title":"Initialization method — RAND_VAR$..init..","text":"function called instance built. User input stored environment.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — RAND_VAR$..init..","text":"dist Character. Distribution name. prm List. List parameters.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — RAND_VAR$..init..","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — RAND_VAR$..init..","text":"","code":"RAND_VAR$..init.. #> function (dist = \"uniform\", prm = list())  #> { #>     self$dist <- dist #>     if (!is.list(prm))  #>         stop(\"`prm` is not a list!\") #>     self$prm <- prm #>     return(invisible(self)) #> } #> <environment: 0x11e5428c0>  # Instantiate test <- rand_var(dist = \"uniform\", prm = list(a = 1, b = 2)) test$prm #> $a #> [1] 1 #>  #> $b #> [1] 2 #>  test$dist #> [1] \"uniform\""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-..str...html","id":null,"dir":"Reference","previous_headings":"","what":"String representation of the object — RAND_VAR$..str..","title":"String representation of the object — RAND_VAR$..str..","text":"function returns string representation object.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-..str...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"String representation of the object — RAND_VAR$..str..","text":"string.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-..str...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"String representation of the object — RAND_VAR$..str..","text":"","code":"RAND_VAR$..str..() #> [1] \"<RAND_VAR class>\"  test <- rand_var(dist = \"uniform\", prm = list(a = 1, b = 2)) test$..str..() #> [1] \"<RAND_VAR object>\\n [a: 1, b: 2]\""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-E.html","id":null,"dir":"Reference","previous_headings":"","what":"Expectation of the random variable — RAND_VAR$E","title":"Expectation of the random variable — RAND_VAR$E","text":"Expectation random variable. User override method derived class.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-E.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expectation of the random variable — RAND_VAR$E","text":"NA","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-E.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expectation of the random variable — RAND_VAR$E","text":"","code":"RAND_VAR$E() #> [1] NA"},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-Var.html","id":null,"dir":"Reference","previous_headings":"","what":"Variance of the random variable — RAND_VAR$Var","title":"Variance of the random variable — RAND_VAR$Var","text":"Variance random variable. User override method derived class.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-Var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variance of the random variable — RAND_VAR$Var","text":"NA","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-Var.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variance of the random variable — RAND_VAR$Var","text":"","code":"RAND_VAR$Var() #> [1] NA"},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Distribution name — RAND_VAR$dist","title":"Distribution name — RAND_VAR$dist","text":"string, initialized instance built.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distribution name — RAND_VAR$dist","text":"","code":"# Instantiate test <- rand_var(dist = \"uniform\", prm = list(a = 1, b = 2)) test$prm #> $a #> [1] 1 #>  #> $b #> [1] 2 #>  test$dist #> [1] \"uniform\""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-gen.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random values — RAND_VAR$gen","title":"Generate random values — RAND_VAR$gen","text":"function generates random values random variable.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-gen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random values — RAND_VAR$gen","text":"n Integer. Number observations. ... Ignored.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-gen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random values — RAND_VAR$gen","text":"NA. User needs define gen method derived class.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-gen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random values — RAND_VAR$gen","text":"","code":"test <- RAND_VAR$gen(10)"},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-prm.html","id":null,"dir":"Reference","previous_headings":"","what":"List of parameters — RAND_VAR$prm","title":"List of parameters — RAND_VAR$prm","text":"list, initialized instance built.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-prm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of parameters — RAND_VAR$prm","text":"","code":"# Instantiate test <- rand_var(dist = \"uniform\", prm = list(a = 1, b = 2)) test$prm #> $a #> [1] 1 #>  #> $b #> [1] 2 #>  test$dist #> [1] \"uniform\""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-set_prm.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random values — RAND_VAR$set_prm","title":"Generate random values — RAND_VAR$set_prm","text":"function updates parameters.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-set_prm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random values — RAND_VAR$set_prm","text":"prm_name List Vector. sequence character parameter names. prm_value List Vector. sequence parameter values.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-set_prm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random values — RAND_VAR$set_prm","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-set_prm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random values — RAND_VAR$set_prm","text":"","code":"test <- rand_var() test$set_prm(\"a\", 1) test #>  #> ── <RAND_VAR object> #> [a: 1]"},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR.html","id":null,"dir":"Reference","previous_headings":"","what":"RAND_VAR class environment — RAND_VAR","title":"RAND_VAR class environment — RAND_VAR","text":"base class random variable, inherited bandicoot::BASE.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RAND_VAR class environment — RAND_VAR","text":"","code":"RAND_VAR"},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"RAND_VAR class environment — RAND_VAR","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — SIMPLE_CUBIC_MODEL$..init..","title":"Initialization method — SIMPLE_CUBIC_MODEL$..init..","text":"function called instance built. User input stored environment. response variable model y. formula y defined SIMPLE_CUBIC_MODEL$formula, null formula defined SIMPLE_CUBIC_MODEL$null_formula, alternative defined SIMPLE_CUBIC_MODEL$alt_formula.","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — SIMPLE_CUBIC_MODEL$..init..","text":"Numeric. Default = 1. b Numeric. Default b = 1. sigma Positive numeric. Default sigma = 1. x Random variable closed form expression. Default x = rand_uniform(-1, 1, env = new.env(parent = parent.env(self))). e Random variable closed form expression. Default e = rand_normal(0, sigma, env = new.env(parent = parent.env(self))).","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — SIMPLE_CUBIC_MODEL$..init..","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — SIMPLE_CUBIC_MODEL$..init..","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal()  test <- simple_cubic_model(a = 200, b = 200, x = x, e = e)  test #>  #> ── <SIMPLE_CUBIC_MODEL object> #> y = 1 + x + a * x^2 + b * x^3 + e #>  - x: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #> Parameters: #>  - a: 200 #>  - b: 200 #>  - sigma: 1   # Generate data test$gen(10) #>             y           x           e     .resid     .fitted #> 1   13.705991 0.226088928 -0.05470031  -7.251517  20.9575074 #> 2   25.206485 0.294847385  1.39813160 -23.528947  48.7354320 #> 3   34.811815 0.349510540  0.49170611 -36.007141  70.8189558 #> 4    1.288299 0.008034913  0.26724876  68.423054 -67.1347549 #> 5    7.812200 0.171941944 -0.28920747   8.729687  -0.9174868 #> 6   45.918048 0.400421017 -0.39023188 -45.468377  91.3864242 #> 7    7.464508 0.155759112  0.70079709  14.919743  -7.4552351 #> 8  140.873010 0.649309011  0.15324197 -51.062383 191.9353933 #> 9  314.796995 0.905920979  0.05594162  19.192203 295.6047924 #> 10 375.643184 0.975191301 -2.01263194  52.053677 323.5895070  # Generate lineup test$gen_lineup(10, k = 3) #>             y          x          e     .resid   .fitted test_name    statistic #> 1   53.468548 0.42281783  1.1729028 -40.315105  93.78365    F-test 3.637618e+03 #> 2  205.187033 0.76098047 -0.5276343 -34.118940 239.30597    F-test 3.637618e+03 #> 3   70.009215 0.48220300 -0.4012761 -49.329796 119.33901    F-test 3.637618e+03 #> 4    4.627729 0.15545441 -2.1122843  25.899201 -21.27147    F-test 3.637618e+03 #> 5   72.703283 0.48810363  0.3084845 -49.174961 121.87824    F-test 3.637618e+03 #> 6  345.527519 0.94187885 -0.9563957  28.375125 317.15239    F-test 3.637618e+03 #> 7  367.227811 0.96375164  0.4707897  40.662847 326.56496    F-test 3.637618e+03 #> 8    3.303694 0.06048449  1.4672801  65.443794 -62.14010    F-test 3.637618e+03 #> 9   22.326401 0.27596648  1.6155523  -8.262367  30.58877    F-test 3.637618e+03 #> 10 329.084475 0.92122476  1.0718266  20.820202 308.26427    F-test 3.637618e+03 #> 11 164.199140 0.42281783  1.1729028  70.415488  93.78365    F-test 5.806364e-01 #> 12 176.823089 0.76098047 -0.5276343 -62.482884 239.30597    F-test 5.806364e-01 #> 13  66.690666 0.48220300 -0.4012761 -52.648346 119.33901    F-test 5.806364e-01 #> 14 -19.687115 0.15545441 -2.1122843   1.584357 -21.27147    F-test 5.806364e-01 #> 15 153.224057 0.48810363  0.3084845  31.345813 121.87824    F-test 5.806364e-01 #> 16 360.220114 0.94187885 -0.9563957  43.067720 317.15239    F-test 5.806364e-01 #> 17 335.346606 0.96375164  0.4707897   8.781642 326.56496    F-test 5.806364e-01 #> 18 -59.377805 0.06048449  1.4672801   2.762295 -62.14010    F-test 5.806364e-01 #> 19   2.888700 0.27596648  1.6155523 -27.700068  30.58877    F-test 5.806364e-01 #> 20 293.138255 0.92122476  1.0718266 -15.126018 308.26427    F-test 5.806364e-01 #> 21  47.180339 0.42281783  1.1729028 -46.603314  93.78365    F-test 7.976224e-02 #> 22 200.034128 0.76098047 -0.5276343 -39.271845 239.30597    F-test 7.976224e-02 #> 23 177.676596 0.48220300 -0.4012761  58.337584 119.33901    F-test 7.976224e-02 #> 24 -48.025866 0.15545441 -2.1122843 -26.754394 -21.27147    F-test 7.976224e-02 #> 25  91.874236 0.48810363  0.3084845 -30.004007 121.87824    F-test 7.976224e-02 #> 26 313.058357 0.94187885 -0.9563957  -4.094037 317.15239    F-test 7.976224e-02 #> 27 297.581523 0.96375164  0.4707897 -28.983440 326.56496    F-test 7.976224e-02 #> 28 -38.463795 0.06048449  1.4672801  23.676304 -62.14010    F-test 7.976224e-02 #> 29  54.913669 0.27596648  1.6155523  24.324901  30.58877    F-test 7.976224e-02 #> 30 377.636521 0.92122476  1.0718266  69.372249 308.26427    F-test 7.976224e-02 #>         p_value k  null #> 1  5.595493e-10 1 FALSE #> 2  5.595493e-10 1 FALSE #> 3  5.595493e-10 1 FALSE #> 4  5.595493e-10 1 FALSE #> 5  5.595493e-10 1 FALSE #> 6  5.595493e-10 1 FALSE #> 7  5.595493e-10 1 FALSE #> 8  5.595493e-10 1 FALSE #> 9  5.595493e-10 1 FALSE #> 10 5.595493e-10 1 FALSE #> 11 5.881432e-01 2  TRUE #> 12 5.881432e-01 2  TRUE #> 13 5.881432e-01 2  TRUE #> 14 5.881432e-01 2  TRUE #> 15 5.881432e-01 2  TRUE #> 16 5.881432e-01 2  TRUE #> 17 5.881432e-01 2  TRUE #> 18 5.881432e-01 2  TRUE #> 19 5.881432e-01 2  TRUE #> 20 5.881432e-01 2  TRUE #> 21 9.242984e-01 3  TRUE #> 22 9.242984e-01 3  TRUE #> 23 9.242984e-01 3  TRUE #> 24 9.242984e-01 3  TRUE #> 25 9.242984e-01 3  TRUE #> 26 9.242984e-01 3  TRUE #> 27 9.242984e-01 3  TRUE #> 28 9.242984e-01 3  TRUE #> 29 9.242984e-01 3  TRUE #> 30 9.242984e-01 3  TRUE  # Plot the lineup test$plot_lineup(test$gen_lineup(100))"},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-E.html","id":null,"dir":"Reference","previous_headings":"","what":"Expectation of the residuals — SIMPLE_CUBIC_MODEL$E","title":"Expectation of the residuals — SIMPLE_CUBIC_MODEL$E","text":"function calculate expectation residuals use Frisch–Waugh–Lovell theorem.","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-E.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expectation of the residuals — SIMPLE_CUBIC_MODEL$E","text":"dat Dataframe/List. List contains variable x z. Numeric. Default = self$prm$. b Numeric. Default b = self$prm$b.","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-E.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expectation of the residuals — SIMPLE_CUBIC_MODEL$E","text":"vector numeric expectations.","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-E.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expectation of the residuals — SIMPLE_CUBIC_MODEL$E","text":"","code":"mod <- simple_cubic_model(-1, 1, 0.5) dat <- mod$gen(1000, fit_model = TRUE) dat$exp <- mod$E(dat) mod$plot(dat) + ggplot2::geom_point(ggplot2::aes(.fitted, exp),                                     col = \"red\",                                     alpha = 0.6)"},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-alt_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the alternative model — SIMPLE_CUBIC_MODEL$alt_formula","title":"Formula for fitting the alternative model — SIMPLE_CUBIC_MODEL$alt_formula","text":"Quoted formula fitting alternative model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-alt_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the alternative model — SIMPLE_CUBIC_MODEL$alt_formula","text":"","code":"SIMPLE_CUBIC_MODEL$alt_formula #> y ~ x + I(x^2) + I(x^3)"},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-effect_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the effect size of the simulated data — SIMPLE_CUBIC_MODEL$effect_size","title":"Compute the effect size of the simulated data — SIMPLE_CUBIC_MODEL$effect_size","text":"function computes effect size simulated data.","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-effect_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the effect size of the simulated data — SIMPLE_CUBIC_MODEL$effect_size","text":"dat Dataframe/List. List contains variable x. Numeric. Default = self$prm$. b Numeric. Default b = self$prm$b. sigma Positive numeric. Default sigma = self$prm$sigma.","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-effect_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the effect size of the simulated data — SIMPLE_CUBIC_MODEL$effect_size","text":"numeric value.","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-effect_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the effect size of the simulated data — SIMPLE_CUBIC_MODEL$effect_size","text":"","code":"mod <- simple_cubic_model(-1, 1, 0.5) dat <- mod$gen(1000, fit_model = TRUE) mod$effect_size(dat) #> [1] 1.304513"},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Closed form expression of y — SIMPLE_CUBIC_MODEL$formula","title":"Closed form expression of y — SIMPLE_CUBIC_MODEL$formula","text":"quoted formula, passed CLOSED_FORM$instantiate define closed form expression y.","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Closed form expression of y — SIMPLE_CUBIC_MODEL$formula","text":"","code":"SIMPLE_CUBIC_MODEL$formula #> y ~ 1 + x + a * x^2 + b * x^3 + e"},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-null_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the null model — SIMPLE_CUBIC_MODEL$null_formula","title":"Formula for fitting the null model — SIMPLE_CUBIC_MODEL$null_formula","text":"Quoted formula fitting null model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-null_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the null model — SIMPLE_CUBIC_MODEL$null_formula","text":"","code":"SIMPLE_CUBIC_MODEL$null_formula #> y ~ x"},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-sample_effect_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the sample based effect size of the simulated data — SIMPLE_CUBIC_MODEL$sample_effect_size","title":"Compute the sample based effect size of the simulated data — SIMPLE_CUBIC_MODEL$sample_effect_size","text":"function computes sample based effect size simulated data.","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-sample_effect_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the sample based effect size of the simulated data — SIMPLE_CUBIC_MODEL$sample_effect_size","text":"dat Dataframe/List. List contains variable x. Numeric. Default = self$prm$. b Numeric. Default b = self$prm$b. sigma Positive numeric. Default sigma = self$prm$sigma.","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-sample_effect_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the sample based effect size of the simulated data — SIMPLE_CUBIC_MODEL$sample_effect_size","text":"numeric value.","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-sample_effect_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the sample based effect size of the simulated data — SIMPLE_CUBIC_MODEL$sample_effect_size","text":"","code":"mod <- simple_cubic_model(-1, 1, 0.5) dat <- mod$gen(1000, fit_model = TRUE) mod$sample_effect_size(dat) #> [1] 1.273748"},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-set_prm.html","id":null,"dir":"Reference","previous_headings":"","what":"Set parameter for the model — SIMPLE_CUBIC_MODEL$set_prm","title":"Set parameter for the model — SIMPLE_CUBIC_MODEL$set_prm","text":"function store values environment update values closed form expression y, except parameter sigma. parameter sigma, value updated, corresponding value e updated.","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-set_prm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set parameter for the model — SIMPLE_CUBIC_MODEL$set_prm","text":"prm_name List Vector. Parameter character names. prm_val List Vector. Parameter values.","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-set_prm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set parameter for the model — SIMPLE_CUBIC_MODEL$set_prm","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-set_prm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set parameter for the model — SIMPLE_CUBIC_MODEL$set_prm","text":"","code":"# Instantiate mod <- simple_cubic_model(a = -1, b = 1, sigma = 0.5)  mod #>  #> ── <SIMPLE_CUBIC_MODEL object> #> y = 1 + x + a * x^2 + b * x^3 + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #> Parameters: #>  - a: -1 #>  - b: 1 #>  - sigma: 0.5   mod$set_prm(\"a\", 2)  mod #>  #> ── <SIMPLE_CUBIC_MODEL object> #> y = 1 + x + a * x^2 + b * x^3 + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #> Parameters: #>  - a: 2 #>  - b: 1 #>  - sigma: 0.5   mod$set_prm(\"sigma\", 1)  mod #>  #> ── <SIMPLE_CUBIC_MODEL object> #> y = 1 + x + a * x^2 + b * x^3 + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #> Parameters: #>  - a: 2 #>  - b: 1 #>  - sigma: 1"},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL.html","id":null,"dir":"Reference","previous_headings":"","what":"SIMPLE_CUBIC_MODEL class environment — SIMPLE_CUBIC_MODEL","title":"SIMPLE_CUBIC_MODEL class environment — SIMPLE_CUBIC_MODEL","text":"class visual inference simple cubic linear model, inherited VI_MODEL.","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SIMPLE_CUBIC_MODEL class environment — SIMPLE_CUBIC_MODEL","text":"","code":"SIMPLE_CUBIC_MODEL"},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"SIMPLE_CUBIC_MODEL class environment — SIMPLE_CUBIC_MODEL","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-..cache...html","id":null,"dir":"Reference","previous_headings":"","what":"Cache list, containing the last fitted model, data frame and formula — VI_MODEL$..cache..","title":"Cache list, containing the last fitted model, data frame and formula — VI_MODEL$..cache..","text":"list, used cache = TRUE calling fit method.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-..cache...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cache list, containing the last fitted model, data frame and formula — VI_MODEL$..cache..","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  # Turn on cache test$fit(test$gen(10), cache = TRUE) #>  #> Call: #> stats::lm(formula = y ~ x, data = test$gen(10)) #>  #> Coefficients: #> (Intercept)            x   #>      0.9945       2.1488   #>   test$..cache.. #> $dat #>            y          x           e      .resid  .fitted #> 1  1.1867751 0.77771531 -1.19578128 -0.99451432 2.181289 #> 2  2.6728700 0.69051640  0.50554067  0.58649717 2.086373 #> 3  1.2128954 0.21703144 -0.05123865 -0.35808545 1.570981 #> 4  2.9240543 0.77563525  0.54680901  0.74502900 2.179025 #> 5  0.6867672 0.41177325 -0.89456329 -1.09619162 1.782959 #> 6  1.6224057 0.11936533  0.48879225  0.15773506 1.464671 #> 7  1.6063731 0.03780823  0.56713538  0.23047798 1.375895 #> 8  2.1370904 0.83236668 -0.38811053 -0.10368744 2.240778 #> 9  2.7246689 0.46638491  1.04076912  0.88226492 1.842404 #> 10 2.0109688 0.66674196 -0.10031797 -0.04952531 2.060494 #>  #> $formula #> y ~ x #>  #> $mod #>  #> Call: #> stats::lm(formula = y ~ x, data = test$gen(10)) #>  #> Coefficients: #> (Intercept)            x   #>      0.9945       2.1488   #>  #>"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — VI_MODEL$..init..","title":"Initialization method — VI_MODEL$..init..","text":"function called instance built. User input stored environment. response variable model y.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — VI_MODEL$..init..","text":"prm Named List. list random variables closed form expressions needs used constructing y. Constant parameters also supplied. prm_type Named List. list characters denoting type parameters. \"r\" stands random variable closed form used expression y, \"o\" stands others. value affects string representation object. formula Formula. passed CLOSED_FORM$instantiate define closed form expression y. Default formula = self$formula. null_formula Formula. Formula fitting null model. Default NULL. alt_formula Formula. Formula fitting alternative model. Default NULL.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — VI_MODEL$..init..","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — VI_MODEL$..init..","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  test #>  #> ── <VI_MODEL object> #> y = 1 + x + x^2 + e #>  - x: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1]"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-..str...html","id":null,"dir":"Reference","previous_headings":"","what":"String representation of the object — VI_MODEL$..str..","title":"String representation of the object — VI_MODEL$..str..","text":"function returns string representation object.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-..str...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"String representation of the object — VI_MODEL$..str..","text":"string.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-..str...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"String representation of the object — VI_MODEL$..str..","text":"","code":"VI_MODEL$..str..() #> [1] \"<VI_MODEL class>\"  # Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  test$..str..() #> [1] \"<VI_MODEL object>\\n y = 1 + x + x^2 + e\\n  - x: <RAND_UNIFORM object>\\n    [a: 0, b: 1]\\n  - e: <RAND_NORMAL object>\\n    [mu: 0, sigma: 1]\""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-alt_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the alternative model — VI_MODEL$alt_formula","title":"Formula for fitting the alternative model — VI_MODEL$alt_formula","text":"quoted formula, used fit alternative model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-alt_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the alternative model — VI_MODEL$alt_formula","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  # A formula with environment equals to `test` test$alt_formula #> y ~ x + I(x^2)  # Use alternative formula in `fit` test$fit(test$gen(10), test$alt_formula) #>  #> Call: #> stats::lm(formula = y ~ x + I(x^2), data = test$gen(10)) #>  #> Coefficients: #> (Intercept)            x       I(x^2)   #>       1.285        2.066       -1.976   #>   # F-test also needs to use the alternative model test$test(test$gen(1000)) #> $name #> [1] \"F-test\" #>  #> $statistic #> [1] 4.638255 #>  #> $p_value #> [1] 0.03150595 #>"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-average_effect_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the effect size of the simulated data or the defined model — VI_MODEL$average_effect_size","title":"Compute the effect size of the simulated data or the defined model — VI_MODEL$average_effect_size","text":"function computes average effect size defined model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-average_effect_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the effect size of the simulated data or the defined model — VI_MODEL$average_effect_size","text":"n Number observations plot. tol Tolerance convergence. window_size Window size convergence check. ... Arguments passed method VI_MODEL$sample_effect_size.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-average_effect_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the effect size of the simulated data or the defined model — VI_MODEL$average_effect_size","text":"average effect size.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-effect_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the effect size of the simulated data or the defined model — VI_MODEL$effect_size","title":"Compute the effect size of the simulated data or the defined model — VI_MODEL$effect_size","text":"function computes effect size defined model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-effect_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the effect size of the simulated data or the defined model — VI_MODEL$effect_size","text":"n Number observations plot. tol Tolerance convergence. window_size Window size convergence check. ... Arguments passed method VI_MODEL$sample_effect_size.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-effect_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the effect size of the simulated data or the defined model — VI_MODEL$effect_size","text":"estimated effect size.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Test the null model against the alternative model — VI_MODEL$fit","title":"Test the null model against the alternative model — VI_MODEL$fit","text":"function fit linear model using stats::lm.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test the null model against the alternative model — VI_MODEL$fit","text":"dat Data frame. data frame containing variables needed formula. Default dat = self$..cache..$dat. formula Formula. Formula fitting model. Default formula = self$null_formula. cache Boolean. Whether cache model. Default FALSE. ... Arguments passed stats::lm.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test the null model against the alternative model — VI_MODEL$fit","text":"fitted linear model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test the null model against the alternative model — VI_MODEL$fit","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  test$fit(test$gen(100000)) #>  #> Call: #> stats::lm(formula = y ~ x, data = test$gen(1e+05)) #>  #> Coefficients: #> (Intercept)            x   #>      0.8354       2.0034   #>   test$fit(test$gen(100000), formula = y ~ x + I(x^2)) #>  #> Call: #> stats::lm(formula = y ~ x + I(x^2), data = test$gen(1e+05)) #>  #> Coefficients: #> (Intercept)            x       I(x^2)   #>      1.0105       0.9429       1.0571   #>"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Closed form expression of y — VI_MODEL$formula","title":"Closed form expression of y — VI_MODEL$formula","text":"quoted formula, passed CLOSED_FORM$instantiate define closed form expression y.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Closed form expression of y — VI_MODEL$formula","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  # A formula with environment equals to `test` test$formula #> y ~ 1 + x + x^2 + e  # `y` has the same expression test$prm$y #>  #> ── <CLOSED_FORM object> #> EXPR = 1 + x + x^2 + e #>  - x: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1]"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-gen.html","id":null,"dir":"Reference","previous_headings":"","what":"Generating random values from the expression of y — VI_MODEL$gen","title":"Generating random values from the expression of y — VI_MODEL$gen","text":"function generates random values expression y, keeps right hand side information data frame.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-gen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generating random values from the expression of y — VI_MODEL$gen","text":"n Integer. Number observations. fit_model Boolean. Whether fit null model obtain fitted values residuals. Default TRUE. test Boolean. Whether test null model alternative model obtain test statistic p-value. Default FALSE. computed List. Default NULL. provided, random variables random closed form expression use values list, makes expression potentially deterministic.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-gen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generating random values from the expression of y — VI_MODEL$gen","text":"data frame.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-gen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generating random values from the expression of y — VI_MODEL$gen","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  dat <- test$gen(10) dat #>            y          x          e     .resid   .fitted #> 1  3.6391247 0.32857456  2.2025889  2.0253094 1.6138153 #> 2  2.6772971 0.29017865  1.3029148  1.1688133 1.5084837 #> 3  0.6884509 0.47352740 -1.0093047 -1.3230137 2.0114646 #> 4  0.7010454 0.09972819 -0.4086285 -0.2849753 0.9860207 #> 5  0.8282100 0.11425514 -0.2990993 -0.1976625 1.0258725 #> 6  4.1423000 0.85893194  1.5456040  1.0735545 3.0687455 #> 7  0.6459718 0.45458725 -1.0152651 -1.3135343 1.9595061 #> 8  2.4722365 0.93154706 -0.3270904 -0.7957141 3.2679506 #> 9  3.6315692 0.69266350  1.4591229  1.0189481 2.6126210 #> 10 0.5740034 0.44956511 -1.0776705 -1.3717255 1.9457288  test$gen(10, computed = list(e = dat$e)) #>            y          e         x      .resid  .fitted #> 1  4.8924939  2.2025889 0.8928047  1.65876421 3.233730 #> 2  3.1497704  1.3029148 0.5473087  1.13144969 2.018321 #> 3  1.2035361 -1.0093047 0.7094795 -1.38527993 2.588816 #> 4  1.8892703 -0.4086285 0.7441458 -0.82149701 2.710767 #> 5  2.4753302 -0.2990993 0.9228245 -0.86400508 3.339335 #> 6  3.0540330  1.5456040 0.3708783  1.65637115 1.397662 #> 7  0.7795362 -1.0152651 0.5221552 -1.15029763 1.929834 #> 8  1.0299907 -0.3270904 0.2791541 -0.04499761 1.074988 #> 9  4.0577729  1.4591229 0.8596507  0.94067473 3.117098 #> 10 0.5986675 -1.0776705 0.4624645 -1.12118253 1.719850  test$gen(10, test = TRUE) #>             y          x          e      .resid   .fitted test_name statistic #> 1   0.7144130 0.39995217 -0.8455009 -0.98415625 1.6985692    F-test 0.5403175 #> 2   1.5447901 0.17504342  0.3391065  0.48115909 1.0636310    F-test 0.5403175 #> 3   0.6274340 0.02548661 -0.3987021 -0.01398427 0.6414183    F-test 0.5403175 #> 4   1.7349718 0.37852221  0.2131706  0.09690133 1.6380705    F-test 0.5403175 #> 5   3.2064779 0.75721710  0.8758831  0.49931668 2.7071612    F-test 0.5403175 #> 6   1.9574924 0.09499887  0.8534687  1.11983451 0.8376579    F-test 0.5403175 #> 7   4.9415389 0.65108743  2.8665366  2.53399150 2.4075474    F-test 0.5403175 #> 8   2.1228924 0.82060294 -0.3710997 -0.76321297 2.8861053    F-test 0.5403175 #> 9  -1.0285963 0.42827049 -2.6402824 -2.80711084 1.7785145    F-test 0.5403175 #> 10  0.9749909 0.20129077 -0.2668178 -0.16273880 1.1377297    F-test 0.5403175 #>      p_value #> 1  0.4861925 #> 2  0.4861925 #> 3  0.4861925 #> 4  0.4861925 #> 5  0.4861925 #> 6  0.4861925 #> 7  0.4861925 #> 8  0.4861925 #> 9  0.4861925 #> 10 0.4861925"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-gen_lineup.html","id":null,"dir":"Reference","previous_headings":"","what":"Generating random values from the expression of y, and forms a lineup — VI_MODEL$gen_lineup","title":"Generating random values from the expression of y, and forms a lineup — VI_MODEL$gen_lineup","text":"function generates random values expression y, keeps right hand side information data frame.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-gen_lineup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generating random values from the expression of y, and forms a lineup — VI_MODEL$gen_lineup","text":"n Integer. Number observations. k Integer. Number plots lineup. Default k = 20. pos Integer. Position true data plot. Default pos = NULL, means position random. computed List. Default NULL. provided, random variables random closed form expression use values list, makes expression potentially deterministic.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-gen_lineup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generating random values from the expression of y, and forms a lineup — VI_MODEL$gen_lineup","text":"data frame.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-gen_lineup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generating random values from the expression of y, and forms a lineup — VI_MODEL$gen_lineup","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  test$gen_lineup(10, k = 3) #>              y          x          e      .resid   .fitted test_name  statistic #> 1   0.35578786 0.68470726 -1.7977434 -2.05234744 2.4081353    F-test 0.27765754 #> 2   3.41657275 0.83735821  0.8780458  0.55752337 2.8590494    F-test 0.27765754 #> 3   3.67672407 0.87779764  1.0283977  0.69822104 2.9785030    F-test 0.27765754 #> 4   2.40447163 0.84275888 -0.1485298 -0.47053077 2.8750024    F-test 0.27765754 #> 5   1.99823224 0.45361672  0.3388474  0.27271296 1.7255193    F-test 0.27765754 #> 6   0.42004017 0.15067345 -0.7533358 -0.41061804 0.8306582    F-test 0.27765754 #> 7   0.09960734 0.27297568 -1.2478841 -1.09231820 1.1919255    F-test 0.27765754 #> 8   0.53309883 0.03210788 -0.5000400  0.05267026 0.4804286    F-test 0.27765754 #> 9   2.25336414 0.17419368  1.0488270  1.35322974 0.9001344    F-test 0.27765754 #> 10  3.42828547 0.66056726  1.3313691  1.09145707 2.3368284    F-test 0.27765754 #> 11  1.03096377 0.68470726 -1.7977434 -1.37717153 2.4081353    F-test 0.07456393 #> 12  3.84879702 0.83735821  0.8780458  0.98974764 2.8590494    F-test 0.07456393 #> 13  4.55967495 0.87779764  1.0283977  1.58117191 2.9785030    F-test 0.07456393 #> 14  1.43640887 0.84275888 -0.1485298 -1.43859352 2.8750024    F-test 0.07456393 #> 15  2.49815800 0.45361672  0.3388474  0.77263873 1.7255193    F-test 0.07456393 #> 16  0.51308805 0.15067345 -0.7533358 -0.31757015 0.8306582    F-test 0.07456393 #> 17  1.75824790 0.27297568 -1.2478841  0.56632236 1.1919255    F-test 0.07456393 #> 18  0.09145548 0.03210788 -0.5000400 -0.38897309 0.4804286    F-test 0.07456393 #> 19  1.41433473 0.17419368  1.0488270  0.51420033 0.9001344    F-test 0.07456393 #> 20  1.43505572 0.66056726  1.3313691 -0.90177267 2.3368284    F-test 0.07456393 #> 21  2.67029381 0.68470726 -1.7977434  0.26215851 2.4081353    F-test 1.37551411 #> 22  4.71497217 0.83735821  0.8780458  1.85592278 2.8590494    F-test 1.37551411 #> 23  2.83387022 0.87779764  1.0283977 -0.14463281 2.9785030    F-test 1.37551411 #> 24  1.82620838 0.84275888 -0.1485298 -1.04879402 2.8750024    F-test 1.37551411 #> 25  0.76708449 0.45361672  0.3388474 -0.95843478 1.7255193    F-test 1.37551411 #> 26 -0.18001213 0.15067345 -0.7533358 -1.01067034 0.8306582    F-test 1.37551411 #> 27  0.28415225 0.27297568 -1.2478841 -0.90777329 1.1919255    F-test 1.37551411 #> 28  1.49069435 0.03210788 -0.5000400  1.01026577 0.4804286    F-test 1.37551411 #> 29  2.01564763 0.17419368  1.0488270  1.11551323 0.9001344    F-test 1.37551411 #> 30  2.16327334 0.66056726  1.3313691 -0.17355505 2.3368284    F-test 1.37551411 #>      p_value k  null #> 1  0.6145210 2 FALSE #> 2  0.6145210 2 FALSE #> 3  0.6145210 2 FALSE #> 4  0.6145210 2 FALSE #> 5  0.6145210 2 FALSE #> 6  0.6145210 2 FALSE #> 7  0.6145210 2 FALSE #> 8  0.6145210 2 FALSE #> 9  0.6145210 2 FALSE #> 10 0.6145210 2 FALSE #> 11 0.7926846 1  TRUE #> 12 0.7926846 1  TRUE #> 13 0.7926846 1  TRUE #> 14 0.7926846 1  TRUE #> 15 0.7926846 1  TRUE #> 16 0.7926846 1  TRUE #> 17 0.7926846 1  TRUE #> 18 0.7926846 1  TRUE #> 19 0.7926846 1  TRUE #> 20 0.7926846 1  TRUE #> 21 0.2792273 3  TRUE #> 22 0.2792273 3  TRUE #> 23 0.2792273 3  TRUE #> 24 0.2792273 3  TRUE #> 25 0.2792273 3  TRUE #> 26 0.2792273 3  TRUE #> 27 0.2792273 3  TRUE #> 28 0.2792273 3  TRUE #> 29 0.2792273 3  TRUE #> 30 0.2792273 3  TRUE  test$gen_lineup(10, k = 3, computed = list(e = 1:10)) #>            y  e         x      .resid  .fitted test_name statistic   p_value k #> 1   2.399301  1 0.3057921 -4.84566195 7.244963    F-test 0.3041551 0.5984446 1 #> 2   4.963599  2 0.9878169 -2.91723236 7.880831    F-test 0.3041551 0.5984446 1 #> 3   5.595449  3 0.8584732 -2.16479171 7.760241    F-test 0.3041551 0.5984446 1 #> 4   5.613602  4 0.4293021 -1.74651188 7.360114    F-test 0.3041551 0.5984446 1 #> 5   6.145132  5 0.1285955 -0.93462579 7.079758    F-test 0.3041551 0.5984446 1 #> 6   8.583918  6 0.8542221  0.82763985 7.756278    F-test 0.3041551 0.5984446 1 #> 7   9.758036  7 0.9170517  1.94318029 7.814855    F-test 0.3041551 0.5984446 1 #> 8   9.297286  8 0.2397877  2.11386053 7.183425    F-test 0.3041551 0.5984446 1 #> 9  10.324893  9 0.2582168  3.12428548 7.200607    F-test 0.3041551 0.5984446 1 #> 10 12.226404 10 0.7150735  4.59985755 7.626546    F-test 0.3041551 0.5984446 1 #> 11  3.930945  1 0.3057921 -3.31401758 7.244963    F-test 0.6494528 0.4468165 2 #> 12  2.257143  2 0.9878169 -5.62368807 7.880831    F-test 0.6494528 0.4468165 2 #> 13  6.196315  3 0.8584732 -1.56392636 7.760241    F-test 0.6494528 0.4468165 2 #> 14  9.006238  4 0.4293021  1.64612385 7.360114    F-test 0.6494528 0.4468165 2 #> 15  8.675790  5 0.1285955  1.59603237 7.079758    F-test 0.6494528 0.4468165 2 #> 16 11.678159  6 0.8542221  3.92188103 7.756278    F-test 0.6494528 0.4468165 2 #> 17 10.640615  7 0.9170517  2.82575945 7.814855    F-test 0.6494528 0.4468165 2 #> 18  7.289727  8 0.2397877  0.10630120 7.183425    F-test 0.6494528 0.4468165 2 #> 19  5.575952  9 0.2582168 -1.62465526 7.200607    F-test 0.6494528 0.4468165 2 #> 20  9.656735 10 0.7150735  2.03018938 7.626546    F-test 0.6494528 0.4468165 2 #> 21  7.158330  1 0.3057921 -0.08663336 7.244963    F-test 0.2178442 0.6548656 3 #> 22 10.061229  2 0.9878169  2.18039809 7.880831    F-test 0.2178442 0.6548656 3 #> 23  7.118016  3 0.8584732 -0.64222457 7.760241    F-test 0.2178442 0.6548656 3 #> 24  7.627141  4 0.4293021  0.26702641 7.360114    F-test 0.2178442 0.6548656 3 #> 25  4.778372  5 0.1285955 -2.30138610 7.079758    F-test 0.2178442 0.6548656 3 #> 26  5.943460  6 0.8542221 -1.81281812 7.756278    F-test 0.2178442 0.6548656 3 #> 27  5.114301  7 0.9170517 -2.70055400 7.814855    F-test 0.2178442 0.6548656 3 #> 28 13.056405  8 0.2397877  5.87297969 7.183425    F-test 0.2178442 0.6548656 3 #> 29  3.309688  9 0.2582168 -3.89091906 7.200607    F-test 0.2178442 0.6548656 3 #> 30 10.740677 10 0.7150735  3.11413102 7.626546    F-test 0.2178442 0.6548656 3 #>     null #> 1  FALSE #> 2  FALSE #> 3  FALSE #> 4  FALSE #> 5  FALSE #> 6  FALSE #> 7  FALSE #> 8  FALSE #> 9  FALSE #> 10 FALSE #> 11  TRUE #> 12  TRUE #> 13  TRUE #> 14  TRUE #> 15  TRUE #> 16  TRUE #> 17  TRUE #> 18  TRUE #> 19  TRUE #> 20  TRUE #> 21  TRUE #> 22  TRUE #> 23  TRUE #> 24  TRUE #> 25  TRUE #> 26  TRUE #> 27  TRUE #> 28  TRUE #> 29  TRUE #> 30  TRUE"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-null_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the null model — VI_MODEL$null_formula","title":"Formula for fitting the null model — VI_MODEL$null_formula","text":"quoted formula, used fit null model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-null_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the null model — VI_MODEL$null_formula","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  # A formula with environment equals to `test` test$null_formula #> y ~ x  # By default, `fit` use the null formula test$fit(test$gen(10)) #>  #> Call: #> stats::lm(formula = y ~ x, data = test$gen(10)) #>  #> Coefficients: #> (Intercept)            x   #>      0.6919       1.8467   #>   # F-test also needs to use the null model test$test(test$gen(1000)) #> $name #> [1] \"F-test\" #>  #> $statistic #> [1] 13.60215 #>  #> $p_value #> [1] 0.0002381274 #>"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-null_resid.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate null residuals from a null model — VI_MODEL$null_resid","title":"Generate null residuals from a null model — VI_MODEL$null_resid","text":"function uses data null model generate null residuals. null residuals generated first regressing random noises original regressors, multiply obtained residuals original RSS divided current RSS. results null residuals.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-null_resid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate null residuals from a null model — VI_MODEL$null_resid","text":"dat Data frame. data frame used fit model. mod Linear Model. null model. test Boolean. Whether use test newly generated data.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-null_resid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate null residuals from a null model — VI_MODEL$null_resid","text":"data frame updated y, .resid, potentially updated test result.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-null_resid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate null residuals from a null model — VI_MODEL$null_resid","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  dat <- test$gen(10) test$null_resid(dat, test$fit(dat), test = TRUE) #>             y         x           e     .resid   .fitted test_name statistic #> 1   0.8396872 0.3935516  1.55098444 -0.3641226 1.2038098    F-test  3.396276 #> 2  -0.2905780 0.8352929 -0.03278602 -1.9607300 1.6701520    F-test  3.396276 #> 3   1.8948493 0.7659039 -1.37810905  0.2979506 1.5968987    F-test  3.396276 #> 4   3.3063990 0.3529416  0.48281186  2.1454607 1.1609382    F-test  3.396276 #> 5   1.4244650 0.6448226 -1.73436428 -0.0446093 1.4690743    F-test  3.396276 #> 6  -0.6694163 0.1012263 -1.90914327 -1.5646210 0.8952047    F-test  3.396276 #> 7   2.5717422 0.6093271  0.09370680  1.1401402 1.4316020    F-test  3.396276 #> 8   1.3169245 0.8740698 -0.94733046 -0.3941639 1.7110884    F-test  3.396276 #> 9   2.3347609 0.8699153 -2.45841181  0.6280584 1.7067025    F-test  3.396276 #> 10  1.6857047 0.7395413  0.13181969  0.1166368 1.5690679    F-test  3.396276 #>      p_value null #> 1  0.1078853 TRUE #> 2  0.1078853 TRUE #> 3  0.1078853 TRUE #> 4  0.1078853 TRUE #> 5  0.1078853 TRUE #> 6  0.1078853 TRUE #> 7  0.1078853 TRUE #> 8  0.1078853 TRUE #> 9  0.1078853 TRUE #> 10 0.1078853 TRUE"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the fitted model — VI_MODEL$plot","title":"Plot the fitted model — VI_MODEL$plot","text":"function generates plot fitted model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the fitted model — VI_MODEL$plot","text":"dat Data frame. data frame containing correspoding variables. type Character. \"resid\": VI_MODEL$plot_resid. Default type = \"resid\". theme ggtheme. ggplot theme object. alpha Numeric. Alpha dot. Value 0 1. Default 1. size Numeric. Size dot. Value 0 1. Default 0.5. stroke Numeric. Stroke dot. Default 0.5. remove_axis Boolean. Whether remove axis. Default remove_axis = FALSE. remove_legend Boolean. Whether remove legend. Default remove_legend = FALSE. remove_grid_line Boolean. Whether remove grid lines. Default remove_grid_line = FALSE. add_zero_line Boolean. Whether add zero horizontal line. Default add_zero_line = TRUE.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the fitted model — VI_MODEL$plot","text":"ggplot.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the fitted model — VI_MODEL$plot","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + 10 * x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  # Residual plot of the null model test$plot(test$gen(1000, fit_model = TRUE), type = \"resid\")   # Customize the plot test$plot(test$gen(1000, fit_model = TRUE),           type = \"resid\",           theme = ggplot2::theme_light(),           remove_axis = TRUE,           remove_grid_line = TRUE,           add_zero_line = TRUE)"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot_lineup.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the lineup — VI_MODEL$plot_lineup","title":"Plot the lineup — VI_MODEL$plot_lineup","text":"function plots lineup.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot_lineup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the lineup — VI_MODEL$plot_lineup","text":"dat Data frame. data frame containing correspoding variables. type Character. \"resid\": VI_MODEL$plot_resid. Default type = \"resid\". ... Arguments passed VI_MODEL$plot","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot_lineup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the lineup — VI_MODEL$plot_lineup","text":"ggplot.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot_lineup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the lineup — VI_MODEL$plot_lineup","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + 10 * x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  # Lineup of residual plots test$plot_lineup(test$gen_lineup(100), type = \"resid\")   # Customize the plot test$plot_lineup(test$gen_lineup(100),                  type = \"resid\",                  theme = ggplot2::theme_light(),                  remove_axis = TRUE,                  remove_grid_line = TRUE,                  add_zero_line = TRUE)"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot_qq.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the residual Q-Q plot — VI_MODEL$plot_qq","title":"Plot the residual Q-Q plot — VI_MODEL$plot_qq","text":"function generate Q-Q plot residuals.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot_qq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the residual Q-Q plot — VI_MODEL$plot_qq","text":"dat Data frame. data frame containing .resid.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot_qq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the residual Q-Q plot — VI_MODEL$plot_qq","text":"ggplot.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot_qq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the residual Q-Q plot — VI_MODEL$plot_qq","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + 10 * x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  # Residual plot of the null model test$plot_qq(test$gen(1000, fit_model = TRUE))"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot_resid.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the residuals vs fitted values plot — VI_MODEL$plot_resid","title":"Plot the residuals vs fitted values plot — VI_MODEL$plot_resid","text":"function generate residuals vs fitted values plot.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot_resid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the residuals vs fitted values plot — VI_MODEL$plot_resid","text":"dat Data frame. data frame containing .resid .fitted. alpha Numeric. Alpha dot. Value 0 1. size Numeric. Size dot. Value 0 1. Default 0.5. stroke Numeric. Stroke dot. Default 0.5.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot_resid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the residuals vs fitted values plot — VI_MODEL$plot_resid","text":"ggplot.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot_resid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the residuals vs fitted values plot — VI_MODEL$plot_resid","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + 10 * x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  # Residual plot of the null model test$plot_resid(test$gen(1000, fit_model = TRUE))"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-prm.html","id":null,"dir":"Reference","previous_headings":"","what":"List of parameters — VI_MODEL$prm","title":"List of parameters — VI_MODEL$prm","text":"list, initialized instance built.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-prm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of parameters — VI_MODEL$prm","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e) test$prm #> $x #>  #> ── <RAND_UNIFORM object> #> [a: 0, b: 1]  #>  #> $e #>  #> ── <RAND_NORMAL object> #> [mu: 0, sigma: 1]  #>  #> $y #>  #> ── <CLOSED_FORM object> #> EXPR = 1 + x + x^2 + e #>  - x: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1]  #>"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-prm_type.html","id":null,"dir":"Reference","previous_headings":"","what":"List of parameter types — VI_MODEL$prm_type","title":"List of parameter types — VI_MODEL$prm_type","text":"list, initialized instance built. \"r\" stands random variable closed form used expression y, \"o\" stands others. value affects string representation object. variable part expression y, labelled \"o\". variable part expression y, random variable closed form expression, labelled \"o\" well.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-prm_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of parameter types — VI_MODEL$prm_type","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e) test$prm_type #> $x #> [1] \"r\" #>  #> $e #> [1] \"r\" #>"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-rss.html","id":null,"dir":"Reference","previous_headings":"","what":"Residual sum of square of a fitted model — VI_MODEL$rss","title":"Residual sum of square of a fitted model — VI_MODEL$rss","text":"function returns residual sum square fitted model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-rss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Residual sum of square of a fitted model — VI_MODEL$rss","text":"Numeric value.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-rss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Residual sum of square of a fitted model — VI_MODEL$rss","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  test$rss(test$fit(test$gen(100))) #> [1] 92.27415"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-sample_effect_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the sample based effect size of the simulated data of the defined model — VI_MODEL$sample_effect_size","title":"Compute the sample based effect size of the simulated data of the defined model — VI_MODEL$sample_effect_size","text":"function computes sample based effect size simulated data defined model. abstract method.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-sample_effect_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the sample based effect size of the simulated data of the defined model — VI_MODEL$sample_effect_size","text":"... Derived class needs override method.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-sample_effect_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the sample based effect size of the simulated data of the defined model — VI_MODEL$sample_effect_size","text":"NA","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-sample_effect_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the sample based effect size of the simulated data of the defined model — VI_MODEL$sample_effect_size","text":"","code":"VI_MODEL$sample_effect_size() #> [1] NA"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-set_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Set formula for y, null model or alternative model — VI_MODEL$set_formula","title":"Set formula for y, null model or alternative model — VI_MODEL$set_formula","text":"function store formula environment, drops attributes. recommended modify formula y instance built, may create confusion.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-set_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set formula for y, null model or alternative model — VI_MODEL$set_formula","text":"... Formulas. Formulas names.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-set_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set formula for y, null model or alternative model — VI_MODEL$set_formula","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-set_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set formula for y, null model or alternative model — VI_MODEL$set_formula","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  test$set_formula(alt_formula = y ~ x + I(x^3)) test$alt_formula #> y ~ x + I(x^3)"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-set_prm.html","id":null,"dir":"Reference","previous_headings":"","what":"Set parameter for the model — VI_MODEL$set_prm","title":"Set parameter for the model — VI_MODEL$set_prm","text":"function store values environment update values closed form expression y. However, parameter directly used closed form expression, user override method correctly set parameter.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-set_prm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set parameter for the model — VI_MODEL$set_prm","text":"prm_name List Vector. Parameter character names. prm_val List Vector. Parameter values.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-set_prm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set parameter for the model — VI_MODEL$set_prm","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-set_prm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set parameter for the model — VI_MODEL$set_prm","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(a = 1, x = x, e = e),                  prm_type = list(a = \"o\", x = \"r\", e = \"r\"),                  formula = y ~ 1 + a * x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  test #>  #> ── <VI_MODEL object> #> y = 1 + a * x + x^2 + e #>  - x: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #> Parameters: #>  - a: 1   test$set_prm(\"a\", 2)  test #>  #> ── <VI_MODEL object> #> y = 1 + a * x + x^2 + e #>  - x: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #> Parameters: #>  - a: 2"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-test.html","id":null,"dir":"Reference","previous_headings":"","what":"Test the null model against the alternative model — VI_MODEL$test","title":"Test the null model against the alternative model — VI_MODEL$test","text":"function test null model alternative model. class, test F-test computed using stats::anova. Derived classes may test procedures.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test the null model against the alternative model — VI_MODEL$test","text":"dat Data frame. data frame containing variables needed null_formula alt_formula. null_formula Formula. Formula fitting null model. Default null_formula = self$null_formula. alt_formula Formula. Formula fitting alternative model. Default alt_formula = self$alt_formula.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test the null model against the alternative model — VI_MODEL$test","text":"list containing test name, test statistic p-value.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test the null model against the alternative model — VI_MODEL$test","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))   dat <- test$gen(100000) test$test(dat) #> $name #> [1] \"F-test\" #>  #> $statistic #> [1] 558.3546 #>  #> $p_value #> [1] 4.178287e-123 #>   test$test(dat, alt_formula = y ~ x + I(x^3)) #> $name #> [1] \"F-test\" #>  #> $statistic #> [1] 539.3164 #>  #> $p_value #> [1] 5.495327e-119 #>"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL.html","id":null,"dir":"Reference","previous_headings":"","what":"VI_MODEL class environment — VI_MODEL","title":"VI_MODEL class environment — VI_MODEL","text":"base class visual inference linear model, inherited bandicoot::BASE.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"VI_MODEL class environment — VI_MODEL","text":"","code":"VI_MODEL"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"VI_MODEL class environment — VI_MODEL","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate p-value for a visual test — calc_p_value","title":"Calculate p-value for a visual test — calc_p_value","text":"function calculate p-value visual test.","code":""},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate p-value for a visual test — calc_p_value","text":"","code":"calc_p_value(   detect,   n_sel,   n_plot = 20,   n_sim = 50000,   dist = \"dirichlet\",   alpha = 1,   cache_env = NULL,   method = \"linear_approx\",   replace_0 = TRUE )"},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate p-value for a visual test — calc_p_value","text":"detect Integer. vector boolean values indicating whether subject detect actual data plot. n_sel Integer. vector number selections. n_plot Integer. Number plots lineup. n_sim Integer. Number simulations draws. dist Character. Name distribution used attractiveness simulation. One \"uniform\" \"dirichlet\". alpha Numeric. single parameter value used Dirichlet distribution. cache_env Environment. provided environment caching. method Character. Method p-value calculation. \"linear_approx\" linear approximation \"simulate\" simulation. replace_0 Boolean. Whether treat evaluations number selections equal 0 selecting plots.","code":""},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate p-value for a visual test — calc_p_value","text":"numeric value representing p-value.","code":""},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate p-value for a visual test — calc_p_value","text":"method == \"simulate\", null distribution simulated using function sim_dist() p-value probability number detections greater equal observed value.  method == \"linear_approx\", null distribution calculated using function exact_dist() p-value probability detections greater equal weighted observed value. weighted observed detections calculated incrementing 1/n_sel detection, 1/n_plot zero selections. Since null distribution discrete, weighted observed detections real value, linear approximation used decimal part. encouraged provide cache environment boost performance function needs reused method == \"simulate\". cache environment remember result corresponding combinations n_eval n_sim. two attractiveness distribution available, one uniform distribution, another Dirichlet distribution. Uniform distribution ensures marginal distribution probability every plot selected uniform. \\(\\alpha = 1\\), Dirichlet distribution ensures probability every plot selected evenly distributed standard \\(M - 1\\) simplex.","code":""},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate p-value for a visual test — calc_p_value","text":"","code":"calc_p_value(c(1, 1, 0), c(1, 1, 2), alpha = 0.5) #> [1] 0.01761364 calc_p_value(1, 1, 1) #> [1] 1"},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value_comb.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate p-value for all combinations of evaluations of a lineup. — calc_p_value_comb","title":"Calculate p-value for all combinations of evaluations of a lineup. — calc_p_value_comb","text":"function calculate p-value combinations evaluations given desired number evaluations. lineup evaluated \\(K\\) subjects, combinations \\(K\\) evaluations, taken \\(X\\) time generated, \\(X\\) desired number evaluations.","code":""},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value_comb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate p-value for all combinations of evaluations of a lineup. — calc_p_value_comb","text":"","code":"calc_p_value_comb(   detected,   n_eval,   n_sel,   n_plot = 20,   n_sim = 50000,   cache_env = NULL,   dist = \"uniform\",   alpha = 1 )"},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value_comb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate p-value for all combinations of evaluations of a lineup. — calc_p_value_comb","text":"detected Boolean. vector Boolean values indicating whether lineup detected subjects. n_eval Integer. Desired number evaluations. n_sel Integer. vector number selections. n_plot Integer. Number plots lineup. n_sim Integer. Number simulation draws. cache_env Environment. provided environment caching. dist Character. Name distribution used attractiveness simulation. One \"uniform\" \"dirichlet\". alpha Numeric. single parameter value used Dirichlet distribution.","code":""},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value_comb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate p-value for all combinations of evaluations of a lineup. — calc_p_value_comb","text":"vector p-value combination matrix attribute.","code":""},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value_comb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate p-value for all combinations of evaluations of a lineup. — calc_p_value_comb","text":"encouraged provide cache environment boost performance function needs reused. cache environment remember result corresponding combinations n_eval n_sim. two attractiveness distribution available, one uniform distribution, another Dirichlet distribution. Uniform distribution ensures marginal distribution probability every plot selected uniform. \\(\\alpha = 1\\), Dirichlet distribution ensures probability every plot selected evenly distributed standard \\(M - 1\\) simplex.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value_comb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate p-value for all combinations of evaluations of a lineup. — calc_p_value_comb","text":"","code":"calc_p_value_comb(c(TRUE, FALSE, TRUE), 2, c(1, 1, 2)) #> [1] 0.09630 0.00698 0.14468 #> attr(,\"combinations\") #>      [,1] [,2] [,3] #> [1,]    1    1    2 #> [2,]    2    3    3 calc_p_value_comb(c(TRUE, FALSE), 1, c(1, 1)) #> [1] 0.0506 1.0000 #> attr(,\"combinations\") #>      [,1] [,2] #> [1,]    1    2"},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate p-value for multiple lineups. — calc_p_value_multi","title":"Calculate p-value for multiple lineups. — calc_p_value_multi","text":"function calculates p-value multiple lineups using function calc_p_value().","code":""},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate p-value for multiple lineups. — calc_p_value_multi","text":"","code":"calc_p_value_multi(   dat,   lineup_id,   detect,   n_sel,   alpha,   n_plot = 20,   n_sim = 50000,   dist = \"dirichlet\",   cache_env = NULL,   method = \"linear_approx\",   replace_0 = TRUE )"},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value_multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate p-value for multiple lineups. — calc_p_value_multi","text":"dat Data.frame/Tibble. data.frame tibble. lineup_id Column ids lineup. detect Column whether lineup detected subject. n_sel Column number selections. alpha Column parameter values used Dirichlet distribution. n_plot Integer. Number plots. n_sim Integer. Number simulation draws. dist Character. Name distribution used attractiveness simulation. One \"uniform\" \"dirichlet\". cache_env Environment. provided environment caching. method Character. Method p-value calculation. \"linear_approx\" linear approximation \"simulate\" simulation. replace_0 Boolean. Whether treat evaluations number selections equal 0 selecting plots.","code":""},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value_multi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate p-value for multiple lineups. — calc_p_value_multi","text":"tibble one column lineup id one column p-value.","code":""},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value_multi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate p-value for multiple lineups. — calc_p_value_multi","text":"encouraged provide cache environment boost performance. cache environment remember result corresponding combinations n_eval n_sim. replace_0 can turned set evaluations 0 selections false detection 20 selections. two attractiveness distribution available, one uniform distribution, another Dirichlet distribution. Uniform distribution ensures marginal distribution probability every plot selected uniform. \\(\\alpha = 1\\), Dirichlet distribution ensures probability every plot selected evenly distributed standard \\(M - 1\\) simplex.","code":""},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value_multi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate p-value for multiple lineups. — calc_p_value_multi","text":"","code":"dat <- data.frame(unique_lineup_id = c(1,1,2),                   detect_or_not = c(TRUE, FALSE, TRUE),                   num_selection = c(1,1,2)) calc_p_value_multi(dat, unique_lineup_id, detect_or_not, num_selection) #> # A tibble: 2 × 2 #>   unique_lineup_id p_value #>              <dbl>   <dbl> #> 1                1  0.0952 #> 2                2  0.525"},{"path":"https://tengmcing.github.io/visage/reference/eval_p_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate test for given p-value and significance level — eval_p_value","title":"Evaluate test for given p-value and significance level — eval_p_value","text":"function reject null hypothesis p-value smaller given significance level plus tolerance.","code":""},{"path":"https://tengmcing.github.io/visage/reference/eval_p_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate test for given p-value and significance level — eval_p_value","text":"","code":"eval_p_value(p_value, significance_level = 0.05, tol = 1e-06)"},{"path":"https://tengmcing.github.io/visage/reference/eval_p_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate test for given p-value and significance level — eval_p_value","text":"p_value Numeric. vector p-values. significance_level Numeric. significance level. tol Numeric. Tolerance.","code":""},{"path":"https://tengmcing.github.io/visage/reference/eval_p_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate test for given p-value and significance level — eval_p_value","text":"vector Boolean values indicating whether null hypotheses rejected.","code":""},{"path":"https://tengmcing.github.io/visage/reference/eval_p_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate test for given p-value and significance level — eval_p_value","text":"","code":"eval_p_value(c(0.05, 0.0501), 0.05, 1e-3) #> [1] TRUE TRUE eval_p_value(c(0.05, 0.0501), 0.05, 1e-5) #> [1]  TRUE FALSE"},{"path":"https://tengmcing.github.io/visage/reference/exact_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the exact distribution of number of detections of a lineup — exact_dist","title":"Calculate the exact distribution of number of detections of a lineup — exact_dist","text":"function calculate exact distribution number detections lineup assuming every subject selects exactly one plot.","code":""},{"path":"https://tengmcing.github.io/visage/reference/exact_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the exact distribution of number of detections of a lineup — exact_dist","text":"","code":"exact_dist(n_eval, n_plot = 20, dist = \"dirichlet\", alpha = 1)"},{"path":"https://tengmcing.github.io/visage/reference/exact_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the exact distribution of number of detections of a lineup — exact_dist","text":"n_eval Integer. Number evaluations. n_plot Integer. Number plots lineup. dist Character. Name distribution used attractiveness model. One \"uniform\" \"dirichlet\". alpha Numeric. single parameter value used Dirichlet distribution.","code":""},{"path":"https://tengmcing.github.io/visage/reference/exact_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the exact distribution of number of detections of a lineup — exact_dist","text":"named vector representing probability mass function distribution.","code":""},{"path":"https://tengmcing.github.io/visage/reference/exact_dist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the exact distribution of number of detections of a lineup — exact_dist","text":"given lineup, plots assumed weights \\(W_i, = 1, ..., M,\\) \\(M\\) number plots, \\(W_i\\) follows attractiveness distribution independently.  two attractiveness distribution available, one uniform distribution, another Dirichlet distribution. Uniform distribution ensures marginal distribution probability every plot selected uniform. \\(\\alpha = 1\\), Dirichlet distribution ensures probability every plot selected evenly distributed standard \\(M - 1\\) simplex.","code":""},{"path":"https://tengmcing.github.io/visage/reference/exact_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the exact distribution of number of detections of a lineup — exact_dist","text":"","code":"sim_dist(c(2,2,3)) #>       0       1       2       3  #> 0.69974 0.25428 0.04292 0.00306  sim_dist(1) #>       0       1  #> 0.94978 0.05022"},{"path":"https://tengmcing.github.io/visage/reference/get_polynomials_lineup.html","id":null,"dir":"Reference","previous_headings":"","what":"Download the detailed information of lineups used in the polynomials study — get_polynomials_lineup","title":"Download the detailed information of lineups used in the polynomials study — get_polynomials_lineup","text":"function downloads returns list containing information 588 lineups including metadata observations. See also polynomials.","code":""},{"path":"https://tengmcing.github.io/visage/reference/get_polynomials_lineup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download the detailed information of lineups used in the polynomials study — get_polynomials_lineup","text":"","code":"get_polynomials_lineup()"},{"path":"https://tengmcing.github.io/visage/reference/get_polynomials_lineup.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Download the detailed information of lineups used in the polynomials study — get_polynomials_lineup","text":"https://raw.githubusercontent.com/TengMCing/visage/master/data-raw/polynomials_lineup.rds","code":""},{"path":"https://tengmcing.github.io/visage/reference/get_polynomials_lineup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download the detailed information of lineups used in the polynomials study — get_polynomials_lineup","text":"list 588 items, item contains named list metadata data.frame data: Metadata contains metadata lineup: type Type model formula main formula model shape Shape Hermite polynomials, please check POLY_MODEL$hermite x_dist Distribution variable x include_z Whether include variable z model e_dist Distribution error term e e_sigma standard deviation error term e name Name model k Number residual plots lineup n Number observations residual plot effect_size Effect size actual residual plot answer answer lineup Data contains data drawing 20 residual plots: y Values y raw_x Values non-scaled x x Values scaled x (-1 1) raw_z Values non-scaled z z Values scaled z (-1 1) e Values error term e .resid Value residuals .fitted Fitted values test_name Name conventional test statistic Test statistics p_value P-value test k Position plot lineup null Whehter null residual plot","code":""},{"path":"https://tengmcing.github.io/visage/reference/polynomials.html","id":null,"dir":"Reference","previous_headings":"","what":"Results of a visual inference study on reading residual plots of misspecified linear regression model caused by missing Hermite polynomial terms — polynomials","title":"Results of a visual inference study on reading residual plots of misspecified linear regression model caused by missing Hermite polynomial terms — polynomials","text":"dataset containing information 160 subject responses 588 linupes. total 588 lineups, lineup 577 - 588 used attention checks. Every subject evaluates 18 different lineups two randomly assigned attention checks. Every lineup except used attention checks evaluated five different subjects. Every lineup consists 20 residual plots one actual residual plot 19 null residual plots drawn rotated residuals.","code":""},{"path":"https://tengmcing.github.io/visage/reference/polynomials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Results of a visual inference study on reading residual plots of misspecified linear regression model caused by missing Hermite polynomial terms — polynomials","text":"","code":"polynomials"},{"path":"https://tengmcing.github.io/visage/reference/polynomials.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Results of a visual inference study on reading residual plots of misspecified linear regression model caused by missing Hermite polynomial terms — polynomials","text":"tibble 3200 rows 30 variables: page page number study website response_time Time spent page, milliseconds (1 second = 1000 milliseconds) set set number subject ID num lineup number set selection Selections made subject. Multiple selections allowed seperated \"_\". \"0\" means subject tell difference plots num_selection Number selections made subject reason reason making selections provided subject confidence Level difference selected plots others provided subject age_group Age group subject educatoin Educational background subject pronoun Preferred pronoun previous_experience Previous experience research requires reading data graphs lineup_id Lineup ID type Type model formula main formula model shape Shape Hermite polynomials, please check POLY_MODEL$hermite x_dist Distribution variable x include_z Whether include variable z model e_dist Distribution error term e e_sigma standard deviation error term e name Name model k Number residual plots lineup n Number observations residual plot effect_size Effect size actual residual plot answer answer lineup detect Whether subject selects actual residual plot conventional_p_value P-value conventional test (F-test) comparing null model (y ~ x) correct model (y ~ x + z) weigthed_detect detect == TRUE, weighted_detect = detect/num_selection. Otherwise, weighted_detect = 0. prop_detect Poportion detection lineup. lineup, prop_detect = mean(weighted_detect).","code":""},{"path":"https://tengmcing.github.io/visage/reference/polynomials.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Results of a visual inference study on reading residual plots of misspecified linear regression model caused by missing Hermite polynomial terms — polynomials","text":"reproduce models, use poly_model(). x_dist = \"uniform\", define x = rand_uniform(-1, 1). x_dist = \"normal\", define x = {stand_dist <- function(x) {(x - min(x))/max(x - min(x)) * 2 - 1}; raw_x <- rand_normal(sigma = 0.3); closed_form(~stand_dist(raw_x))}. x_dist = \"lognormal\", define x = {stand_dist <- function(x) {(x - min(x))/max(x - min(x)) * 2 - 1}; raw_x <- rand_lognormal(sigma = 0.6); closed_form(~stand_dist(raw_x/3 - 1))}. x_dist = \"uniform_discrete\", define x = rand_uniform_d(k = 5, even = TRUE). example, shape = 1, e_sigma = 1, include_z = TRUE x_dist = \"uniform\", model can defined y = poly_model(shape = 1, sigma = 1, include_z = TRUE, x = rand_uniform(-1, 1)). Note models produce exactly lineups shown subjects due randomness. Data stored get_polynomials_lineup() used instead.","code":""},{"path":"https://tengmcing.github.io/visage/reference/portal.html","id":null,"dir":"Reference","previous_headings":"","what":"Portals to class instantiate methods — portal","title":"Portals to class instantiate methods — portal","text":"functions class$instantiate.","code":""},{"path":"https://tengmcing.github.io/visage/reference/portal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Portals to class instantiate methods — portal","text":"","code":"rand_var(..., env = new.env(parent = parent.frame()), init_call = sys.call())  rand_uniform(   ...,   env = new.env(parent = parent.frame()),   init_call = sys.call() )  rand_uniform_d(   ...,   env = new.env(parent = parent.frame()),   init_call = sys.call() )  rand_normal(   ...,   env = new.env(parent = parent.frame()),   init_call = sys.call() )  rand_lognormal(   ...,   env = new.env(parent = parent.frame()),   init_call = sys.call() )  rand_t(..., env = new.env(parent = parent.frame()), init_call = sys.call())  closed_form(   ...,   env = new.env(parent = parent.frame()),   init_call = sys.call() )  vi_model(..., env = new.env(parent = parent.frame()), init_call = sys.call())  cubic_model(   ...,   env = new.env(parent = parent.frame()),   init_call = sys.call() )  simple_cubic_model(   ...,   env = new.env(parent = parent.frame()),   init_call = sys.call() )  quartic_model(   ...,   env = new.env(parent = parent.frame()),   init_call = sys.call() )  poly_model(..., env = new.env(parent = parent.frame()), init_call = sys.call())  heter_model(   ...,   env = new.env(parent = parent.frame()),   init_call = sys.call() )  ar1_model(..., env = new.env(parent = parent.frame()), init_call = sys.call())  non_normal_model(   ...,   env = new.env(parent = parent.frame()),   init_call = sys.call() )"},{"path":"https://tengmcing.github.io/visage/reference/portal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Portals to class instantiate methods — portal","text":"... Arguments passed init method. env Environment. instance environment. init_call Call. Contents ..init_call... recommended leave default. Default init_call = sys.call().","code":""},{"path":"https://tengmcing.github.io/visage/reference/portal.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Portals to class instantiate methods — portal","text":"rand_var(): RAND_VAR rand_uniform(): RAND_UNIFORM rand_uniform_d(): RAND_UNIFORM_D rand_normal(): RAND_NORMAL rand_lognormal(): RAND_LOGNORMAL rand_t(): RAND_T closed_form(): CLOSED_FORM vi_model(): VI_MODEL cubic_model(): CUBIC_MODEL simple_cubic_model(): SIMPLE_CUBIC_MODEL quartic_model(): QUARTIC_MODEL poly_model(): POLY_MODEL heter_model(): HETER_MODEL ar1_model(): AR1_MODEL non_normal_model(): NON_NORMAL_MODEL","code":""},{"path":"https://tengmcing.github.io/visage/reference/sim_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Approximate the distribution of number of detections of a lineup with simulation — sim_dist","title":"Approximate the distribution of number of detections of a lineup with simulation — sim_dist","text":"function approximate distribution number detections lineup given number evaluations, selections evaluation plots lineup.","code":""},{"path":"https://tengmcing.github.io/visage/reference/sim_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Approximate the distribution of number of detections of a lineup with simulation — sim_dist","text":"","code":"sim_dist(n_sel, n_plot = 20, n_sim = 50000, dist = \"uniform\", alpha = 1)"},{"path":"https://tengmcing.github.io/visage/reference/sim_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Approximate the distribution of number of detections of a lineup with simulation — sim_dist","text":"n_sel Integer. vector number selections. n_plot Integer. Number plots lineup. n_sim Integer. Number simulations draws. dist Character. Name distribution used attractiveness simulation. One \"uniform\" \"dirichlet\". alpha Numeric. single parameter value used Dirichlet distribution.","code":""},{"path":"https://tengmcing.github.io/visage/reference/sim_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Approximate the distribution of number of detections of a lineup with simulation — sim_dist","text":"named vector representing probability mass function distribution.","code":""},{"path":"https://tengmcing.github.io/visage/reference/sim_dist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Approximate the distribution of number of detections of a lineup with simulation — sim_dist","text":"given lineup, plots assumed weights \\(W_i, = 1, ..., M,\\) \\(M\\) number plots, \\(W_i\\) follows attractiveness distribution independently. draw, weights lineup simulated. , evaluation draw, function sample number plots number selection evaluation using simulated weights without replacement. Finally, distribution occurrences plot 1 draw approximated distribution number detections lineup. two attractiveness distribution available, one uniform distribution, another Dirichlet distribution. Uniform distribution ensures marginal distribution probability every plot selected uniform. \\(\\alpha = 1\\), Dirichlet distribution ensures probability every plot selected evenly distributed standard \\(M - 1\\) simplex.","code":""},{"path":"https://tengmcing.github.io/visage/reference/sim_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Approximate the distribution of number of detections of a lineup with simulation — sim_dist","text":"","code":"sim_dist(c(2,2,3)) #>       0       1       2       3  #> 0.69744 0.25526 0.04428 0.00302  sim_dist(1) #>       0       1  #> 0.94996 0.05004"}]
