[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 visage authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Weihao Li. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Li W (2022). visage: Visual Inference Linear Regression Diagnostics. https://tengmcing.github.io/visage/, https://github.com/TengMCing/visage/.","code":"@Manual{,   title = {visage: Visual Inference for Linear Regression Diagnostics},   author = {Weihao Li},   year = {2022},   note = {https://tengmcing.github.io/visage/, https://github.com/TengMCing/visage/}, }"},{"path":"/index.html","id":"visage","dir":"","previous_headings":"","what":"Visual Inference for Linear Regression Diagnostics","title":"Visual Inference for Linear Regression Diagnostics","text":"goal visage provide lightweight OOP system set tools running visual inference experiments.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Visual Inference for Linear Regression Diagnostics","text":"development version GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"TengMCing/visage\") library(visage) library(bandicoot)"},{"path":"/index.html","id":"table-of-content","dir":"","previous_headings":"","what":"Table of Content","title":"Visual Inference for Linear Regression Diagnostics","text":"Visual inference cubic linear model class CUBIC_MODEL Visual inference heteroskedasticity linear model class HETER_MODEL","code":""},{"path":"/index.html","id":"1-visual-inference-cubic-linear-model-class-cubic_model","dir":"","previous_headings":"","what":"1. Visual inference cubic linear model class CUBIC_MODEL","title":"Visual Inference for Linear Regression Diagnostics","text":"1.1. Define model visual inference cubic linear model defined : x z random variables, , b c parameters e random error term. cubic_model() cubic model class constructor, takes arguments , b, c, sigma, x z, first four numeric values defined , x z random variable instances created random variable abstract base class constructor rand_var(). like x z uniform random variables ranged −1 1, can achieved using uniform random variable class constructor rand_uniform(). takes two arguments lower bound upper bound support. 1.2. Generate random values model instance cubic model class contains methods simulating data making residual plot. Method gen() returns data frame containing realizations x, z, y e simulated model. number realizations depends integer argument n. addition, null model fitted using simulated data residuals fitted values included returned data frame. null model defined : Generates five realizations model: 1.3. Make residual plot Method plot() produce ggplot object. takes data frame containing columns .resid .fitted input, along character argument type indicating type data plot, aesthetic arguments size alpha control appearance plot.  1.4. Make lineup lineup matrix residual plots can produced using methods gen_lineup() plot_lineup(). Method gen_lineup() takes number realizations n number plots lineup k inputs. , method plot_lineup() user interface plot(). Generate lineup consists 2 plots 8 realizations: Plot lineup consists 20 plots 300 realizations:","code":"CUBIC_MODEL$formula #> y ~ 1 + (2 - c) * x + c * z + a * (((2 - c) * x)^2 + (c * z)^2) +  #>     b * (((2 - c) * x)^3 + (c * z)^3) + e mod <- cubic_model(a = -3, b = -3, c = 1, sigma = 1,                    x = rand_uniform(-1, 1), z = rand_uniform(-1, 1)) mod #>  #> ── <CUBIC_MODEL object> #> y = 1 + (2 - c) * x + c * z + a * (((2 - c) * x)^2 + (c * z)^2) + b * (((2 - c) * x)^3 + (c * z)^3) + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - z: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #>  - a: -3 #>  - b: -3 #>  - c: 1 #>  - sigma: 1 CUBIC_MODEL$null_formula #> y ~ x + z mod$gen(n = 5) #>            y          x           z           e     .resid    .fitted #> 1  0.0998128 -0.9479568 0.130351918  0.11533877  0.2472736 -0.1474608 #> 2 -2.1813283 -0.7262078 0.663138763 -0.49097264 -0.1923048 -1.9890235 #> 3 -2.3693421  0.4971025 0.819353834  0.08827133  0.1100229 -2.4793650 #> 4  0.6705721  0.4449530 0.019039433  0.06591719  0.3716396  0.2989326 #> 5 -0.1931103  0.2335000 0.003598855 -1.22841058 -0.5366312  0.3435209 mod$plot(mod$gen(n = 100), type = \"resid\", size = 1) mod$gen_lineup(n = 8, k = 2) #>              y          x          z           e     .resid      .fitted #> 1  -7.22036473  0.9727343  0.8132524 -0.80873318 -2.0569324 -5.163432287 #> 2   0.56868822 -0.3452510  0.1518039  0.07589807  0.5719140 -0.003225822 #> 3   0.32740792 -0.2190150  0.4849387  0.22148930  1.3715313 -1.044123345 #> 4  -1.71440403  0.7885688  0.1559739 -0.23796457  1.5834243 -3.297828370 #> 5  -3.22895677  0.6628870  0.6743910 -1.08956652  0.7550708 -3.984027527 #> 6  -1.21733564 -0.3820342 -0.5516978 -0.60367731 -2.7462169  1.528881275 #> 7   1.54404598  0.1414332 -0.7150013  1.62320854  1.2014314  0.342614608 #> 8  -4.84085770  0.6902862  0.7223587 -2.14107246 -0.6802224 -4.160635292 #> 9  -2.62552598  0.9727343  0.8132524 -0.80873318  2.5379063 -5.163432287 #> 10  0.58418868 -0.3452510  0.1518039  0.07589807  0.5874145 -0.003225822 #> 11 -1.29286199 -0.2190150  0.4849387  0.22148930 -0.2487386 -1.044123345 #> 12 -3.64570189  0.7885688  0.1559739 -0.23796457 -0.3478735 -3.297828370 #> 13 -3.28404664  0.6628870  0.6743910 -1.08956652  0.6999809 -3.984027527 #> 14  1.93220080 -0.3820342 -0.5516978 -0.60367731  0.4033195  1.528881275 #> 15  0.06723829  0.1414332 -0.7150013  1.62320854 -0.2753763  0.342614608 #> 16 -7.51726803  0.6902862  0.7223587 -2.14107246 -3.3566327 -4.160635292 #>    test_name statistic   p_value k  null #> 1     F-test 13.889523 0.1982790 1 FALSE #> 2     F-test 13.889523 0.1982790 1 FALSE #> 3     F-test 13.889523 0.1982790 1 FALSE #> 4     F-test 13.889523 0.1982790 1 FALSE #> 5     F-test 13.889523 0.1982790 1 FALSE #> 6     F-test 13.889523 0.1982790 1 FALSE #> 7     F-test 13.889523 0.1982790 1 FALSE #> 8     F-test 13.889523 0.1982790 1 FALSE #> 9     F-test  1.064186 0.6127482 2  TRUE #> 10    F-test  1.064186 0.6127482 2  TRUE #> 11    F-test  1.064186 0.6127482 2  TRUE #> 12    F-test  1.064186 0.6127482 2  TRUE #> 13    F-test  1.064186 0.6127482 2  TRUE #> 14    F-test  1.064186 0.6127482 2  TRUE #> 15    F-test  1.064186 0.6127482 2  TRUE #> 16    F-test  1.064186 0.6127482 2  TRUE mod$plot_lineup(mod$gen_lineup(n = 300, k = 20), type = \"resid\", alpha = 0.6)"},{"path":"/index.html","id":"2-visual-inference-heteroskedasticity-linear-model-class-heter_model","dir":"","previous_headings":"","what":"2. Visual inference heteroskedasticity linear model class HETER_MODEL","title":"Visual Inference for Linear Regression Diagnostics","text":"visual inference heteroskedasticity linear model defined : x random variables, , b parameters e random error term. Similar cubic model, heteroskedasticity model built heteroskedasticity model class constructor heter_model(). function takes three arguments inputs, , b x. b numeric parameters defined . x needs random variable object. Since cubic model class CUBIC_MODEL heteroskedasticity model class HETER_MODEL inherited visual inference model class VI_MODEL, heteroskedasticity model object can used similar way cubic model object. following codes give examples use object.","code":"HETER_MODEL$formula #> y ~ 1 + x + sqrt(1 + (2 - abs(a)) * (x - a)^2 * b) * e mod <- heter_model(a = 0, b = 16, x = rand_uniform(-1, 1))  mod #>  #> ── <HETER_MODEL object> #> y = 1 + x + sqrt(1 + (2 - abs(a)) * (x - a)^2 * b) * e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #>  - a: 0 #>  - b: 16 mod$gen(n = 5) #>            y          x           e      .resid     .fitted #> 1 -3.3862752 -0.5277706 -1.22548797 -2.06408798 -1.32218721 #> 2  1.8498922 -0.1482912  0.76474246  1.94090163 -0.09100943 #> 3  1.3707397  0.7666877 -0.08896042 -1.50679574  2.87753541 #> 4 -0.8919075 -0.3836138 -0.63125061 -0.03742046 -0.85448700 #> 5  2.7177862  0.2035144  0.99301758  1.66740254  1.05038368 mod$plot(mod$gen(n = 300), type = \"resid\", size = 1) mod$plot_lineup(mod$gen_lineup(n = 300), alpha = 0.6)"},{"path":"/reference/CUBIC_MODEL-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — CUBIC_MODEL$..init..","title":"Initialization method — CUBIC_MODEL$..init..","text":"function called instance built. User input stored environment. response variable model y. formula y defined CUBIC_MODEL$formula, null formula defined CUBIC_MODEL$null_formula, alternative defined CUBIC_MODEL$alt_formula.","code":""},{"path":"/reference/CUBIC_MODEL-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — CUBIC_MODEL$..init..","text":"Numeric. Default = 1. b Numeric. Default b = 1. c Numeric. Default c = 1. sigma Positive numeric. Default sigma = 1. x Random variable closed form expression. Default x = bandicoot::rand_uniform(-1, 1, env = new.env(parent = parent.env(self))). z Random variable closed form expression. Default z = bandicoot::rand_uniform(-1, 1, env = new.env(parent = parent.env(self))). e Random variable closed form expression. Default e = bandicoot::rand_normal(0, sigma, env = new.env(parent = parent.env(self))).","code":""},{"path":"/reference/CUBIC_MODEL-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — CUBIC_MODEL$..init..","text":"return value, called side effects.","code":""},{"path":"/reference/CUBIC_MODEL-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — CUBIC_MODEL$..init..","text":"","code":"# Instantiate x <- bandicoot::rand_uniform() z <- bandicoot::rand_uniform() e <- bandicoot::rand_normal()  test <- cubic_model(a = 200, b = 200, c = 1, x = x, z = z, e = e)  test #>  #> ── <CUBIC_MODEL object> #> y = 1 + (2 - c) * x + c * z + a * (((2 - c) * x)^2 + (c * z)^2) + b * (((2 - c) * x)^3 + (c * z)^3) + e #>  - x: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - z: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #>  - a: 200 #>  - b: 200 #>  - c: 1 #>  - sigma: 1   # Generate data test$gen(10) #>            y          x          z           e     .resid   .fitted #> 1   19.42655 0.25702129 0.07188038  0.38226472  24.250554  -4.82400 #> 2   10.73792 0.07857543 0.20177532 -1.65992318  26.656171 -15.91825 #> 3  220.72293 0.75533220 0.26638766  0.43523785 -25.839989 246.56291 #> 4  521.67146 0.70923253 0.94573770 -0.99725310  22.542721 499.12874 #> 5  465.04686 0.96871207 0.54734843  0.32759638  32.653043 432.39382 #> 6  308.31787 0.86262022 0.33054834 -0.15125581  -1.182985 309.50085 #> 7   86.01120 0.22038340 0.49286210 -0.08370374 -62.850103 148.86130 #> 8  272.36422 0.02718148 0.85589545 -1.58049624  47.549352 224.81486 #> 9  467.56010 0.78936258 0.81424609  1.40069723  -7.612101 475.17221 #> 10 225.29684 0.29984421 0.75778080 -2.00838826 -56.166662 281.46351  # Generate lineup test$gen_lineup(10, k = 3) #>             y           x         z          e      .resid    .fitted test_name #> 1  117.533797 0.286674417 0.5469364  2.0019149 -33.1526331 150.686430    F-test #> 2   59.046529 0.009487003 0.4456721  0.1442687  50.4235719   8.622957    F-test #> 3  113.629179 0.533327621 0.3097315 -0.5707706   4.3626822 109.266497    F-test #> 4  124.444310 0.096796498 0.6123913 -0.2569651   1.9418535 122.502456    F-test #> 5  446.109097 0.880684707 0.6726122  0.4815689  37.8137043 408.295393    F-test #> 6  374.140955 0.747093583 0.7148646  1.3814346 -12.3771186 386.518073    F-test #> 7  225.156183 0.141948223 0.7852398 -1.5292446  -0.6593337 225.815517    F-test #> 8  213.393730 0.554099760 0.6037624 -1.1177057 -53.3954275 266.789157    F-test #> 9  522.746633 0.648474107 0.9803925  0.7763617  32.1462862 490.600346    F-test #> 10 274.910949 0.321366893 0.8200583  0.6800344 -27.1035852 302.014534    F-test #> 11 172.899260 0.286674417 0.5469364  2.0019149  22.2128291 150.686430    F-test #> 12 -19.263360 0.009487003 0.4456721  0.1442687 -27.8863163   8.622957    F-test #> 13 154.377663 0.533327621 0.3097315 -0.5707706  45.1111667 109.266497    F-test #> 14  97.063576 0.096796498 0.6123913 -0.2569651 -25.4388802 122.502456    F-test #> 15 404.370689 0.880684707 0.6726122  0.4815689  -3.9247037 408.295393    F-test #> 16 385.992805 0.747093583 0.7148646  1.3814346  -0.5252677 386.518073    F-test #> 17 270.496612 0.141948223 0.7852398 -1.5292446  44.6810952 225.815517    F-test #> 18 204.604007 0.554099760 0.6037624 -1.1177057 -62.1851498 266.789157    F-test #> 19 495.818054 0.648474107 0.9803925  0.7763617   5.2177076 490.600346    F-test #> 20 304.752053 0.321366893 0.8200583  0.6800344   2.7375192 302.014534    F-test #> 21 120.271693 0.286674417 0.5469364  2.0019149 -30.4147373 150.686430    F-test #> 22   3.017797 0.009487003 0.4456721  0.1442687  -5.6051597   8.622957    F-test #> 23  89.948988 0.533327621 0.3097315 -0.5707706 -19.3175088 109.266497    F-test #> 24 164.437055 0.096796498 0.6123913 -0.2569651  41.9345987 122.502456    F-test #> 25 391.724828 0.880684707 0.6726122  0.4815689 -16.5705647 408.295393    F-test #> 26 448.721642 0.747093583 0.7148646  1.3814346  62.2035693 386.518073    F-test #> 27 202.327380 0.141948223 0.7852398 -1.5292446 -23.4881373 225.815517    F-test #> 28 275.926731 0.554099760 0.6037624 -1.1177057   9.1375743 266.789157    F-test #> 29 451.329404 0.648474107 0.9803925  0.7763617 -39.2709420 490.600346    F-test #> 30 323.405841 0.321366893 0.8200583  0.6800344  21.3913076 302.014534    F-test #>     statistic      p_value k  null #> 1  948.443836 5.550008e-05 2 FALSE #> 2  948.443836 5.550008e-05 2 FALSE #> 3  948.443836 5.550008e-05 2 FALSE #> 4  948.443836 5.550008e-05 2 FALSE #> 5  948.443836 5.550008e-05 2 FALSE #> 6  948.443836 5.550008e-05 2 FALSE #> 7  948.443836 5.550008e-05 2 FALSE #> 8  948.443836 5.550008e-05 2 FALSE #> 9  948.443836 5.550008e-05 2 FALSE #> 10 948.443836 5.550008e-05 2 FALSE #> 11   1.536597 3.772000e-01 1  TRUE #> 12   1.536597 3.772000e-01 1  TRUE #> 13   1.536597 3.772000e-01 1  TRUE #> 14   1.536597 3.772000e-01 1  TRUE #> 15   1.536597 3.772000e-01 1  TRUE #> 16   1.536597 3.772000e-01 1  TRUE #> 17   1.536597 3.772000e-01 1  TRUE #> 18   1.536597 3.772000e-01 1  TRUE #> 19   1.536597 3.772000e-01 1  TRUE #> 20   1.536597 3.772000e-01 1  TRUE #> 21   1.307971 4.297461e-01 3  TRUE #> 22   1.307971 4.297461e-01 3  TRUE #> 23   1.307971 4.297461e-01 3  TRUE #> 24   1.307971 4.297461e-01 3  TRUE #> 25   1.307971 4.297461e-01 3  TRUE #> 26   1.307971 4.297461e-01 3  TRUE #> 27   1.307971 4.297461e-01 3  TRUE #> 28   1.307971 4.297461e-01 3  TRUE #> 29   1.307971 4.297461e-01 3  TRUE #> 30   1.307971 4.297461e-01 3  TRUE  # Plot the lineup test$plot_lineup(test$gen_lineup(100))"},{"path":"/reference/CUBIC_MODEL-cash-E.html","id":null,"dir":"Reference","previous_headings":"","what":"Expectation of the residuals — CUBIC_MODEL$E","title":"Expectation of the residuals — CUBIC_MODEL$E","text":"function calculate expectation residuals use Frisch–Waugh–Lovell theorem.","code":""},{"path":"/reference/CUBIC_MODEL-cash-E.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expectation of the residuals — CUBIC_MODEL$E","text":"dat Dataframe/List. List contains variable x z. Numeric. Default = self$prm$. b Numeric. Default b = self$prm$b. c Numeric. Default c = self$prm$c.","code":""},{"path":"/reference/CUBIC_MODEL-cash-E.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expectation of the residuals — CUBIC_MODEL$E","text":"vector numeric expectations.","code":""},{"path":"/reference/CUBIC_MODEL-cash-E.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expectation of the residuals — CUBIC_MODEL$E","text":"","code":"mod <- cubic_model(-1, 1, 1, 0.5) dat <- mod$gen(1000, fit_model = TRUE) dat$exp <- mod$E(dat) mod$plot(dat) + ggplot2::geom_point(ggplot2::aes(.fitted, exp),                                     col = \"red\",                                     alpha = 0.6)"},{"path":"/reference/CUBIC_MODEL-cash-alt_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the alternative model — CUBIC_MODEL$alt_formula","title":"Formula for fitting the alternative model — CUBIC_MODEL$alt_formula","text":"Quoted formula fitting alternative model.","code":""},{"path":"/reference/CUBIC_MODEL-cash-alt_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the alternative model — CUBIC_MODEL$alt_formula","text":"","code":"CUBIC_MODEL$alt_formula #> y ~ x + I(x^2) + I(x^3) + z + I(z^2) + I(z^3)"},{"path":"/reference/CUBIC_MODEL-cash-effect_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the effect size of the simulated data — CUBIC_MODEL$effect_size","title":"Compute the effect size of the simulated data — CUBIC_MODEL$effect_size","text":"function computes effect size simulated data.","code":""},{"path":"/reference/CUBIC_MODEL-cash-effect_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the effect size of the simulated data — CUBIC_MODEL$effect_size","text":"dat Dataframe/List. List contains variable x z. Numeric. Default = self$prm$. b Numeric. Default b = self$prm$b. c Numeric. Default c = self$prm$c. sigma Positive numeric. Default sigma = self$prm$sigma.","code":""},{"path":"/reference/CUBIC_MODEL-cash-effect_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the effect size of the simulated data — CUBIC_MODEL$effect_size","text":"numeric value.","code":""},{"path":"/reference/CUBIC_MODEL-cash-effect_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the effect size of the simulated data — CUBIC_MODEL$effect_size","text":"","code":"mod <- cubic_model(-1, 1, 1, 0.5) dat <- mod$gen(1000, fit_model = TRUE) mod$effect_size(dat) #> [1] 3.416446"},{"path":"/reference/CUBIC_MODEL-cash-formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Closed form expression of y — CUBIC_MODEL$formula","title":"Closed form expression of y — CUBIC_MODEL$formula","text":"quoted formula, passed CLOSED_FORM$instantiate define closed form expression y.","code":""},{"path":"/reference/CUBIC_MODEL-cash-formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Closed form expression of y — CUBIC_MODEL$formula","text":"","code":"CUBIC_MODEL$formula #> y ~ 1 + (2 - c) * x + c * z + a * (((2 - c) * x)^2 + (c * z)^2) +  #>     b * (((2 - c) * x)^3 + (c * z)^3) + e"},{"path":"/reference/CUBIC_MODEL-cash-null_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the null model — CUBIC_MODEL$null_formula","title":"Formula for fitting the null model — CUBIC_MODEL$null_formula","text":"Quoted formula fitting null model.","code":""},{"path":"/reference/CUBIC_MODEL-cash-null_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the null model — CUBIC_MODEL$null_formula","text":"","code":"CUBIC_MODEL$null_formula #> y ~ x + z"},{"path":"/reference/CUBIC_MODEL-cash-set_prm.html","id":null,"dir":"Reference","previous_headings":"","what":"Set parameter for the model — CUBIC_MODEL$set_prm","title":"Set parameter for the model — CUBIC_MODEL$set_prm","text":"function store values environment update values closed form expression y, except parameter sigma. parameter sigma, value updated, corresponding value e updated.","code":""},{"path":"/reference/CUBIC_MODEL-cash-set_prm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set parameter for the model — CUBIC_MODEL$set_prm","text":"prm_name List Vector. Parameter character names. prm_val List Vector. Parameter values.","code":""},{"path":"/reference/CUBIC_MODEL-cash-set_prm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set parameter for the model — CUBIC_MODEL$set_prm","text":"Return object .","code":""},{"path":"/reference/CUBIC_MODEL-cash-set_prm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set parameter for the model — CUBIC_MODEL$set_prm","text":"","code":"# Instantiate mod <- cubic_model(a = -1, b = 1, c = 1, sigma = 0.5)  mod #>  #> ── <CUBIC_MODEL object> #> y = 1 + (2 - c) * x + c * z + a * (((2 - c) * x)^2 + (c * z)^2) + b * (((2 - c) * x)^3 + (c * z)^3) + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - z: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #>  - a: -1 #>  - b: 1 #>  - c: 1 #>  - sigma: 0.5   mod$set_prm(\"a\", 2) #>  #> ── <CUBIC_MODEL object> #> y = 1 + (2 - c) * x + c * z + a * (((2 - c) * x)^2 + (c * z)^2) + b * (((2 - c) * x)^3 + (c * z)^3) + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - z: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #>  - a: 2 #>  - b: 1 #>  - c: 1 #>  - sigma: 0.5   mod #>  #> ── <CUBIC_MODEL object> #> y = 1 + (2 - c) * x + c * z + a * (((2 - c) * x)^2 + (c * z)^2) + b * (((2 - c) * x)^3 + (c * z)^3) + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - z: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #>  - a: 2 #>  - b: 1 #>  - c: 1 #>  - sigma: 0.5   mod$set_prm(\"sigma\", 1) #>  #> ── <CUBIC_MODEL object> #> y = 1 + (2 - c) * x + c * z + a * (((2 - c) * x)^2 + (c * z)^2) + b * (((2 - c) * x)^3 + (c * z)^3) + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - z: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #>  - a: 2 #>  - b: 1 #>  - c: 1 #>  - sigma: 1   mod #>  #> ── <CUBIC_MODEL object> #> y = 1 + (2 - c) * x + c * z + a * (((2 - c) * x)^2 + (c * z)^2) + b * (((2 - c) * x)^3 + (c * z)^3) + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - z: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #>  - a: 2 #>  - b: 1 #>  - c: 1 #>  - sigma: 1"},{"path":"/reference/CUBIC_MODEL.html","id":null,"dir":"Reference","previous_headings":"","what":"CUBIC_MODEL class environment — CUBIC_MODEL","title":"CUBIC_MODEL class environment — CUBIC_MODEL","text":"class visual inference cubic linear model, inherited VI_MODEL.","code":""},{"path":"/reference/CUBIC_MODEL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CUBIC_MODEL class environment — CUBIC_MODEL","text":"","code":"CUBIC_MODEL"},{"path":"/reference/CUBIC_MODEL.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CUBIC_MODEL class environment — CUBIC_MODEL","text":"environment S3 class visage_oop.","code":""},{"path":[]},{"path":"/reference/HETER_MODEL-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — HETER_MODEL$..init..","title":"Initialization method — HETER_MODEL$..init..","text":"function called instance built. User input stored environment. response variable model y. formula y defined HETER_MODEL$formula, null formula defined HETER_MODEL$null_formula.","code":""},{"path":"/reference/HETER_MODEL-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — HETER_MODEL$..init..","text":"Numeric. Default = 0. b Numeric. Default b = 1. x Random variable closed form expression. Default x = bandicoot::rand_uniform(-1, 1, env = new.env(parent = parent.env(self))). e Random variable closed form expression. Default e = bandicoot::rand_normal(0, 1, env = new.env(parent = parent.env(self))).","code":""},{"path":"/reference/HETER_MODEL-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — HETER_MODEL$..init..","text":"return value, called side effects.","code":""},{"path":"/reference/HETER_MODEL-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — HETER_MODEL$..init..","text":"","code":"# Instantiate test <- heter_model(a = 0, b = 20)  test #>  #> ── <HETER_MODEL object> #> y = 1 + x + sqrt(1 + (2 - abs(a)) * (x - a)^2 * b) * e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #>  - a: 0 #>  - b: 20   # Generate data test$gen(10) #>             y           x          e     .resid    .fitted #> 1   3.4179530  0.42267685  0.6990765  0.5343141  2.8836389 #> 2   1.3649676  0.06430849  0.2785047 -0.1248169  1.4897845 #> 3   9.2496561  0.90675293  1.2613761  4.4832293  4.7664268 #> 4   2.5434619 -0.59803552  0.5473797  3.6298287 -1.0863669 #> 5  -2.3931079 -0.55734899 -0.7739338 -1.4649890 -0.9281188 #> 6  -0.9465176 -0.48620880 -0.4516092 -0.2950948 -0.6514229 #> 7   0.8490054  0.30217269 -0.2100986 -1.5659391  2.4149445 #> 8   0.2656422  0.28658724 -0.4931877 -2.0886835  2.3543257 #> 9  -1.9472550 -0.99727336 -0.3053482  0.6919260 -2.6391810 #> 10 -1.2187858  0.34486376 -1.0684433 -3.7997749  2.5809891  # Generate lineup test$gen_lineup(10, k = 3) #>             y           x          e     .resid    .fitted test_name statistic #> 1  -2.3315672 -0.14531949 -2.3459322 -1.9714084 -0.3601588   BP-test  5.413844 #> 2   0.8687400  0.13125038 -0.2019869  1.1757314 -0.3069914   BP-test  5.413844 #> 3  -4.9827702  0.83266279 -1.2714587 -4.8106171 -0.1721530   BP-test  5.413844 #> 4   1.0281752  0.67494105 -0.1475196  1.2306484 -0.2024732   BP-test  5.413844 #> 5  -2.4763784 -0.42198566 -1.0716920 -2.0630337 -0.4133447   BP-test  5.413844 #> 6   1.8071815 -0.71390520  0.3289159  2.2766443 -0.4694628   BP-test  5.413844 #> 7  -7.1682994 -0.85942897 -1.3224588 -6.6708613 -0.4974381   BP-test  5.413844 #> 8   1.7024296 -0.09954124  0.6786772  2.0537881 -0.3513585   BP-test  5.413844 #> 9   3.4274912  0.29767329  0.9990917  3.7024897 -0.2749986   BP-test  5.413844 #> 10  4.6254208 -0.61889266  1.0505879  5.0766186 -0.4511978   BP-test  5.413844 #> 11 -7.4608205 -0.14531949 -2.3459322 -7.1006617 -0.3601588   BP-test  1.349708 #> 12 -2.8783252  0.13125038 -0.2019869 -2.5713338 -0.3069914   BP-test  1.349708 #> 13  1.6971733  0.83266279 -1.2714587  1.8693263 -0.1721530   BP-test  1.349708 #> 14  0.5524410  0.67494105 -0.1475196  0.7549142 -0.2024732   BP-test  1.349708 #> 15 -1.3567596 -0.42198566 -1.0716920 -0.9434149 -0.4133447   BP-test  1.349708 #> 16  1.0789570 -0.71390520  0.3289159  1.5484199 -0.4694628   BP-test  1.349708 #> 17 -3.4069761 -0.85942897 -1.3224588 -2.9095380 -0.4974381   BP-test  1.349708 #> 18  1.7796599 -0.09954124  0.6786772  2.1310183 -0.3513585   BP-test  1.349708 #> 19 -0.1357024  0.29767329  0.9990917  0.1392962 -0.2749986   BP-test  1.349708 #> 20  6.6307757 -0.61889266  1.0505879  7.0819735 -0.4511978   BP-test  1.349708 #> 21  4.8292603 -0.14531949 -2.3459322  5.1894192 -0.3601588   BP-test  2.240486 #> 22 -8.1894567  0.13125038 -0.2019869 -7.8824653 -0.3069914   BP-test  2.240486 #> 23 -0.3327116  0.83266279 -1.2714587 -0.1605586 -0.1721530   BP-test  2.240486 #> 24 -0.3789320  0.67494105 -0.1475196 -0.1764588 -0.2024732   BP-test  2.240486 #> 25  0.2112108 -0.42198566 -1.0716920  0.6245555 -0.4133447   BP-test  2.240486 #> 26  2.8098355 -0.71390520  0.3289159  3.2792983 -0.4694628   BP-test  2.240486 #> 27 -3.4905017 -0.85942897 -1.3224588 -2.9930636 -0.4974381   BP-test  2.240486 #> 28 -0.9478515 -0.09954124  0.6786772 -0.5964931 -0.3513585   BP-test  2.240486 #> 29  3.7565924  0.29767329  0.9990917  4.0315909 -0.2749986   BP-test  2.240486 #> 30 -1.7670223 -0.61889266  1.0505879 -1.3158246 -0.4511978   BP-test  2.240486 #>       p_value k  null #> 1  0.06674191 1 FALSE #> 2  0.06674191 1 FALSE #> 3  0.06674191 1 FALSE #> 4  0.06674191 1 FALSE #> 5  0.06674191 1 FALSE #> 6  0.06674191 1 FALSE #> 7  0.06674191 1 FALSE #> 8  0.06674191 1 FALSE #> 9  0.06674191 1 FALSE #> 10 0.06674191 1 FALSE #> 11 0.50923084 2  TRUE #> 12 0.50923084 2  TRUE #> 13 0.50923084 2  TRUE #> 14 0.50923084 2  TRUE #> 15 0.50923084 2  TRUE #> 16 0.50923084 2  TRUE #> 17 0.50923084 2  TRUE #> 18 0.50923084 2  TRUE #> 19 0.50923084 2  TRUE #> 20 0.50923084 2  TRUE #> 21 0.32620049 3  TRUE #> 22 0.32620049 3  TRUE #> 23 0.32620049 3  TRUE #> 24 0.32620049 3  TRUE #> 25 0.32620049 3  TRUE #> 26 0.32620049 3  TRUE #> 27 0.32620049 3  TRUE #> 28 0.32620049 3  TRUE #> 29 0.32620049 3  TRUE #> 30 0.32620049 3  TRUE  # Plot the lineup test$plot_lineup(test$gen_lineup(100))"},{"path":"/reference/HETER_MODEL-cash-alt_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the alternative model — HETER_MODEL$alt_formula","title":"Formula for fitting the alternative model — HETER_MODEL$alt_formula","text":"Quoted formula fitting alternative model.","code":""},{"path":"/reference/HETER_MODEL-cash-alt_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the alternative model — HETER_MODEL$alt_formula","text":"","code":"HETER_MODEL$alt_formula #> NULL"},{"path":"/reference/HETER_MODEL-cash-effect_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the effect size of the simulated data — HETER_MODEL$effect_size","title":"Compute the effect size of the simulated data — HETER_MODEL$effect_size","text":"function computes effect size simulated data.","code":""},{"path":"/reference/HETER_MODEL-cash-effect_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the effect size of the simulated data — HETER_MODEL$effect_size","text":"dat Dataframe. number rows data frame used. b Numeric. Default b = self$prm$b.","code":""},{"path":"/reference/HETER_MODEL-cash-effect_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the effect size of the simulated data — HETER_MODEL$effect_size","text":"single numeric value.","code":""},{"path":"/reference/HETER_MODEL-cash-effect_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the effect size of the simulated data — HETER_MODEL$effect_size","text":"","code":"mod <- heter_model(a = 0, b = 16) mod$effect_size(mod$gen(100)) #> [1] 160"},{"path":"/reference/HETER_MODEL-cash-formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Closed form expression of y — HETER_MODEL$formula","title":"Closed form expression of y — HETER_MODEL$formula","text":"quoted formula, passed CLOSED_FORM$instantiate define closed form expression y.","code":""},{"path":"/reference/HETER_MODEL-cash-formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Closed form expression of y — HETER_MODEL$formula","text":"","code":"HETER_MODEL$formula #> y ~ 1 + x + sqrt(1 + (2 - abs(a)) * (x - a)^2 * b) * e"},{"path":"/reference/HETER_MODEL-cash-null_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the null model — HETER_MODEL$null_formula","title":"Formula for fitting the null model — HETER_MODEL$null_formula","text":"Quoted formula fitting null model.","code":""},{"path":"/reference/HETER_MODEL-cash-null_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the null model — HETER_MODEL$null_formula","text":"","code":"HETER_MODEL$null_formula #> y ~ x"},{"path":"/reference/HETER_MODEL-cash-test.html","id":null,"dir":"Reference","previous_headings":"","what":"Test the null model — HETER_MODEL$test","title":"Test the null model — HETER_MODEL$test","text":"function test null model. class, test BP-test computed using lmtest::bptest. variance formula ~ x + (x^2).","code":""},{"path":"/reference/HETER_MODEL-cash-test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test the null model — HETER_MODEL$test","text":"dat Data frame. data frame containing variables needed null_formula. null_formula Formula. Formula fitting null model. Default null_formula = self$null_formula.","code":""},{"path":"/reference/HETER_MODEL-cash-test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test the null model — HETER_MODEL$test","text":"list containing test name, test statistic p-value.","code":""},{"path":"/reference/HETER_MODEL-cash-test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test the null model — HETER_MODEL$test","text":"","code":"# Instantiate x <- bandicoot::rand_uniform() e <- bandicoot::rand_normal() test <- heter_model(a = 0, b = 100)   dat <- test$gen(100000) test$test(dat) #> $name #> [1] \"BP-test\" #>  #> $statistic #> [1] 17825.64 #>  #> $p_value #> [1] 0 #>"},{"path":"/reference/HETER_MODEL.html","id":null,"dir":"Reference","previous_headings":"","what":"HETER_MODEL class environment — HETER_MODEL","title":"HETER_MODEL class environment — HETER_MODEL","text":"class visual inference heteroskedasticity linear model, inherited VI_MODEL.","code":""},{"path":"/reference/HETER_MODEL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HETER_MODEL class environment — HETER_MODEL","text":"","code":"HETER_MODEL"},{"path":"/reference/HETER_MODEL.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"HETER_MODEL class environment — HETER_MODEL","text":"environment S3 class visage_oop.","code":""},{"path":[]},{"path":"/reference/POLY_MODEL-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — POLY_MODEL$..init..","title":"Initialization method — POLY_MODEL$..init..","text":"function called instance built. User input stored environment. response variable model y. formula y defined POLY_MODEL$formula, null formula defined POLY_MODEL$null_formula, alternative defined POLY_MODEL$alt_formula. formula raw orthogonal polynomial term defined POLY_MODEL$raw_z_formula, scaled orthogonal polynomial term defined POLY_MODEL$z_formula.","code":""},{"path":"/reference/POLY_MODEL-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — POLY_MODEL$..init..","text":"shape Integer. shape orthogonal polynomial used model. Note value 1 4. Default shape = 1. sigma Positive numeric. Default sigma = 1. include_z Boolean. Whether include z formula y. Default include_z = TRUE. x Random variable closed form expression. Default x = bandicoot::rand_uniform(-1, 1, env = new.env(parent = parent.env(self))). e Random variable closed form expression. Default e = bandicoot::rand_normal(0, sigma, env = new.env(parent = parent.env(self))).","code":""},{"path":"/reference/POLY_MODEL-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — POLY_MODEL$..init..","text":"return value, called side effects.","code":""},{"path":"/reference/POLY_MODEL-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — POLY_MODEL$..init..","text":"","code":"# Instantiate x <- bandicoot::rand_uniform() e <- bandicoot::rand_normal(sigma = 0.5)  test <- poly_model(shape = 1, x = x, e = e)  test #>  #> ── <POLY_MODEL object> #> y = 1 + x + include_z * z + e #>  - x: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - z: <CLOSED_FORM object> #>    EXPR = (raw_z - min(raw_z))/max(raw_z - min(raw_z)) * 2 - 1 #>     - raw_z: <CLOSED_FORM object> #>       EXPR = hermite(shape)((x - min(x))/max(x - min(x)) * 4 - 2) #>        - x: <RAND_UNIFORM object> #>          [a: 0, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #>  - shape: 1 #>  - include_z: TRUE #>  - sigma: 1   # Generate data test$gen(10) #>            y          x      raw_z          z           e     .resid  .fitted #> 1  1.9221436 0.06132422  2.9949308  0.9974573 -0.13663794  0.8299763 1.092167 #> 2  0.7482892 0.60473605 -0.8202524 -0.9162360  0.05978922 -0.7309741 1.479263 #> 3  0.6082692 0.58335200 -0.8920025 -0.9522258 -0.02285695 -0.8557613 1.464031 #> 4  0.3365919 0.32517607 -0.3236603 -0.6671458 -0.32143845 -0.9435287 1.280121 #> 5  0.4289153 0.53497113 -0.9872462 -1.0000000 -0.10605584 -1.0006514 1.429567 #> 6  1.7095373 0.06103988  3.0000000  1.0000000 -0.35150259  0.6175725 1.091965 #> 7  0.2574076 0.46866110 -0.9666215 -0.9896547 -0.22159884 -1.1249236 1.382331 #> 8  2.0184238 0.11687897  2.0661830  0.5315980  0.36994681  0.8866824 1.131741 #> 9  2.1634469 0.77048514  0.3524003 -0.3280342  0.72099600  0.5661133 1.597334 #> 10 3.4865748 0.95824068  3.0000000  1.0000000  0.52833413  1.7554947 1.731080  # Generate lineup test$gen_lineup(10, k = 3) #>               y          x      raw_z           z           e       .resid #> 1   1.831895046 0.13949216  1.5839405  0.29065779  0.40174510  0.788441817 #> 2   2.008412743 0.85573150  1.1145054  0.05550514  0.09717609  0.198557704 #> 3  -0.268803764 0.32658914 -0.3476056 -0.67690551 -0.91848740 -1.512457480 #> 4  -0.350217937 0.53567308 -0.9925989 -1.00000000 -0.88589102 -1.817598972 #> 5   1.700953959 0.87286889  1.3329155  0.16491263 -0.33682756 -0.127238702 #> 6   1.682103570 0.04766112  3.0000000  1.00000000 -0.36555755  0.736912851 #> 7   1.603475805 0.13731239  1.6139825  0.30570661  0.16045680  0.562355004 #> 8   1.750414478 0.76281278  0.1171402 -0.44410187  0.43170357  0.039985814 #> 9   3.341728730 0.98343305  3.0000000  1.00000000  0.35829568  1.395228458 #> 10  1.505663508 0.81834487  0.6752721 -0.16451860 -0.14816277 -0.264186495 #> 11  0.049773966 0.13949216  1.5839405  0.29065779  0.40174510 -0.993679264 #> 12  0.686904326 0.85573150  1.1145054  0.05550514  0.09717609 -1.122950713 #> 13  1.642030840 0.32658914 -0.3476056 -0.67690551 -0.91848740  0.398377123 #> 14  0.831235243 0.53567308 -0.9925989 -1.00000000 -0.88589102 -0.636145792 #> 15  2.940954342 0.87286889  1.3329155  0.16491263 -0.33682756  1.112761681 #> 16  1.756245477 0.04766112  3.0000000  1.00000000 -0.36555755  0.811054758 #> 17  1.049888155 0.13731239  1.6139825  0.30570661  0.16045680  0.008767355 #> 18  0.857486684 0.76281278  0.1171402 -0.44410187  0.43170357 -0.852941979 #> 19  1.380166059 0.98343305  3.0000000  1.00000000  0.35829568 -0.566334213 #> 20  3.610941046 0.81834487  0.6752721 -0.16451860 -0.14816277  1.841091043 #> 21  2.935755663 0.13949216  1.5839405  0.29065779  0.40174510  1.892302434 #> 22  1.186289989 0.85573150  1.1145054  0.05550514  0.09717609 -0.623565050 #> 23  1.477226700 0.32658914 -0.3476056 -0.67690551 -0.91848740  0.233572983 #> 24  2.053249005 0.53567308 -0.9925989 -1.00000000 -0.88589102  0.585867970 #> 25  1.143200694 0.87286889  1.3329155  0.16491263 -0.33682756 -0.684991967 #> 26 -0.327014211 0.04766112  3.0000000  1.00000000 -0.36555755 -1.272204930 #> 27  0.008119114 0.13731239  1.6139825  0.30570661  0.16045680 -1.033001686 #> 28  2.927784241 0.76281278  0.1171402 -0.44410187  0.43170357  1.217355577 #> 29  2.003150573 0.98343305  3.0000000  1.00000000  0.35829568  0.056650302 #> 30  1.397864369 0.81834487  0.6752721 -0.16451860 -0.14816277 -0.371985633 #>      .fitted test_name   statistic      p_value k  null #> 1  1.0434532    F-test 34.49732497 0.0006157905 3 FALSE #> 2  1.8098550    F-test 34.49732497 0.0006157905 3 FALSE #> 3  1.2436537    F-test 34.49732497 0.0006157905 3 FALSE #> 4  1.4673810    F-test 34.49732497 0.0006157905 3 FALSE #> 5  1.8281927    F-test 34.49732497 0.0006157905 3 FALSE #> 6  0.9451907    F-test 34.49732497 0.0006157905 3 FALSE #> 7  1.0411208    F-test 34.49732497 0.0006157905 3 FALSE #> 8  1.7104287    F-test 34.49732497 0.0006157905 3 FALSE #> 9  1.9465003    F-test 34.49732497 0.0006157905 3 FALSE #> 10 1.7698500    F-test 34.49732497 0.0006157905 3 FALSE #> 11 1.0434532    F-test  0.05503058 0.8212440670 1  TRUE #> 12 1.8098550    F-test  0.05503058 0.8212440670 1  TRUE #> 13 1.2436537    F-test  0.05503058 0.8212440670 1  TRUE #> 14 1.4673810    F-test  0.05503058 0.8212440670 1  TRUE #> 15 1.8281927    F-test  0.05503058 0.8212440670 1  TRUE #> 16 0.9451907    F-test  0.05503058 0.8212440670 1  TRUE #> 17 1.0411208    F-test  0.05503058 0.8212440670 1  TRUE #> 18 1.7104287    F-test  0.05503058 0.8212440670 1  TRUE #> 19 1.9465003    F-test  0.05503058 0.8212440670 1  TRUE #> 20 1.7698500    F-test  0.05503058 0.8212440670 1  TRUE #> 21 1.0434532    F-test  1.31665234 0.2888939729 2  TRUE #> 22 1.8098550    F-test  1.31665234 0.2888939729 2  TRUE #> 23 1.2436537    F-test  1.31665234 0.2888939729 2  TRUE #> 24 1.4673810    F-test  1.31665234 0.2888939729 2  TRUE #> 25 1.8281927    F-test  1.31665234 0.2888939729 2  TRUE #> 26 0.9451907    F-test  1.31665234 0.2888939729 2  TRUE #> 27 1.0411208    F-test  1.31665234 0.2888939729 2  TRUE #> 28 1.7104287    F-test  1.31665234 0.2888939729 2  TRUE #> 29 1.9465003    F-test  1.31665234 0.2888939729 2  TRUE #> 30 1.7698500    F-test  1.31665234 0.2888939729 2  TRUE  # Plot the lineup test$plot_lineup(test$gen_lineup(100))   test <- poly_model(shape = 1, include_z = FALSE, x = x, e = e) test$plot_lineup(test$gen_lineup(100))   test <- poly_model(shape = 2, x = x, e = e) test$plot_lineup(test$gen_lineup(100))   test <- poly_model(shape = 3, x = x, e = e) test$plot_lineup(test$gen_lineup(100))   test <- poly_model(shape = 4, x = x, e = e) test$plot_lineup(test$gen_lineup(100))"},{"path":"/reference/POLY_MODEL-cash-E.html","id":null,"dir":"Reference","previous_headings":"","what":"Expectation of the residuals — POLY_MODEL$E","title":"Expectation of the residuals — POLY_MODEL$E","text":"function calculate expectation residuals use Frisch–Waugh–Lovell theorem.","code":""},{"path":"/reference/POLY_MODEL-cash-E.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expectation of the residuals — POLY_MODEL$E","text":"dat Dataframe/List. List contains variable x z.","code":""},{"path":"/reference/POLY_MODEL-cash-E.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expectation of the residuals — POLY_MODEL$E","text":"vector numeric expectations.","code":""},{"path":"/reference/POLY_MODEL-cash-E.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expectation of the residuals — POLY_MODEL$E","text":"","code":"mod <- poly_model(4, 0.5) dat <- mod$gen(1000, fit_model = TRUE) dat$exp <- mod$E(dat) mod$plot(dat) + ggplot2::geom_point(ggplot2::aes(.fitted, exp),                                     col = \"red\",                                     alpha = 0.6)"},{"path":"/reference/POLY_MODEL-cash-alt_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the alternative model — POLY_MODEL$alt_formula","title":"Formula for fitting the alternative model — POLY_MODEL$alt_formula","text":"Quoted formula fitting alternative model.","code":""},{"path":"/reference/POLY_MODEL-cash-alt_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the alternative model — POLY_MODEL$alt_formula","text":"","code":"POLY_MODEL$alt_formula #> y ~ x + z"},{"path":"/reference/POLY_MODEL-cash-effect_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the effect size of the simulated data — POLY_MODEL$effect_size","title":"Compute the effect size of the simulated data — POLY_MODEL$effect_size","text":"function computes effect size simulated data.","code":""},{"path":"/reference/POLY_MODEL-cash-effect_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the effect size of the simulated data — POLY_MODEL$effect_size","text":"dat Dataframe/List. List contains variable x z. sigma Positive numeric. Default sigma = self$prm$sigma. type Character. Type effect size measure. Default type = kl.","code":""},{"path":"/reference/POLY_MODEL-cash-effect_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the effect size of the simulated data — POLY_MODEL$effect_size","text":"numeric value.","code":""},{"path":"/reference/POLY_MODEL-cash-effect_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the effect size of the simulated data — POLY_MODEL$effect_size","text":"","code":"mod <- poly_model(4, 0.5) dat <- mod$gen(1000, fit_model = TRUE) mod$effect_size(dat) #> [1] 643.8231"},{"path":"/reference/POLY_MODEL-cash-formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Closed form expression of y — POLY_MODEL$formula","title":"Closed form expression of y — POLY_MODEL$formula","text":"quoted formula, passed CLOSED_FORM$instantiate define closed form expression y.","code":""},{"path":"/reference/POLY_MODEL-cash-formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Closed form expression of y — POLY_MODEL$formula","text":"","code":"POLY_MODEL$formula #> y ~ 1 + x + include_z * z + e"},{"path":"/reference/POLY_MODEL-cash-hermite.html","id":null,"dir":"Reference","previous_headings":"","what":"Hermite polynomial functions — POLY_MODEL$hermite","title":"Hermite polynomial functions — POLY_MODEL$hermite","text":"function returns Hermite polynomial function.","code":""},{"path":"/reference/POLY_MODEL-cash-hermite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hermite polynomial functions — POLY_MODEL$hermite","text":"shape Integer. value 1 4.","code":""},{"path":"/reference/POLY_MODEL-cash-hermite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hermite polynomial functions — POLY_MODEL$hermite","text":"function.","code":""},{"path":"/reference/POLY_MODEL-cash-hermite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hermite polynomial functions — POLY_MODEL$hermite","text":"","code":"POLY_MODEL$hermite(1) #> function (.)  #> { #>     if (length(.) > 1) { #>         .[] <- sapply(., f) #>         return(.) #>     } #>     -1 + .^2 #> } #> <environment: 0x7f9c1b06e278> POLY_MODEL$hermite(2) #> function (.)  #> { #>     if (length(.) > 1) { #>         .[] <- sapply(., f) #>         return(.) #>     } #>     -3 * . + .^3 #> } #> <environment: 0x7f9c48b206e0> POLY_MODEL$hermite(3) #> function (.)  #> { #>     if (length(.) > 1) { #>         .[] <- sapply(., f) #>         return(.) #>     } #>     -15 + 45 * .^2 - 15 * .^4 + .^6 #> } #> <environment: 0x7f9c18ef3020> POLY_MODEL$hermite(4) #> function (.)  #> { #>     if (length(.) > 1) { #>         .[] <- sapply(., f) #>         return(.) #>     } #>     -34459425 + 310134825 * .^2 - 413513100 * .^4 + 192972780 *  #>         .^6 - 41351310 * .^8 + 4594590 * .^10 - 278460 * .^12 +  #>         9180 * .^14 - 153 * .^16 + .^18 #> } #> <environment: 0x7f9c1a862588>"},{"path":"/reference/POLY_MODEL-cash-null_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the null model — POLY_MODEL$null_formula","title":"Formula for fitting the null model — POLY_MODEL$null_formula","text":"Quoted formula fitting null model.","code":""},{"path":"/reference/POLY_MODEL-cash-null_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the null model — POLY_MODEL$null_formula","text":"","code":"POLY_MODEL$null_formula #> y ~ x"},{"path":"/reference/POLY_MODEL-cash-raw_z_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for the raw orthogonal polynomial term raw_z — POLY_MODEL$raw_z_formula","title":"Formula for the raw orthogonal polynomial term raw_z — POLY_MODEL$raw_z_formula","text":"Quoted formula raw orthogonal polynomial term raw_z.","code":""},{"path":"/reference/POLY_MODEL-cash-raw_z_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for the raw orthogonal polynomial term raw_z — POLY_MODEL$raw_z_formula","text":"","code":"POLY_MODEL$raw_z_formula #> raw_z ~ hermite(shape)((x - min(x))/max(x - min(x)) * 4 - 2)"},{"path":"/reference/POLY_MODEL-cash-set_prm.html","id":null,"dir":"Reference","previous_headings":"","what":"Set parameter for the model — POLY_MODEL$set_prm","title":"Set parameter for the model — POLY_MODEL$set_prm","text":"function store values environment update values closed form expression y, except parameter sigma, shape raw_z. parameter sigma, value updated, corresponding value e updated. parameter shape, value updated, corresponding value raw_z updated. parameter raw_z, value updated, corresponding value z updated.","code":""},{"path":"/reference/POLY_MODEL-cash-set_prm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set parameter for the model — POLY_MODEL$set_prm","text":"prm_name List Vector. Parameter character names. prm_val List Vector. Parameter values.","code":""},{"path":"/reference/POLY_MODEL-cash-set_prm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set parameter for the model — POLY_MODEL$set_prm","text":"Return object .","code":""},{"path":"/reference/POLY_MODEL-cash-set_prm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set parameter for the model — POLY_MODEL$set_prm","text":"","code":"# Instantiate mod <- poly_model(shape = 2, sigma = 0.5)  mod #>  #> ── <POLY_MODEL object> #> y = 1 + x + include_z * z + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - z: <CLOSED_FORM object> #>    EXPR = (raw_z - min(raw_z))/max(raw_z - min(raw_z)) * 2 - 1 #>     - raw_z: <CLOSED_FORM object> #>       EXPR = hermite(shape)((x - min(x))/max(x - min(x)) * 4 - 2) #>        - x: <RAND_UNIFORM object> #>          [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #>  - shape: 2 #>  - include_z: TRUE #>  - sigma: 0.5   mod$set_prm(\"shape\", 4) #>  #> ── <POLY_MODEL object> #> y = 1 + x + include_z * z + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - z: <CLOSED_FORM object> #>    EXPR = (raw_z - min(raw_z))/max(raw_z - min(raw_z)) * 2 - 1 #>     - raw_z: <CLOSED_FORM object> #>       EXPR = hermite(shape)((x - min(x))/max(x - min(x)) * 4 - 2) #>        - x: <RAND_UNIFORM object> #>          [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #>  - shape: 4 #>  - include_z: TRUE #>  - sigma: 0.5   mod #>  #> ── <POLY_MODEL object> #> y = 1 + x + include_z * z + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - z: <CLOSED_FORM object> #>    EXPR = (raw_z - min(raw_z))/max(raw_z - min(raw_z)) * 2 - 1 #>     - raw_z: <CLOSED_FORM object> #>       EXPR = hermite(shape)((x - min(x))/max(x - min(x)) * 4 - 2) #>        - x: <RAND_UNIFORM object> #>          [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #>  - shape: 4 #>  - include_z: TRUE #>  - sigma: 0.5   mod$set_prm(\"sigma\", 1) #>  #> ── <POLY_MODEL object> #> y = 1 + x + include_z * z + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - z: <CLOSED_FORM object> #>    EXPR = (raw_z - min(raw_z))/max(raw_z - min(raw_z)) * 2 - 1 #>     - raw_z: <CLOSED_FORM object> #>       EXPR = hermite(shape)((x - min(x))/max(x - min(x)) * 4 - 2) #>        - x: <RAND_UNIFORM object> #>          [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #>  - shape: 4 #>  - include_z: TRUE #>  - sigma: 1   mod #>  #> ── <POLY_MODEL object> #> y = 1 + x + include_z * z + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - z: <CLOSED_FORM object> #>    EXPR = (raw_z - min(raw_z))/max(raw_z - min(raw_z)) * 2 - 1 #>     - raw_z: <CLOSED_FORM object> #>       EXPR = hermite(shape)((x - min(x))/max(x - min(x)) * 4 - 2) #>        - x: <RAND_UNIFORM object> #>          [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #>  - shape: 4 #>  - include_z: TRUE #>  - sigma: 1"},{"path":"/reference/POLY_MODEL-cash-z_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for the scaled orthogonal polynomial term z — POLY_MODEL$z_formula","title":"Formula for the scaled orthogonal polynomial term z — POLY_MODEL$z_formula","text":"Quoted formula scaled orthogonal polynomial term z.","code":""},{"path":"/reference/POLY_MODEL-cash-z_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for the scaled orthogonal polynomial term z — POLY_MODEL$z_formula","text":"","code":"POLY_MODEL$z_formula #> z ~ (raw_z - min(raw_z))/max(raw_z - min(raw_z)) * 2 - 1"},{"path":"/reference/POLY_MODEL.html","id":null,"dir":"Reference","previous_headings":"","what":"POLY_MODEL class environment — POLY_MODEL","title":"POLY_MODEL class environment — POLY_MODEL","text":"class visual inference orthogonal polynomial linear model, inherited VI_MODEL.","code":""},{"path":"/reference/POLY_MODEL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"POLY_MODEL class environment — POLY_MODEL","text":"","code":"POLY_MODEL"},{"path":"/reference/POLY_MODEL.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"POLY_MODEL class environment — POLY_MODEL","text":"environment S3 class visage_oop.","code":""},{"path":[]},{"path":"/reference/QUARTIC_MODEL-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — QUARTIC_MODEL$..init..","title":"Initialization method — QUARTIC_MODEL$..init..","text":"function called instance built. User input stored environment. response variable model y. formula y defined QUARTIC_MODEL$formula, null formula defined QUARTIC_MODEL$null_formula, alternative defined QUARTIC_MODEL$alt_formula.","code":""},{"path":"/reference/QUARTIC_MODEL-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — QUARTIC_MODEL$..init..","text":"Numeric. Default = 1. b Numeric. Default b = 1. c Numeric. Default c = 1. sigma Positive numeric. Default sigma = 1. x Random variable closed form expression. Default x = bandicoot::rand_uniform(-1, 1, env = new.env(parent = parent.env(self))). e Random variable closed form expression. Default e = bandicoot::rand_normal(0, sigma, env = new.env(parent = parent.env(self))).","code":""},{"path":"/reference/QUARTIC_MODEL-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — QUARTIC_MODEL$..init..","text":"return value, called side effects.","code":""},{"path":"/reference/QUARTIC_MODEL-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — QUARTIC_MODEL$..init..","text":"","code":"# Instantiate x <- bandicoot::rand_uniform() e <- bandicoot::rand_normal()  test <- quartic_model(a = 200, b = 200, c = 20, x = x, e = e)  test #>  #> ── <QUARTIC_MODEL object> #> y = 1 + x + a * x^2 + b * x^3 + c * x^4 + e #>  - x: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #>  - a: 200 #>  - b: 200 #>  - c: 20 #>  - sigma: 1   # Generate data test$gen(10) #>              y           x            e     .resid   .fitted #> 1   13.9867058 0.214169639  1.591996910 -15.043526  29.03023 #> 2    1.1921592 0.028599513 -0.004718576  32.069496 -30.87734 #> 3   20.7750584 0.286952912 -1.841547078 -31.751783  52.52684 #> 4  128.5066007 0.619332094 -0.281453369 -31.322148 159.82875 #> 5  116.0632653 0.594225746 -0.610185819 -35.660406 151.72367 #> 6    8.3389183 0.178000516 -0.323956957  -9.014842  17.35376 #> 7  275.6593099 0.843126925  1.667507248  43.582919 232.07639 #> 8  279.1115688 0.851225184 -1.513850712  44.420818 234.69075 #> 9  112.1815828 0.584088757  0.184254081 -36.269567 148.45115 #> 10   0.8358732 0.006061851 -0.177582395  38.989039 -38.15317  # Generate lineup test$gen_lineup(10, k = 3) #>             y          x          e     .resid    .fitted test_name #> 1  348.666763 0.92875767 -0.8889801  52.371165 296.295598    F-test #> 2  141.134223 0.64229839  0.5828901 -48.060427 189.194650    F-test #> 3   56.042242 0.43309272  0.1446624 -54.934918 110.977159    F-test #> 4   22.859866 0.29249309 -0.6941375 -35.550120  58.409987    F-test #> 5  278.191514 0.84803058  0.1953779  12.078036 266.113478    F-test #> 6  175.461001 0.70459682 -0.4246746 -37.025687 212.486688    F-test #> 7    2.692125 0.02602223  1.5271376  43.909845 -41.217721    F-test #> 8  313.987520 0.89208671 -1.7227098  31.402404 282.585116    F-test #> 9    5.282556 0.12271196  0.7740991  10.350073  -5.067518    F-test #> 10   1.509223 0.07220654 -0.6815783  25.459628 -23.950406    F-test #> 11 269.286654 0.92875767 -0.8889801 -27.008944 296.295598    F-test #> 12 125.235990 0.64229839  0.5828901 -63.958661 189.194650    F-test #> 13 122.095008 0.43309272  0.1446624  11.117849 110.977159    F-test #> 14  99.892791 0.29249309 -0.6941375  41.482804  58.409987    F-test #> 15 284.561866 0.84803058  0.1953779  18.448388 266.113478    F-test #> 16 292.848727 0.70459682 -0.4246746  80.362039 212.486688    F-test #> 17 -55.267246 0.02602223  1.5271376 -14.049525 -41.217721    F-test #> 18 260.099388 0.89208671 -1.7227098 -22.485728 282.585116    F-test #> 19 -22.880838 0.12271196  0.7740991 -17.813321  -5.067518    F-test #> 20 -30.045307 0.07220654 -0.6815783  -6.094901 -23.950406    F-test #> 21 318.686241 0.92875767 -0.8889801  22.390643 296.295598    F-test #> 22 142.329286 0.64229839  0.5828901 -46.865364 189.194650    F-test #> 23 101.054416 0.43309272  0.1446624  -9.922744 110.977159    F-test #> 24  53.555079 0.29249309 -0.6941375  -4.854908  58.409987    F-test #> 25 329.250655 0.84803058  0.1953779  63.137177 266.113478    F-test #> 26 172.748991 0.70459682 -0.4246746 -39.737697 212.486688    F-test #> 27 -89.069945 0.02602223  1.5271376 -47.852224 -41.217721    F-test #> 28 263.385922 0.89208671 -1.7227098 -19.199194 282.585116    F-test #> 29  31.892766 0.12271196  0.7740991  36.960284  -5.067518    F-test #> 30  21.993621 0.07220654 -0.6815783  45.944027 -23.950406    F-test #>       statistic      p_value k  null #> 1  6063.7827571 2.549482e-09 1 FALSE #> 2  6063.7827571 2.549482e-09 1 FALSE #> 3  6063.7827571 2.549482e-09 1 FALSE #> 4  6063.7827571 2.549482e-09 1 FALSE #> 5  6063.7827571 2.549482e-09 1 FALSE #> 6  6063.7827571 2.549482e-09 1 FALSE #> 7  6063.7827571 2.549482e-09 1 FALSE #> 8  6063.7827571 2.549482e-09 1 FALSE #> 9  6063.7827571 2.549482e-09 1 FALSE #> 10 6063.7827571 2.549482e-09 1 FALSE #> 11    0.3500357 7.916171e-01 2  TRUE #> 12    0.3500357 7.916171e-01 2  TRUE #> 13    0.3500357 7.916171e-01 2  TRUE #> 14    0.3500357 7.916171e-01 2  TRUE #> 15    0.3500357 7.916171e-01 2  TRUE #> 16    0.3500357 7.916171e-01 2  TRUE #> 17    0.3500357 7.916171e-01 2  TRUE #> 18    0.3500357 7.916171e-01 2  TRUE #> 19    0.3500357 7.916171e-01 2  TRUE #> 20    0.3500357 7.916171e-01 2  TRUE #> 21    2.1741147 2.094600e-01 3  TRUE #> 22    2.1741147 2.094600e-01 3  TRUE #> 23    2.1741147 2.094600e-01 3  TRUE #> 24    2.1741147 2.094600e-01 3  TRUE #> 25    2.1741147 2.094600e-01 3  TRUE #> 26    2.1741147 2.094600e-01 3  TRUE #> 27    2.1741147 2.094600e-01 3  TRUE #> 28    2.1741147 2.094600e-01 3  TRUE #> 29    2.1741147 2.094600e-01 3  TRUE #> 30    2.1741147 2.094600e-01 3  TRUE  # Plot the lineup test$plot_lineup(test$gen_lineup(100))"},{"path":"/reference/QUARTIC_MODEL-cash-E.html","id":null,"dir":"Reference","previous_headings":"","what":"Expectation of the residuals — QUARTIC_MODEL$E","title":"Expectation of the residuals — QUARTIC_MODEL$E","text":"function calculate expectation residuals use Frisch–Waugh–Lovell theorem.","code":""},{"path":"/reference/QUARTIC_MODEL-cash-E.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expectation of the residuals — QUARTIC_MODEL$E","text":"dat Dataframe/List. List contains variable x z. Numeric. Default = self$prm$. b Numeric. Default b = self$prm$b. c Numeric. Default c = self$prm$c.","code":""},{"path":"/reference/QUARTIC_MODEL-cash-E.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expectation of the residuals — QUARTIC_MODEL$E","text":"vector numeric expectations.","code":""},{"path":"/reference/QUARTIC_MODEL-cash-E.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expectation of the residuals — QUARTIC_MODEL$E","text":"","code":"mod <- quartic_model(-1, 1, 1, 0.5) dat <- mod$gen(1000, fit_model = TRUE) dat$exp <- mod$E(dat) mod$plot(dat) + ggplot2::geom_point(ggplot2::aes(.fitted, exp),                                     col = \"red\",                                     alpha = 0.6)"},{"path":"/reference/QUARTIC_MODEL-cash-alt_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the alternative model — QUARTIC_MODEL$alt_formula","title":"Formula for fitting the alternative model — QUARTIC_MODEL$alt_formula","text":"Quoted formula fitting alternative model.","code":""},{"path":"/reference/QUARTIC_MODEL-cash-alt_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the alternative model — QUARTIC_MODEL$alt_formula","text":"","code":"QUARTIC_MODEL$alt_formula #> y ~ x + I(x^2) + I(x^3) + I(x^4)"},{"path":"/reference/QUARTIC_MODEL-cash-effect_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the effect size of the simulated data — QUARTIC_MODEL$effect_size","title":"Compute the effect size of the simulated data — QUARTIC_MODEL$effect_size","text":"function computes effect size simulated data.","code":""},{"path":"/reference/QUARTIC_MODEL-cash-effect_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the effect size of the simulated data — QUARTIC_MODEL$effect_size","text":"dat Dataframe/List. List contains variable x. Numeric. Default = self$prm$. b Numeric. Default b = self$prm$b. c Numeric. Default c = self$prm$c. sigma Positive numeric. Default sigma = self$prm$sigma.","code":""},{"path":"/reference/QUARTIC_MODEL-cash-effect_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the effect size of the simulated data — QUARTIC_MODEL$effect_size","text":"numeric value.","code":""},{"path":"/reference/QUARTIC_MODEL-cash-effect_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the effect size of the simulated data — QUARTIC_MODEL$effect_size","text":"","code":"mod <- quartic_model(-1, 1, 1, 0.5) dat <- mod$gen(1000, fit_model = TRUE) mod$effect_size(dat) #> [1] 0.6406194"},{"path":"/reference/QUARTIC_MODEL-cash-formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Closed form expression of y — QUARTIC_MODEL$formula","title":"Closed form expression of y — QUARTIC_MODEL$formula","text":"quoted formula, passed CLOSED_FORM$instantiate define closed form expression y.","code":""},{"path":"/reference/QUARTIC_MODEL-cash-formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Closed form expression of y — QUARTIC_MODEL$formula","text":"","code":"QUARTIC_MODEL$formula #> y ~ 1 + x + a * x^2 + b * x^3 + c * x^4 + e"},{"path":"/reference/QUARTIC_MODEL-cash-null_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the null model — QUARTIC_MODEL$null_formula","title":"Formula for fitting the null model — QUARTIC_MODEL$null_formula","text":"Quoted formula fitting null model.","code":""},{"path":"/reference/QUARTIC_MODEL-cash-null_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the null model — QUARTIC_MODEL$null_formula","text":"","code":"QUARTIC_MODEL$null_formula #> y ~ x"},{"path":"/reference/QUARTIC_MODEL-cash-set_prm.html","id":null,"dir":"Reference","previous_headings":"","what":"Set parameter for the model — QUARTIC_MODEL$set_prm","title":"Set parameter for the model — QUARTIC_MODEL$set_prm","text":"function store values environment update values closed form expression y, except parameter sigma. parameter sigma, value updated, corresponding value e updated.","code":""},{"path":"/reference/QUARTIC_MODEL-cash-set_prm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set parameter for the model — QUARTIC_MODEL$set_prm","text":"prm_name List Vector. Parameter character names. prm_val List Vector. Parameter values.","code":""},{"path":"/reference/QUARTIC_MODEL-cash-set_prm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set parameter for the model — QUARTIC_MODEL$set_prm","text":"Return object .","code":""},{"path":"/reference/QUARTIC_MODEL-cash-set_prm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set parameter for the model — QUARTIC_MODEL$set_prm","text":"","code":"# Instantiate mod <- quartic_model(a = -1, b = 1, c = 1, sigma = 0.5)  mod #>  #> ── <QUARTIC_MODEL object> #> y = 1 + x + a * x^2 + b * x^3 + c * x^4 + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #>  - a: -1 #>  - b: 1 #>  - c: 1 #>  - sigma: 0.5   mod$set_prm(\"a\", 2) #>  #> ── <QUARTIC_MODEL object> #> y = 1 + x + a * x^2 + b * x^3 + c * x^4 + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #>  - a: 2 #>  - b: 1 #>  - c: 1 #>  - sigma: 0.5   mod #>  #> ── <QUARTIC_MODEL object> #> y = 1 + x + a * x^2 + b * x^3 + c * x^4 + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #>  - a: 2 #>  - b: 1 #>  - c: 1 #>  - sigma: 0.5   mod$set_prm(\"sigma\", 1) #>  #> ── <QUARTIC_MODEL object> #> y = 1 + x + a * x^2 + b * x^3 + c * x^4 + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #>  - a: 2 #>  - b: 1 #>  - c: 1 #>  - sigma: 1   mod #>  #> ── <QUARTIC_MODEL object> #> y = 1 + x + a * x^2 + b * x^3 + c * x^4 + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #>  - a: 2 #>  - b: 1 #>  - c: 1 #>  - sigma: 1"},{"path":"/reference/QUARTIC_MODEL.html","id":null,"dir":"Reference","previous_headings":"","what":"QUARTIC_MODEL class environment — QUARTIC_MODEL","title":"QUARTIC_MODEL class environment — QUARTIC_MODEL","text":"class visual inference quartic linear model, inherited VI_MODEL.","code":""},{"path":"/reference/QUARTIC_MODEL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"QUARTIC_MODEL class environment — QUARTIC_MODEL","text":"","code":"QUARTIC_MODEL"},{"path":"/reference/QUARTIC_MODEL.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"QUARTIC_MODEL class environment — QUARTIC_MODEL","text":"environment S3 class visage_oop.","code":""},{"path":[]},{"path":"/reference/SIMPLE_CUBIC_MODEL-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — SIMPLE_CUBIC_MODEL$..init..","title":"Initialization method — SIMPLE_CUBIC_MODEL$..init..","text":"function called instance built. User input stored environment. response variable model y. formula y defined SIMPLE_CUBIC_MODEL$formula, null formula defined SIMPLE_CUBIC_MODEL$null_formula, alternative defined SIMPLE_CUBIC_MODEL$alt_formula.","code":""},{"path":"/reference/SIMPLE_CUBIC_MODEL-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — SIMPLE_CUBIC_MODEL$..init..","text":"Numeric. Default = 1. b Numeric. Default b = 1. sigma Positive numeric. Default sigma = 1. x Random variable closed form expression. Default x = bandicoot::rand_uniform(-1, 1, env = new.env(parent = parent.env(self))). e Random variable closed form expression. Default e = bandicoot::rand_normal(0, sigma, env = new.env(parent = parent.env(self))).","code":""},{"path":"/reference/SIMPLE_CUBIC_MODEL-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — SIMPLE_CUBIC_MODEL$..init..","text":"return value, called side effects.","code":""},{"path":"/reference/SIMPLE_CUBIC_MODEL-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — SIMPLE_CUBIC_MODEL$..init..","text":"","code":"# Instantiate x <- bandicoot::rand_uniform() e <- bandicoot::rand_normal()  test <- simple_cubic_model(a = 200, b = 200, x = x, e = e)  test #>  #> ── <SIMPLE_CUBIC_MODEL object> #> y = 1 + x + a * x^2 + b * x^3 + e #>  - x: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #>  - a: 200 #>  - b: 200 #>  - sigma: 1   # Generate data test$gen(10) #>            y         x          e    .resid    .fitted #> 1  159.54885 0.6859683 -0.8044509 -15.46037 175.009226 #> 2   75.15990 0.4995194 -1.1715151 -23.10757  98.267475 #> 3   97.63127 0.5519861  1.5047596 -22.23134 119.862615 #> 4  124.80036 0.6150528  0.9936726 -21.02027 145.820630 #> 5  168.19640 0.6979587  1.0675634 -11.74803 179.944423 #> 6   17.23841 0.2582086 -0.7971726  18.29363  -1.055215 #> 7   12.81859 0.2132448  0.5712876  32.38077 -19.562175 #> 8   57.95575 0.4386778  1.1457677 -15.26952  73.225270 #> 9  300.65082 0.8884887  0.6031656  42.28491 258.365910 #> 10 246.77857 0.8217604 -1.0865510  15.87779 230.900773  # Generate lineup test$gen_lineup(10, k = 3) #>             y          x          e     .resid   .fitted test_name    statistic #> 1    2.978416 0.11838226 -1.2746481  13.462643 -10.48423    F-test 1.171412e+03 #> 2  208.367235 0.76533784 -0.2046079   5.303949 203.06329    F-test 1.171412e+03 #> 3   21.930240 0.27392566  1.5384434 -18.927400  40.85764    F-test 1.171412e+03 #> 4  113.306092 0.59119923  0.4848063 -32.277410 145.58350    F-test 1.171412e+03 #> 5  261.345264 0.83785499  1.4722046  34.345469 226.99979    F-test 1.171412e+03 #> 6    3.525150 0.03507205  2.2354397  41.508462 -37.98331    F-test 1.171412e+03 #> 7  241.239724 0.81420851 -1.1151295  22.045176 219.19455    F-test 1.171412e+03 #> 8    8.418310 0.19554130 -1.9198704  -6.566169  14.98448    F-test 1.171412e+03 #> 9   33.963250 0.34099406  1.4369163 -29.032369  62.99562    F-test 1.171412e+03 #> 10 123.781611 0.61561890 -0.2935997 -29.862351 153.64396    F-test 1.171412e+03 #> 11   2.670632 0.11838226 -1.2746481  13.154858 -10.48423    F-test 3.314002e-01 #> 12 169.570205 0.76533784 -0.2046079 -33.493081 203.06329    F-test 3.314002e-01 #> 13  10.711554 0.27392566  1.5384434 -30.146086  40.85764    F-test 3.314002e-01 #> 14 123.697768 0.59119923  0.4848063 -21.885734 145.58350    F-test 3.314002e-01 #> 15 269.355756 0.83785499  1.4722046  42.355961 226.99979    F-test 3.314002e-01 #> 16 -56.033532 0.03507205  2.2354397 -18.050220 -37.98331    F-test 3.314002e-01 #> 17 199.114998 0.81420851 -1.1151295 -20.079551 219.19455    F-test 3.314002e-01 #> 18  38.716762 0.19554130 -1.9198704  23.732283  14.98448    F-test 3.314002e-01 #> 19  81.983564 0.34099406  1.4369163  18.987945  62.99562    F-test 3.314002e-01 #> 20 179.067587 0.61561890 -0.2935997  25.423624 153.64396    F-test 3.314002e-01 #> 21  14.652078 0.11838226 -1.2746481  25.136304 -10.48423    F-test 4.449006e-02 #> 22 259.510636 0.76533784 -0.2046079  56.447351 203.06329    F-test 4.449006e-02 #> 23  33.953962 0.27392566  1.5384434  -6.903678  40.85764    F-test 4.449006e-02 #> 24 135.298578 0.59119923  0.4848063 -10.284924 145.58350    F-test 4.449006e-02 #> 25 230.435651 0.83785499  1.4722046   3.435856 226.99979    F-test 4.449006e-02 #> 26 -38.270377 0.03507205  2.2354397  -0.287065 -37.98331    F-test 4.449006e-02 #> 27 183.413022 0.81420851 -1.1151295 -35.781527 219.19455    F-test 4.449006e-02 #> 28 -14.152212 0.19554130 -1.9198704 -29.136691  14.98448    F-test 4.449006e-02 #> 29  79.842958 0.34099406  1.4369163  16.847339  62.99562    F-test 4.449006e-02 #> 30 134.170997 0.61561890 -0.2935997 -19.472966 153.64396    F-test 4.449006e-02 #>         p_value k  null #> 1  1.666871e-08 1 FALSE #> 2  1.666871e-08 1 FALSE #> 3  1.666871e-08 1 FALSE #> 4  1.666871e-08 1 FALSE #> 5  1.666871e-08 1 FALSE #> 6  1.666871e-08 1 FALSE #> 7  1.666871e-08 1 FALSE #> 8  1.666871e-08 1 FALSE #> 9  1.666871e-08 1 FALSE #> 10 1.666871e-08 1 FALSE #> 11 7.302698e-01 2  TRUE #> 12 7.302698e-01 2  TRUE #> 13 7.302698e-01 2  TRUE #> 14 7.302698e-01 2  TRUE #> 15 7.302698e-01 2  TRUE #> 16 7.302698e-01 2  TRUE #> 17 7.302698e-01 2  TRUE #> 18 7.302698e-01 2  TRUE #> 19 7.302698e-01 2  TRUE #> 20 7.302698e-01 2  TRUE #> 21 9.567976e-01 3  TRUE #> 22 9.567976e-01 3  TRUE #> 23 9.567976e-01 3  TRUE #> 24 9.567976e-01 3  TRUE #> 25 9.567976e-01 3  TRUE #> 26 9.567976e-01 3  TRUE #> 27 9.567976e-01 3  TRUE #> 28 9.567976e-01 3  TRUE #> 29 9.567976e-01 3  TRUE #> 30 9.567976e-01 3  TRUE  # Plot the lineup test$plot_lineup(test$gen_lineup(100))"},{"path":"/reference/SIMPLE_CUBIC_MODEL-cash-E.html","id":null,"dir":"Reference","previous_headings":"","what":"Expectation of the residuals — SIMPLE_CUBIC_MODEL$E","title":"Expectation of the residuals — SIMPLE_CUBIC_MODEL$E","text":"function calculate expectation residuals use Frisch–Waugh–Lovell theorem.","code":""},{"path":"/reference/SIMPLE_CUBIC_MODEL-cash-E.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expectation of the residuals — SIMPLE_CUBIC_MODEL$E","text":"dat Dataframe/List. List contains variable x z. Numeric. Default = self$prm$. b Numeric. Default b = self$prm$b.","code":""},{"path":"/reference/SIMPLE_CUBIC_MODEL-cash-E.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expectation of the residuals — SIMPLE_CUBIC_MODEL$E","text":"vector numeric expectations.","code":""},{"path":"/reference/SIMPLE_CUBIC_MODEL-cash-E.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expectation of the residuals — SIMPLE_CUBIC_MODEL$E","text":"","code":"mod <- simple_cubic_model(-1, 1, 0.5) dat <- mod$gen(1000, fit_model = TRUE) dat$exp <- mod$E(dat) mod$plot(dat) + ggplot2::geom_point(ggplot2::aes(.fitted, exp),                                     col = \"red\",                                     alpha = 0.6)"},{"path":"/reference/SIMPLE_CUBIC_MODEL-cash-alt_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the alternative model — SIMPLE_CUBIC_MODEL$alt_formula","title":"Formula for fitting the alternative model — SIMPLE_CUBIC_MODEL$alt_formula","text":"Quoted formula fitting alternative model.","code":""},{"path":"/reference/SIMPLE_CUBIC_MODEL-cash-alt_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the alternative model — SIMPLE_CUBIC_MODEL$alt_formula","text":"","code":"SIMPLE_CUBIC_MODEL$alt_formula #> y ~ x + I(x^2) + I(x^3)"},{"path":"/reference/SIMPLE_CUBIC_MODEL-cash-effect_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the effect size of the simulated data — SIMPLE_CUBIC_MODEL$effect_size","title":"Compute the effect size of the simulated data — SIMPLE_CUBIC_MODEL$effect_size","text":"function computes effect size simulated data.","code":""},{"path":"/reference/SIMPLE_CUBIC_MODEL-cash-effect_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the effect size of the simulated data — SIMPLE_CUBIC_MODEL$effect_size","text":"dat Dataframe/List. List contains variable x. Numeric. Default = self$prm$. b Numeric. Default b = self$prm$b. sigma Positive numeric. Default sigma = self$prm$sigma.","code":""},{"path":"/reference/SIMPLE_CUBIC_MODEL-cash-effect_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the effect size of the simulated data — SIMPLE_CUBIC_MODEL$effect_size","text":"numeric value.","code":""},{"path":"/reference/SIMPLE_CUBIC_MODEL-cash-effect_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the effect size of the simulated data — SIMPLE_CUBIC_MODEL$effect_size","text":"","code":"mod <- simple_cubic_model(-1, 1, 0.5) dat <- mod$gen(1000, fit_model = TRUE) mod$effect_size(dat) #> [1] 1.382245"},{"path":"/reference/SIMPLE_CUBIC_MODEL-cash-formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Closed form expression of y — SIMPLE_CUBIC_MODEL$formula","title":"Closed form expression of y — SIMPLE_CUBIC_MODEL$formula","text":"quoted formula, passed CLOSED_FORM$instantiate define closed form expression y.","code":""},{"path":"/reference/SIMPLE_CUBIC_MODEL-cash-formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Closed form expression of y — SIMPLE_CUBIC_MODEL$formula","text":"","code":"SIMPLE_CUBIC_MODEL$formula #> y ~ 1 + x + a * x^2 + b * x^3 + e"},{"path":"/reference/SIMPLE_CUBIC_MODEL-cash-null_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the null model — SIMPLE_CUBIC_MODEL$null_formula","title":"Formula for fitting the null model — SIMPLE_CUBIC_MODEL$null_formula","text":"Quoted formula fitting null model.","code":""},{"path":"/reference/SIMPLE_CUBIC_MODEL-cash-null_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the null model — SIMPLE_CUBIC_MODEL$null_formula","text":"","code":"SIMPLE_CUBIC_MODEL$null_formula #> y ~ x"},{"path":"/reference/SIMPLE_CUBIC_MODEL-cash-set_prm.html","id":null,"dir":"Reference","previous_headings":"","what":"Set parameter for the model — SIMPLE_CUBIC_MODEL$set_prm","title":"Set parameter for the model — SIMPLE_CUBIC_MODEL$set_prm","text":"function store values environment update values closed form expression y, except parameter sigma. parameter sigma, value updated, corresponding value e updated.","code":""},{"path":"/reference/SIMPLE_CUBIC_MODEL-cash-set_prm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set parameter for the model — SIMPLE_CUBIC_MODEL$set_prm","text":"prm_name List Vector. Parameter character names. prm_val List Vector. Parameter values.","code":""},{"path":"/reference/SIMPLE_CUBIC_MODEL-cash-set_prm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set parameter for the model — SIMPLE_CUBIC_MODEL$set_prm","text":"Return object .","code":""},{"path":"/reference/SIMPLE_CUBIC_MODEL-cash-set_prm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set parameter for the model — SIMPLE_CUBIC_MODEL$set_prm","text":"","code":"# Instantiate mod <- simple_cubic_model(a = -1, b = 1, sigma = 0.5)  mod #>  #> ── <SIMPLE_CUBIC_MODEL object> #> y = 1 + x + a * x^2 + b * x^3 + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #>  - a: -1 #>  - b: 1 #>  - sigma: 0.5   mod$set_prm(\"a\", 2) #>  #> ── <SIMPLE_CUBIC_MODEL object> #> y = 1 + x + a * x^2 + b * x^3 + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #>  - a: 2 #>  - b: 1 #>  - sigma: 0.5   mod #>  #> ── <SIMPLE_CUBIC_MODEL object> #> y = 1 + x + a * x^2 + b * x^3 + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #>  - a: 2 #>  - b: 1 #>  - sigma: 0.5   mod$set_prm(\"sigma\", 1) #>  #> ── <SIMPLE_CUBIC_MODEL object> #> y = 1 + x + a * x^2 + b * x^3 + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #>  - a: 2 #>  - b: 1 #>  - sigma: 1   mod #>  #> ── <SIMPLE_CUBIC_MODEL object> #> y = 1 + x + a * x^2 + b * x^3 + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #>  - a: 2 #>  - b: 1 #>  - sigma: 1"},{"path":"/reference/SIMPLE_CUBIC_MODEL.html","id":null,"dir":"Reference","previous_headings":"","what":"SIMPLE_CUBIC_MODEL class environment — SIMPLE_CUBIC_MODEL","title":"SIMPLE_CUBIC_MODEL class environment — SIMPLE_CUBIC_MODEL","text":"class visual inference simple cubic linear model, inherited VI_MODEL.","code":""},{"path":"/reference/SIMPLE_CUBIC_MODEL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SIMPLE_CUBIC_MODEL class environment — SIMPLE_CUBIC_MODEL","text":"","code":"SIMPLE_CUBIC_MODEL"},{"path":"/reference/SIMPLE_CUBIC_MODEL.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"SIMPLE_CUBIC_MODEL class environment — SIMPLE_CUBIC_MODEL","text":"environment S3 class visage_oop.","code":""},{"path":[]},{"path":"/reference/VI_MODEL-cash-..cache...html","id":null,"dir":"Reference","previous_headings":"","what":"Cache list, containing the last fitted model, data frame and formula — VI_MODEL$..cache..","title":"Cache list, containing the last fitted model, data frame and formula — VI_MODEL$..cache..","text":"list, used cache = TRUE calling fit method.","code":""},{"path":"/reference/VI_MODEL-cash-..cache...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cache list, containing the last fitted model, data frame and formula — VI_MODEL$..cache..","text":"","code":"# Instantiate x <- bandicoot::rand_uniform() e <- bandicoot::rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  # Turn on cache test$fit(test$gen(10), cache = TRUE) #>  #> Call: #> stats::lm(formula = y ~ x, data = test$gen(10)) #>  #> Coefficients: #> (Intercept)            x   #>      1.7111      -0.2262   #>   test$..cache.. #> $dat #>            y         x          e      .resid   .fitted #> 1  -1.639804 0.0342340 -2.6752103 -0.52458499 -1.115219 #> 2   1.877597 0.5053544  0.1168591  0.08314602  1.794451 #> 3   3.753408 0.8725313  1.1195653 -0.30875124  4.062159 #> 4   3.092693 0.8506352  0.5184779 -0.83423362  3.926927 #> 5   4.204578 0.7988724  1.7675085  0.59734152  3.607236 #> 6   2.815682 0.6296867  0.7894904  0.25334772  2.562335 #> 7   2.985467 0.6887602  0.8223159  0.05829024  2.927176 #> 8   1.341272 0.3936687 -0.2073712  0.23660031  1.104672 #> 9   2.825092 0.4849022  1.1050597  1.15695586  1.668136 #> 10  1.189561 0.5236869 -0.6083735 -0.71811183  1.907673 #>  #> $formula #> y ~ x #>  #> $mod #>  #> Call: #> stats::lm(formula = y ~ x, data = test$gen(10)) #>  #> Coefficients: #> (Intercept)            x   #>      1.7111      -0.2262   #>  #>"},{"path":"/reference/VI_MODEL-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — VI_MODEL$..init..","title":"Initialization method — VI_MODEL$..init..","text":"function called instance built. User input stored environment. response variable model y.","code":""},{"path":"/reference/VI_MODEL-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — VI_MODEL$..init..","text":"prm Named List. list random variables closed form expressions needs used constructing y. Constant parameters also supplied. prm_type Named List. list characters denoting type parameters. \"r\" stands random variable closed form used expression y, \"o\" stands others. value affects string representation object. formula Formula. passed CLOSED_FORM$instantiate define closed form expression y. Default formula = self$formula. null_formula Formula. Formula fitting null model. Default NULL. alt_formula Formula. Formula fitting alternative model. Default NULL.","code":""},{"path":"/reference/VI_MODEL-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — VI_MODEL$..init..","text":"return value, called side effects.","code":""},{"path":"/reference/VI_MODEL-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — VI_MODEL$..init..","text":"","code":"# Instantiate x <- bandicoot::rand_uniform() e <- bandicoot::rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  test #>  #> ── <VI_MODEL object> #> y = 1 + x + x^2 + e #>  - x: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1]"},{"path":"/reference/VI_MODEL-cash-..str...html","id":null,"dir":"Reference","previous_headings":"","what":"String representation of the object — VI_MODEL$..str..","title":"String representation of the object — VI_MODEL$..str..","text":"function returns string representation object.","code":""},{"path":"/reference/VI_MODEL-cash-..str...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"String representation of the object — VI_MODEL$..str..","text":"string.","code":""},{"path":"/reference/VI_MODEL-cash-..str...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"String representation of the object — VI_MODEL$..str..","text":"","code":"VI_MODEL$..str..() #> [1] \"<VI_MODEL class>\"  # Instantiate x <- bandicoot::rand_uniform() e <- bandicoot::rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  test$..str..() #> [1] \"<VI_MODEL object>\\n y = 1 + x + x^2 + e\\n  - x: <RAND_UNIFORM object>\\n    [a: 0, b: 1]\\n  - e: <RAND_NORMAL object>\\n    [mu: 0, sigma: 1]\""},{"path":"/reference/VI_MODEL-cash-alt_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the alternative model — VI_MODEL$alt_formula","title":"Formula for fitting the alternative model — VI_MODEL$alt_formula","text":"quoted formula, used fit alternative model.","code":""},{"path":"/reference/VI_MODEL-cash-alt_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the alternative model — VI_MODEL$alt_formula","text":"","code":"# Instantiate x <- bandicoot::rand_uniform() e <- bandicoot::rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  # A formula with environment equals to `test` test$alt_formula #> y ~ x + I(x^2)  # Use alternative formula in `fit` test$fit(test$gen(10), test$alt_formula) #>  #> Call: #> stats::lm(formula = y ~ x + I(x^2), data = test$gen(10)) #>  #> Coefficients: #> (Intercept)            x       I(x^2)   #>     -0.1047      -0.1709       5.8096   #>   # F-test also needs to use the alternative model test$test(test$gen(1000)) #> $name #> [1] \"F-test\" #>  #> $statistic #> [1] 10.43712 #>  #> $p_value #> [1] 0.001275486 #>"},{"path":"/reference/VI_MODEL-cash-effect_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the effect size of the simulated data or the defined model — VI_MODEL$effect_size","title":"Compute the effect size of the simulated data or the defined model — VI_MODEL$effect_size","text":"function computes effect size simulated data defined model. abstract method.","code":""},{"path":"/reference/VI_MODEL-cash-effect_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the effect size of the simulated data or the defined model — VI_MODEL$effect_size","text":"... Derived class needs override method.","code":""},{"path":"/reference/VI_MODEL-cash-effect_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the effect size of the simulated data or the defined model — VI_MODEL$effect_size","text":"NA","code":""},{"path":"/reference/VI_MODEL-cash-effect_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the effect size of the simulated data or the defined model — VI_MODEL$effect_size","text":"","code":"VI_MODEL$effect_size() #> [1] NA"},{"path":"/reference/VI_MODEL-cash-fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Test the null model against the alternative model — VI_MODEL$fit","title":"Test the null model against the alternative model — VI_MODEL$fit","text":"function fit linear model using stats::lm.","code":""},{"path":"/reference/VI_MODEL-cash-fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test the null model against the alternative model — VI_MODEL$fit","text":"dat Data frame. data frame containing variables needed formula. Default dat = self$..cache..$dat. formula Formula. Formula fitting model. Default formula = self$null_formula. cache Boolean. Whether cache model. Default FALSE. ... Arguments passed stats::lm.","code":""},{"path":"/reference/VI_MODEL-cash-fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test the null model against the alternative model — VI_MODEL$fit","text":"fitted linear model.","code":""},{"path":"/reference/VI_MODEL-cash-fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test the null model against the alternative model — VI_MODEL$fit","text":"","code":"# Instantiate x <- bandicoot::rand_uniform() e <- bandicoot::rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  test$fit(test$gen(100000)) #>  #> Call: #> stats::lm(formula = y ~ x, data = test$gen(1e+05)) #>  #> Coefficients: #> (Intercept)            x   #>      0.8342       2.0023   #>   test$fit(test$gen(100000), formula = y ~ x + I(x^2)) #>  #> Call: #> stats::lm(formula = y ~ x + I(x^2), data = test$gen(1e+05)) #>  #> Coefficients: #> (Intercept)            x       I(x^2)   #>      1.0059       0.9876       1.0194   #>"},{"path":"/reference/VI_MODEL-cash-formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Closed form expression of y — VI_MODEL$formula","title":"Closed form expression of y — VI_MODEL$formula","text":"quoted formula, passed CLOSED_FORM$instantiate define closed form expression y.","code":""},{"path":"/reference/VI_MODEL-cash-formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Closed form expression of y — VI_MODEL$formula","text":"","code":"# Instantiate x <- bandicoot::rand_uniform() e <- bandicoot::rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  # A formula with environment equals to `test` test$formula #> y ~ 1 + x + x^2 + e  # `y` has the same expression test$prm$y #>  #> ── <CLOSED_FORM object> #> EXPR = 1 + x + x^2 + e #>  - x: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1]"},{"path":"/reference/VI_MODEL-cash-gen.html","id":null,"dir":"Reference","previous_headings":"","what":"Generating random values from the expression of y — VI_MODEL$gen","title":"Generating random values from the expression of y — VI_MODEL$gen","text":"function generates random values expression y, keeps right hand side information data frame.","code":""},{"path":"/reference/VI_MODEL-cash-gen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generating random values from the expression of y — VI_MODEL$gen","text":"n Integer. Number observations. fit_model Boolean. Whether fit null model obtain fitted values residuals. Default TRUE. test Boolean. Whether test null model alternative model obtain test statistic p-value. Default FALSE. computed List. Default NULL. provided, random variables random closed form expression use values list, makes expression potentially deterministic.","code":""},{"path":"/reference/VI_MODEL-cash-gen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generating random values from the expression of y — VI_MODEL$gen","text":"data frame.","code":""},{"path":"/reference/VI_MODEL-cash-gen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generating random values from the expression of y — VI_MODEL$gen","text":"","code":"# Instantiate x <- bandicoot::rand_uniform() e <- bandicoot::rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  dat <- test$gen(10) dat #>              y          x           e     .resid   .fitted #> 1  -0.01784461 0.09646343 -1.12361323 -0.3714682 0.3536235 #> 2   1.73555958 0.22145637  0.46506029  0.9579402 0.7776194 #> 3   4.75310040 0.99538037  1.76693795  1.3502086 3.4028918 #> 4   3.41155521 0.81877701  0.92238240  0.6077299 2.8038253 #> 5   2.48069405 0.84560768 -0.07996599 -0.4141452 2.8948392 #> 6   1.88611715 0.43396960  0.26381793  0.3876193 1.4984978 #> 7   0.65622938 0.12838543 -0.48863887  0.1943213 0.4619080 #> 8   1.05950512 0.53714568 -0.76616605 -0.7889823 1.8484874 #> 9   1.48949389 0.74718377 -0.81597346 -1.0714759 2.5609697 #> 10  1.70935706 0.74722362 -0.59620969 -0.8517479 2.5611049  test$gen(10, computed = list(e = dat$e)) #>            y           e         x       .resid   .fitted #> 1  0.2410593 -1.12361323 0.2840105 -0.143132658 0.3841919 #> 2  3.0507394  0.46506029 0.8548724  0.318085939 2.7326535 #> 3  4.2501575  1.76693795 0.8165180  1.675289753 2.5748677 #> 4  3.3344209  0.92238240 0.7892007  0.871933191 2.4624877 #> 5  2.3580885 -0.07996599 0.7992515 -0.145747002 2.5038355 #> 6  3.1111644  0.26381793 0.9482218 -0.005518273 3.1166827 #> 7  1.8809981 -0.48863887 0.7726496 -0.513400071 2.3943982 #> 8  0.9142387 -0.76616605 0.4645749 -0.212774861 1.1270136 #> 9  1.8896994 -0.81597346 0.8984537 -1.022242918 2.9119423 #> 10 2.1527058 -0.59620969 0.9138301 -0.822493100 2.9751989  test$gen(10, test = TRUE) #>             y          x           e     .resid   .fitted test_name  statistic #> 1   3.0394564 0.89679785  0.33841216  0.6825199 2.3569365    F-test 0.04065403 #> 2   0.8412943 0.15201996 -0.33383574  0.2670337 0.5742606    F-test 0.04065403 #> 3   0.6156921 0.36956420 -0.89044983 -0.4792753 1.0949674    F-test 0.04065403 #> 4   2.1210390 0.43989405  0.48763814  0.8577324 1.2633066    F-test 0.04065403 #> 5   1.5295380 0.71832207 -0.70477066 -0.4002047 1.9297427    F-test 0.04065403 #> 6  -0.8893970 0.09225444 -1.99016233 -1.3206049 0.4312078    F-test 0.04065403 #> 7   0.4842378 0.73671800 -1.79523360 -1.4895368 1.9737746    F-test 0.04065403 #> 8   2.9282363 0.98757212 -0.03463456  0.3540254 2.5742108    F-test 0.04065403 #> 9   0.8882972 0.07071006 -0.18741275  0.5086573 0.3796399    F-test 0.04065403 #> 10  1.8596677 0.26304839  0.52742482  1.0196530 0.8400146    F-test 0.04065403 #>      p_value #> 1  0.8459414 #> 2  0.8459414 #> 3  0.8459414 #> 4  0.8459414 #> 5  0.8459414 #> 6  0.8459414 #> 7  0.8459414 #> 8  0.8459414 #> 9  0.8459414 #> 10 0.8459414"},{"path":"/reference/VI_MODEL-cash-gen_lineup.html","id":null,"dir":"Reference","previous_headings":"","what":"Generating random values from the expression of y, and forms a lineup — VI_MODEL$gen_lineup","title":"Generating random values from the expression of y, and forms a lineup — VI_MODEL$gen_lineup","text":"function generates random values expression y, keeps right hand side information data frame.","code":""},{"path":"/reference/VI_MODEL-cash-gen_lineup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generating random values from the expression of y, and forms a lineup — VI_MODEL$gen_lineup","text":"n Integer. Number observations. k Integer. Number plots lineup. Default k = 20. pos Integer. Position true data plot. Default pos = NULL, means position random. computed List. Default NULL. provided, random variables random closed form expression use values list, makes expression potentially deterministic. function, actual data plot use computed values.","code":""},{"path":"/reference/VI_MODEL-cash-gen_lineup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generating random values from the expression of y, and forms a lineup — VI_MODEL$gen_lineup","text":"data frame.","code":""},{"path":"/reference/VI_MODEL-cash-gen_lineup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generating random values from the expression of y, and forms a lineup — VI_MODEL$gen_lineup","text":"","code":"# Instantiate x <- bandicoot::rand_uniform() e <- bandicoot::rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  test$gen_lineup(10, k = 3) #>              y          x           e        .resid   .fitted test_name #> 1   1.97831879 0.61652512 -0.01830956  0.0715446121 1.9067742    F-test #> 2   3.75634876 0.79223268  1.33648346  1.3872547396 2.3690940    F-test #> 3   0.03009393 0.30895030 -1.37430666 -1.0673926609 1.0974866    F-test #> 4   2.04806017 0.78072131 -0.34218691 -0.2907452600 2.3388054    F-test #> 5   2.20966300 0.94189034 -0.61938475 -0.5532086539 2.7628717    F-test #> 6   2.53442604 0.48681937  0.81061358  0.9689322659 1.5654938    F-test #> 7  -0.13357949 0.08634694 -1.22738223 -0.6453544937 0.5117750    F-test #> 8   1.23274091 0.72129803 -1.00882797 -0.9497106153 2.1824515    F-test #> 9   1.39641781 0.28505445  0.03010731  0.3618057220 1.0346121    F-test #> 10  1.37071500 0.14033988  0.21067983  0.7168743442 0.6538407    F-test #> 11  3.80008230 0.61652512 -0.01830956  1.8933081201 1.9067742    F-test #> 12  2.82996208 0.79223268  1.33648346  0.4608680643 2.3690940    F-test #> 13  0.91916037 0.30895030 -1.37430666 -0.1783262278 1.0974866    F-test #> 14  2.59885437 0.78072131 -0.34218691  0.2600489472 2.3388054    F-test #> 15  1.87419812 0.94189034 -0.61938475 -0.8886735286 2.7628717    F-test #> 16  0.66030270 0.48681937  0.81061358 -0.9051910732 1.5654938    F-test #> 17  1.04374793 0.08634694 -1.22738223  0.5319729193 0.5117750    F-test #> 18  1.85730141 0.72129803 -1.00882797 -0.3251501096 2.1824515    F-test #> 19  0.37886182 0.28505445  0.03010731 -0.6557502668 1.0346121    F-test #> 20  0.46073381 0.14033988  0.21067983 -0.1931068449 0.6538407    F-test #> 21  3.04478979 0.61652512 -0.01830956  1.1380156114 1.9067742    F-test #> 22  1.38322259 0.79223268  1.33648346 -0.9858714230 2.3690940    F-test #> 23 -0.12270455 0.30895030 -1.37430666 -1.2201911487 1.0974866    F-test #> 24  1.52121117 0.78072131 -0.34218691 -0.8175942551 2.3388054    F-test #> 25  2.85828890 0.94189034 -0.61938475  0.0954172537 2.7628717    F-test #> 26  1.56640341 0.48681937  0.81061358  0.0009096339 1.5654938    F-test #> 27  0.85318721 0.08634694 -1.22738223  0.3414122051 0.5117750    F-test #> 28  3.37286879 0.72129803 -1.00882797  1.1904172657 2.1824515    F-test #> 29  1.58838969 0.28505445  0.03010731  0.5537776089 1.0346121    F-test #> 30  0.35754791 0.14033988  0.21067983 -0.2962927517 0.6538407    F-test #>     statistic   p_value k  null #> 1  0.28179742 0.6119446 1 FALSE #> 2  0.28179742 0.6119446 1 FALSE #> 3  0.28179742 0.6119446 1 FALSE #> 4  0.28179742 0.6119446 1 FALSE #> 5  0.28179742 0.6119446 1 FALSE #> 6  0.28179742 0.6119446 1 FALSE #> 7  0.28179742 0.6119446 1 FALSE #> 8  0.28179742 0.6119446 1 FALSE #> 9  0.28179742 0.6119446 1 FALSE #> 10 0.28179742 0.6119446 1 FALSE #> 11 0.16227172 0.6990925 2  TRUE #> 12 0.16227172 0.6990925 2  TRUE #> 13 0.16227172 0.6990925 2  TRUE #> 14 0.16227172 0.6990925 2  TRUE #> 15 0.16227172 0.6990925 2  TRUE #> 16 0.16227172 0.6990925 2  TRUE #> 17 0.16227172 0.6990925 2  TRUE #> 18 0.16227172 0.6990925 2  TRUE #> 19 0.16227172 0.6990925 2  TRUE #> 20 0.16227172 0.6990925 2  TRUE #> 21 0.08710795 0.7764483 3  TRUE #> 22 0.08710795 0.7764483 3  TRUE #> 23 0.08710795 0.7764483 3  TRUE #> 24 0.08710795 0.7764483 3  TRUE #> 25 0.08710795 0.7764483 3  TRUE #> 26 0.08710795 0.7764483 3  TRUE #> 27 0.08710795 0.7764483 3  TRUE #> 28 0.08710795 0.7764483 3  TRUE #> 29 0.08710795 0.7764483 3  TRUE #> 30 0.08710795 0.7764483 3  TRUE  test$gen_lineup(10, k = 3, computed = list(e = 1:10)) #>            y  e         x     .resid  .fitted test_name   statistic   p_value k #> 1   2.875610  1 0.5609478 -4.1166625 6.992273    F-test 0.759854067 0.4122713 1 #> 2   4.450793  2 0.8041444 -2.0368791 6.487672    F-test 0.759854067 0.4122713 1 #> 3   4.292265  3 0.2363865 -3.3734298 7.665695    F-test 0.759854067 0.4122713 1 #> 4   6.893648  4 0.9641201  0.7379045 6.155743    F-test 0.759854067 0.4122713 1 #> 5   6.376433  5 0.2914755 -1.1749592 7.551393    F-test 0.759854067 0.4122713 1 #> 6   7.123133  6 0.1108464 -0.8030409 7.926174    F-test 0.759854067 0.4122713 1 #> 7   8.449844  7 0.3365667  0.9920097 7.457834    F-test 0.759854067 0.4122713 1 #> 8  10.394094  8 0.7822225  3.8609377 6.533157    F-test 0.759854067 0.4122713 1 #> 9  10.224434  9 0.1887914  2.4599850 7.764449    F-test 0.759854067 0.4122713 1 #> 10 11.222101 10 0.1870960  3.4541347 7.767966    F-test 0.759854067 0.4122713 1 #> 11  4.443471  1 0.5609478 -2.5488017 6.992273    F-test 0.008563755 0.9288614 2 #> 12  9.699152  2 0.8041444  3.2114800 6.487672    F-test 0.008563755 0.9288614 2 #> 13  8.466203  3 0.2363865  0.8005081 7.665695    F-test 0.008563755 0.9288614 2 #> 14  4.500816  4 0.9641201 -1.6549271 6.155743    F-test 0.008563755 0.9288614 2 #> 15  3.555449  5 0.2914755 -3.9959436 7.551393    F-test 0.008563755 0.9288614 2 #> 16  6.741293  6 0.1108464 -1.1848815 7.926174    F-test 0.008563755 0.9288614 2 #> 17 10.305749  7 0.3365667  2.8479146 7.457834    F-test 0.008563755 0.9288614 2 #> 18  6.720272  8 0.7822225  0.1871154 6.533157    F-test 0.008563755 0.9288614 2 #> 19 12.133252  9 0.1887914  4.3688032 7.764449    F-test 0.008563755 0.9288614 2 #> 20  5.736699 10 0.1870960 -2.0312674 7.767966    F-test 0.008563755 0.9288614 2 #> 21  6.747079  1 0.5609478 -0.2451933 6.992273    F-test 0.339809041 0.5782268 3 #> 22 10.479868  2 0.8041444  3.9921965 6.487672    F-test 0.339809041 0.5782268 3 #> 23  9.737411  3 0.2363865  2.0717159 7.665695    F-test 0.339809041 0.5782268 3 #> 24  4.443528  4 0.9641201 -1.7122151 6.155743    F-test 0.339809041 0.5782268 3 #> 25  1.759998  5 0.2914755 -5.7913951 7.551393    F-test 0.339809041 0.5782268 3 #> 26 11.039306  6 0.1108464  3.1131322 7.926174    F-test 0.339809041 0.5782268 3 #> 27  6.205631  7 0.3365667 -1.2522032 7.457834    F-test 0.339809041 0.5782268 3 #> 28  6.339118  8 0.7822225 -0.1940390 6.533157    F-test 0.339809041 0.5782268 3 #> 29  8.429232  9 0.1887914  0.6647835 7.764449    F-test 0.339809041 0.5782268 3 #> 30  7.121184 10 0.1870960 -0.6467824 7.767966    F-test 0.339809041 0.5782268 3 #>     null #> 1  FALSE #> 2  FALSE #> 3  FALSE #> 4  FALSE #> 5  FALSE #> 6  FALSE #> 7  FALSE #> 8  FALSE #> 9  FALSE #> 10 FALSE #> 11  TRUE #> 12  TRUE #> 13  TRUE #> 14  TRUE #> 15  TRUE #> 16  TRUE #> 17  TRUE #> 18  TRUE #> 19  TRUE #> 20  TRUE #> 21  TRUE #> 22  TRUE #> 23  TRUE #> 24  TRUE #> 25  TRUE #> 26  TRUE #> 27  TRUE #> 28  TRUE #> 29  TRUE #> 30  TRUE"},{"path":"/reference/VI_MODEL-cash-null_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the null model — VI_MODEL$null_formula","title":"Formula for fitting the null model — VI_MODEL$null_formula","text":"quoted formula, used fit null model.","code":""},{"path":"/reference/VI_MODEL-cash-null_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the null model — VI_MODEL$null_formula","text":"","code":"# Instantiate x <- bandicoot::rand_uniform() e <- bandicoot::rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  # A formula with environment equals to `test` test$null_formula #> y ~ x  # By default, `fit` use the null formula test$fit(test$gen(10)) #>  #> Call: #> stats::lm(formula = y ~ x, data = test$gen(10)) #>  #> Coefficients: #> (Intercept)            x   #>      0.6142       3.2237   #>   # F-test also needs to use the null model test$test(test$gen(1000)) #> $name #> [1] \"F-test\" #>  #> $statistic #> [1] 9.974211 #>  #> $p_value #> [1] 0.00163521 #>"},{"path":"/reference/VI_MODEL-cash-null_resid.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate null residuals from a null model — VI_MODEL$null_resid","title":"Generate null residuals from a null model — VI_MODEL$null_resid","text":"function uses data null model generate null residuals. null residuals generated first regressing random noises original regressors, multiply obtained residuals original RSS divided current RSS. results null residuals.","code":""},{"path":"/reference/VI_MODEL-cash-null_resid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate null residuals from a null model — VI_MODEL$null_resid","text":"dat Data frame. data frame used fit model. mod Linear Model. null model. test Boolean. Whether use test newly generated data.","code":""},{"path":"/reference/VI_MODEL-cash-null_resid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate null residuals from a null model — VI_MODEL$null_resid","text":"data frame updated y, .resid, potentially updated test result.","code":""},{"path":"/reference/VI_MODEL-cash-null_resid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate null residuals from a null model — VI_MODEL$null_resid","text":"","code":"# Instantiate x <- bandicoot::rand_uniform() e <- bandicoot::rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  dat <- test$gen(10) test$null_resid(dat, test$fit(dat), test = TRUE) #>             y         x          e     .resid   .fitted test_name statistic #> 1   0.3841529 0.9250762 -1.1077686 -1.7281457 2.1122986    F-test  8.038622 #> 2   2.6727162 0.6669570  0.4548497  0.8904106 1.7823056    F-test  8.038622 #> 3   2.1171344 0.4328945 -0.1152415  0.6340664 1.4830679    F-test  8.038622 #> 4   1.4941924 0.5663277 -0.1264968 -0.1594635 1.6536559    F-test  8.038622 #> 5   1.5994652 0.6483429 -1.0584279 -0.1590432 1.7585084    F-test  8.038622 #> 6   2.6546703 0.7283732 -0.2298564  0.7938471 1.8608232    F-test  8.038622 #> 7   0.9033055 0.5170331 -0.1009147 -0.6873295 1.5906351    F-test  8.038622 #> 8   2.5958717 0.4664493 -1.8754391  1.0699056 1.5259661    F-test  8.038622 #> 9   2.0154023 0.4968939  1.6961392  0.4505143 1.5648880    F-test  8.038622 #> 10 -0.1496480 0.0199312 -0.2096574 -1.1047621 0.9551141    F-test  8.038622 #>       p_value null #> 1  0.02521581 TRUE #> 2  0.02521581 TRUE #> 3  0.02521581 TRUE #> 4  0.02521581 TRUE #> 5  0.02521581 TRUE #> 6  0.02521581 TRUE #> 7  0.02521581 TRUE #> 8  0.02521581 TRUE #> 9  0.02521581 TRUE #> 10 0.02521581 TRUE"},{"path":"/reference/VI_MODEL-cash-plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the fitted model — VI_MODEL$plot","title":"Plot the fitted model — VI_MODEL$plot","text":"function generates plot fitted model.","code":""},{"path":"/reference/VI_MODEL-cash-plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the fitted model — VI_MODEL$plot","text":"dat Data frame. data frame containing correspoding variables. type Character. \"resid\": VI_MODEL$plot_resid. Default type = \"resid\". theme ggtheme. ggplot theme object. alpha Numeric. Alpha dot. Value 0 1. Default 1. size Numeric. Size dot. Value 0 1. Default 0.5. remove_axis Boolean. Whether remove axis. Default remove_axis = FALSE. remove_legend Boolean. Whether remove legend. Default remove_legend = FALSE. remove_grid_line Boolean. Whether remove grid lines. Default remove_grid_line = FALSE. add_zero_line Boolean. Whether add zero horizontal line. Default add_zero_line = TRUE.","code":""},{"path":"/reference/VI_MODEL-cash-plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the fitted model — VI_MODEL$plot","text":"ggplot.","code":""},{"path":"/reference/VI_MODEL-cash-plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the fitted model — VI_MODEL$plot","text":"","code":"# Instantiate x <- bandicoot::rand_uniform() e <- bandicoot::rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + 10 * x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  # Residual plot of the null model test$plot(test$gen(1000, fit_model = TRUE), type = \"resid\")   # Customize the plot test$plot(test$gen(1000, fit_model = TRUE),           type = \"resid\",           theme = ggplot2::theme_light(),           remove_axis = TRUE,           remove_grid_line = TRUE,           add_zero_line = TRUE)"},{"path":"/reference/VI_MODEL-cash-plot_lineup.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the lineup — VI_MODEL$plot_lineup","title":"Plot the lineup — VI_MODEL$plot_lineup","text":"function plots lineup.","code":""},{"path":"/reference/VI_MODEL-cash-plot_lineup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the lineup — VI_MODEL$plot_lineup","text":"dat Data frame. data frame containing correspoding variables. type Character. \"resid\": VI_MODEL$plot_resid. Default type = \"resid\". ... Arguments passed VI_MODEL$plot","code":""},{"path":"/reference/VI_MODEL-cash-plot_lineup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the lineup — VI_MODEL$plot_lineup","text":"ggplot.","code":""},{"path":"/reference/VI_MODEL-cash-plot_lineup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the lineup — VI_MODEL$plot_lineup","text":"","code":"# Instantiate x <- bandicoot::rand_uniform() e <- bandicoot::rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + 10 * x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  # Lineup of residual plots test$plot_lineup(test$gen_lineup(100), type = \"resid\")   # Customize the plot test$plot_lineup(test$gen_lineup(100),                  type = \"resid\",                  theme = ggplot2::theme_light(),                  remove_axis = TRUE,                  remove_grid_line = TRUE,                  add_zero_line = TRUE)"},{"path":"/reference/VI_MODEL-cash-plot_qq.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the residual Q-Q plot — VI_MODEL$plot_qq","title":"Plot the residual Q-Q plot — VI_MODEL$plot_qq","text":"function generate Q-Q plot residuals.","code":""},{"path":"/reference/VI_MODEL-cash-plot_qq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the residual Q-Q plot — VI_MODEL$plot_qq","text":"dat Data frame. data frame containing .resid.","code":""},{"path":"/reference/VI_MODEL-cash-plot_qq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the residual Q-Q plot — VI_MODEL$plot_qq","text":"ggplot.","code":""},{"path":"/reference/VI_MODEL-cash-plot_qq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the residual Q-Q plot — VI_MODEL$plot_qq","text":"","code":"# Instantiate x <- bandicoot::rand_uniform() e <- bandicoot::rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + 10 * x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  # Residual plot of the null model test$plot_qq(test$gen(1000, fit_model = TRUE))"},{"path":"/reference/VI_MODEL-cash-plot_resid.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the residuals vs fitted values plot — VI_MODEL$plot_resid","title":"Plot the residuals vs fitted values plot — VI_MODEL$plot_resid","text":"function generate residuals vs fitted values plot.","code":""},{"path":"/reference/VI_MODEL-cash-plot_resid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the residuals vs fitted values plot — VI_MODEL$plot_resid","text":"dat Data frame. data frame containing .resid .fitted. alpha Numeric. Alpha dot. Value 0 1. size Numeric. Size dot. Value 0 1. Default 0.5.","code":""},{"path":"/reference/VI_MODEL-cash-plot_resid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the residuals vs fitted values plot — VI_MODEL$plot_resid","text":"ggplot.","code":""},{"path":"/reference/VI_MODEL-cash-plot_resid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the residuals vs fitted values plot — VI_MODEL$plot_resid","text":"","code":"# Instantiate x <- bandicoot::rand_uniform() e <- bandicoot::rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + 10 * x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  # Residual plot of the null model test$plot_resid(test$gen(1000, fit_model = TRUE))"},{"path":"/reference/VI_MODEL-cash-prm.html","id":null,"dir":"Reference","previous_headings":"","what":"List of parameters — VI_MODEL$prm","title":"List of parameters — VI_MODEL$prm","text":"list, initialized instance built.","code":""},{"path":"/reference/VI_MODEL-cash-prm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of parameters — VI_MODEL$prm","text":"","code":"# Instantiate x <- bandicoot::rand_uniform() e <- bandicoot::rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e) test$prm #> $x #>  #> ── <RAND_UNIFORM object> #> [a: 0, b: 1]  #>  #> $e #>  #> ── <RAND_NORMAL object> #> [mu: 0, sigma: 1]  #>  #> $y #>  #> ── <CLOSED_FORM object> #> EXPR = 1 + x + x^2 + e #>  - x: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1]  #>"},{"path":"/reference/VI_MODEL-cash-prm_type.html","id":null,"dir":"Reference","previous_headings":"","what":"List of parameter types — VI_MODEL$prm_type","title":"List of parameter types — VI_MODEL$prm_type","text":"list, initialized instance built. \"r\" stands random variable closed form used expression y, \"o\" stands others. value affects string representation object. variable part expression y, labelled \"o\". variable part expression y, random variable closed form expression, labelled \"o\" well.","code":""},{"path":"/reference/VI_MODEL-cash-prm_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of parameter types — VI_MODEL$prm_type","text":"","code":"# Instantiate x <- bandicoot::rand_uniform() e <- bandicoot::rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e) test$prm_type #> $x #> [1] \"r\" #>  #> $e #> [1] \"r\" #>"},{"path":"/reference/VI_MODEL-cash-rss.html","id":null,"dir":"Reference","previous_headings":"","what":"Residual sum of square of a fitted model — VI_MODEL$rss","title":"Residual sum of square of a fitted model — VI_MODEL$rss","text":"function returns residual sum square fitted model.","code":""},{"path":"/reference/VI_MODEL-cash-rss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Residual sum of square of a fitted model — VI_MODEL$rss","text":"Numeric value.","code":""},{"path":"/reference/VI_MODEL-cash-rss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Residual sum of square of a fitted model — VI_MODEL$rss","text":"","code":"# Instantiate x <- bandicoot::rand_uniform() e <- bandicoot::rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  test$rss(test$fit(test$gen(100))) #> [1] 97.44813"},{"path":"/reference/VI_MODEL-cash-set_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Set formula for y, null model or alternative model — VI_MODEL$set_formula","title":"Set formula for y, null model or alternative model — VI_MODEL$set_formula","text":"function store formula environment, drops attributes. recommended modify formula y instance built, may create confusion.","code":""},{"path":"/reference/VI_MODEL-cash-set_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set formula for y, null model or alternative model — VI_MODEL$set_formula","text":"... Formulas. Formulas names.","code":""},{"path":"/reference/VI_MODEL-cash-set_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set formula for y, null model or alternative model — VI_MODEL$set_formula","text":"Return object .","code":""},{"path":"/reference/VI_MODEL-cash-set_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set formula for y, null model or alternative model — VI_MODEL$set_formula","text":"","code":"# Instantiate x <- bandicoot::rand_uniform() e <- bandicoot::rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  test$set_formula(alt_formula = y ~ x + I(x^3)) #>  #> ── <VI_MODEL object> #> y = 1 + x + x^2 + e #>  - x: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1]  test$alt_formula #> y ~ x + I(x^3)"},{"path":"/reference/VI_MODEL-cash-set_prm.html","id":null,"dir":"Reference","previous_headings":"","what":"Set parameter for the model — VI_MODEL$set_prm","title":"Set parameter for the model — VI_MODEL$set_prm","text":"function store values environment update values closed form expression y. However, parameter directly used closed form expression, user override method correctly set parameter.","code":""},{"path":"/reference/VI_MODEL-cash-set_prm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set parameter for the model — VI_MODEL$set_prm","text":"prm_name List Vector. Parameter character names. prm_val List Vector. Parameter values.","code":""},{"path":"/reference/VI_MODEL-cash-set_prm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set parameter for the model — VI_MODEL$set_prm","text":"Return object .","code":""},{"path":"/reference/VI_MODEL-cash-set_prm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set parameter for the model — VI_MODEL$set_prm","text":"","code":"# Instantiate x <- bandicoot::rand_uniform() e <- bandicoot::rand_normal() test <- vi_model(prm = list(a = 1, x = x, e = e),                  prm_type = list(a = \"o\", x = \"r\", e = \"r\"),                  formula = y ~ 1 + a * x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  test #>  #> ── <VI_MODEL object> #> y = 1 + a * x + x^2 + e #>  - x: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #>  - a: 1   test$set_prm(\"a\", 2) #>  #> ── <VI_MODEL object> #> y = 1 + a * x + x^2 + e #>  - x: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #>  - a: 2   test #>  #> ── <VI_MODEL object> #> y = 1 + a * x + x^2 + e #>  - x: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #>  - a: 2"},{"path":"/reference/VI_MODEL-cash-test.html","id":null,"dir":"Reference","previous_headings":"","what":"Test the null model against the alternative model — VI_MODEL$test","title":"Test the null model against the alternative model — VI_MODEL$test","text":"function test null model alternative model. class, test F-test computed using stats::anova. Derived classes may test procedures.","code":""},{"path":"/reference/VI_MODEL-cash-test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test the null model against the alternative model — VI_MODEL$test","text":"dat Data frame. data frame containing variables needed null_formula alt_formula. null_formula Formula. Formula fitting null model. Default null_formula = self$null_formula. alt_formula Formula. Formula fitting alternative model. Default alt_formula = self$alt_formula.","code":""},{"path":"/reference/VI_MODEL-cash-test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test the null model against the alternative model — VI_MODEL$test","text":"list containing test name, test statistic p-value.","code":""},{"path":"/reference/VI_MODEL-cash-test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test the null model against the alternative model — VI_MODEL$test","text":"","code":"# Instantiate x <- bandicoot::rand_uniform() e <- bandicoot::rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))   dat <- test$gen(100000) test$test(dat) #> $name #> [1] \"F-test\" #>  #> $statistic #> [1] 568.0262 #>  #> $p_value #> [1] 3.37991e-125 #>   test$test(dat, alt_formula = y ~ x + I(x^3)) #> $name #> [1] \"F-test\" #>  #> $statistic #> [1] 557.2089 #>  #> $p_value #> [1] 7.393664e-123 #>"},{"path":"/reference/VI_MODEL.html","id":null,"dir":"Reference","previous_headings":"","what":"VI_MODEL class environment — VI_MODEL","title":"VI_MODEL class environment — VI_MODEL","text":"base class visual inference linear model, inherited BASE.","code":""},{"path":"/reference/VI_MODEL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"VI_MODEL class environment — VI_MODEL","text":"","code":"VI_MODEL"},{"path":"/reference/VI_MODEL.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"VI_MODEL class environment — VI_MODEL","text":"environment S3 class visage_oop.","code":""},{"path":[]},{"path":"/reference/calc_p_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate p-value for a visual test — calc_p_value","title":"Calculate p-value for a visual test — calc_p_value","text":"function calculate p-value visual test. null distribution simulated using function sim_dist(). p-value probability number detections greater equal observed value.","code":""},{"path":"/reference/calc_p_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate p-value for a visual test — calc_p_value","text":"","code":"calc_p_value(   n_detect,   n_eval,   n_sel,   n_plot = 20,   n_sim = 50000,   cache_env = NULL )"},{"path":"/reference/calc_p_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate p-value for a visual test — calc_p_value","text":"n_detect Integer. Observed value number detections. n_eval Integer. Number evaluations. n_sel Integer. vector number selections. n_plot Integer. Number plots lineup. n_sim Integer. Number simulations draws. cache_env Environment. provided environment caching.","code":""},{"path":"/reference/calc_p_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate p-value for a visual test — calc_p_value","text":"numeric value representing p-value.","code":""},{"path":"/reference/calc_p_value.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate p-value for a visual test — calc_p_value","text":"encouraged provide cache environment boost performance function needs reused. cache environment remember result corresponding combinations n_eval n_sim.","code":""},{"path":"/reference/calc_p_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate p-value for a visual test — calc_p_value","text":"","code":"calc_p_value(2, 3, c(1,1,2)) #> [1] 0.01508 calc_p_value(1, 1, c(1)) #> [1] 0.05066"},{"path":"/reference/calc_p_value_comb.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate p-value for all combinations of evaluations of a lineup. — calc_p_value_comb","title":"Calculate p-value for all combinations of evaluations of a lineup. — calc_p_value_comb","text":"function calculate p-value combinations evaluations given desired number evaluations. lineup evaluated \\(K\\) subjects, combinations \\(K\\) evaluations, taken \\(X\\) time generated, \\(X\\) desired number evaluations.","code":""},{"path":"/reference/calc_p_value_comb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate p-value for all combinations of evaluations of a lineup. — calc_p_value_comb","text":"","code":"calc_p_value_comb(   detected,   n_eval,   n_sel,   n_plot = 20,   n_sim = 50000,   cache_env = NULL )"},{"path":"/reference/calc_p_value_comb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate p-value for all combinations of evaluations of a lineup. — calc_p_value_comb","text":"detected Boolean. vector Boolean values indicating whether lineup detected subjects. n_eval Integer. Desired number evaluations. n_sel Integer. vector number selections. n_plot Integer. Number plots lineup. n_sim Integer. Number simulation draws. cache_env Environment. provided environment caching.","code":""},{"path":"/reference/calc_p_value_comb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate p-value for all combinations of evaluations of a lineup. — calc_p_value_comb","text":"vector p-value combination matrix attribute.","code":""},{"path":"/reference/calc_p_value_comb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate p-value for all combinations of evaluations of a lineup. — calc_p_value_comb","text":"encouraged provide cache environment boost performance function needs reused. cache environment remember result corresponding combinations n_eval n_sim.","code":""},{"path":[]},{"path":"/reference/calc_p_value_comb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate p-value for all combinations of evaluations of a lineup. — calc_p_value_comb","text":"","code":"calc_p_value_comb(c(TRUE, FALSE, TRUE), 2, c(1, 1, 2)) #> [1] 0.09740 0.00626 0.14642 #> attr(,\"combinations\") #>      [,1] [,2] [,3] #> [1,]    1    1    2 #> [2,]    2    3    3 calc_p_value_comb(c(TRUE, FALSE), 1, c(1, 1)) #> [1] 0.0484 1.0000 #> attr(,\"combinations\") #>      [,1] [,2] #> [1,]    1    2"},{"path":"/reference/calc_p_value_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate p-value for multiple lineups. — calc_p_value_multi","title":"Calculate p-value for multiple lineups. — calc_p_value_multi","text":"function calculates p-value multiple lineups using function calc_p_value(). comb = TRUE, function calc_p_value_comb() used instead.","code":""},{"path":"/reference/calc_p_value_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate p-value for multiple lineups. — calc_p_value_multi","text":"","code":"calc_p_value_multi(   dat,   lineup_id = \"lineup_id\",   detected = \"detected\",   n_sel = \"n_sel\",   comb = FALSE,   n_eval = 1,   replace_0 = TRUE,   replace_full = TRUE,   n_plot = 20,   n_sim = 50000,   cache_env = NULL )"},{"path":"/reference/calc_p_value_multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate p-value for multiple lineups. — calc_p_value_multi","text":"dat Data.frame/Tibble. data.frame tibble. lineup_id Character. Column name ids lineup. detected Character. Column name whether lineup detected subject. n_sel Character. Column name number selections. comb Boolean. Whether compute combinations. See also calc_p_value_comb(). n_eval Integer. vector desired number evaluations. used comb = TRUE. replace_0 Boolean. Whether give treatment evaluations number selections equal 0. replace_full Boolean. Whether give treatment evaluations number selections equal number plots. n_plot Integer. Number plots. n_sim Integer. Number simulation draws. cache_env Environment. provided environment caching.","code":""},{"path":"/reference/calc_p_value_multi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate p-value for multiple lineups. — calc_p_value_multi","text":"comb = TRUE, function returns tiible columns lineup_id p_value, p_value list vectors. comb = FALSE, p_value column vector.","code":""},{"path":"/reference/calc_p_value_multi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate p-value for multiple lineups. — calc_p_value_multi","text":"encouraged provide cache environment boost performance. cache environment remember result corresponding combinations n_eval n_sim. replace_0 replace_full can turned set evaluations 0 full selections false detection one selection.","code":""},{"path":"/reference/calc_p_value_multi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate p-value for multiple lineups. — calc_p_value_multi","text":"","code":"dat <- data.frame(lineup_id = c(1,1,2),                   detected = c(TRUE, FALSE, TRUE),                   n_sel = c(1,1,2)) calc_p_value_multi(dat, comb = TRUE, n_eval = 1:2) #> # A tibble: 3 × 4 #>   lineup_id p_value   n_eval total_eval #>       <dbl> <list>     <int>      <int> #> 1         1 <dbl [2]>      1          2 #> 2         2 <dbl [1]>      1          1 #> 3         1 <dbl [1]>      2          2 calc_p_value_multi(dat) #> # A tibble: 2 × 2 #>   lineup_id p_value #>       <dbl>   <dbl> #> 1         1  0.0974 #> 2         2  0.102"},{"path":"/reference/eval_p_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate test for given p-value and significance level — eval_p_value","title":"Evaluate test for given p-value and significance level — eval_p_value","text":"function reject null hypothesis p-value smaller given significance level plus tolerance.","code":""},{"path":"/reference/eval_p_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate test for given p-value and significance level — eval_p_value","text":"","code":"eval_p_value(p_value, significance_level = 0.05, tol = 1e-06)"},{"path":"/reference/eval_p_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate test for given p-value and significance level — eval_p_value","text":"p_value Numeric. vector p-values. significance_level Numeric. significance level. tol Numeric. Tolerance.","code":""},{"path":"/reference/eval_p_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate test for given p-value and significance level — eval_p_value","text":"vector Boolean values indicating whether null hypotheses rejected.","code":""},{"path":"/reference/eval_p_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate test for given p-value and significance level — eval_p_value","text":"","code":"eval_p_value(c(0.05, 0.0501), 0.05, 1e-3) #> [1] TRUE TRUE eval_p_value(c(0.05, 0.0501), 0.05, 1e-5) #> [1]  TRUE FALSE"},{"path":"/reference/portal.html","id":null,"dir":"Reference","previous_headings":"","what":"Portals to class instantiate methods — portal","title":"Portals to class instantiate methods — portal","text":"functions class$instantiate.","code":""},{"path":"/reference/portal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Portals to class instantiate methods — portal","text":"","code":"vi_model(..., env = new.env(parent = parent.frame()))  cubic_model(..., env = new.env(parent = parent.frame()))  simple_cubic_model(..., env = new.env(parent = parent.frame()))  quartic_model(..., env = new.env(parent = parent.frame()))  poly_model(..., env = new.env(parent = parent.frame()))  heter_model(..., env = new.env(parent = parent.frame()))"},{"path":"/reference/portal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Portals to class instantiate methods — portal","text":"... Arguments passed init method. env Environment. instance environment.","code":""},{"path":"/reference/portal.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Portals to class instantiate methods — portal","text":"vi_model: VI_MODEL cubic_model: CUBIC_MODEL simple_cubic_model: SIMPLE_CUBIC_MODEL quartic_model: QUARTIC_MODEL poly_model: POLY_MODEL heter_model: HETER_MODEL","code":""},{"path":"/reference/sim_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Approximate the distribution of number of detections of a lineup with simulation — sim_dist","title":"Approximate the distribution of number of detections of a lineup with simulation — sim_dist","text":"function approximate distribution number detections lineup given number evaluations, selections evaluation plots lineup.","code":""},{"path":"/reference/sim_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Approximate the distribution of number of detections of a lineup with simulation — sim_dist","text":"","code":"sim_dist(n_eval, n_sel, n_plot = 20, n_sim = 50000)"},{"path":"/reference/sim_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Approximate the distribution of number of detections of a lineup with simulation — sim_dist","text":"n_eval Integer. Number evaluations. n_sel Integer. vector number selections. n_plot Integer. Number plots lineup. n_sim Integer. Number simulations draws.","code":""},{"path":"/reference/sim_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Approximate the distribution of number of detections of a lineup with simulation — sim_dist","text":"named vector representing probability mass function distribution.","code":""},{"path":"/reference/sim_dist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Approximate the distribution of number of detections of a lineup with simulation — sim_dist","text":"given lineup, plots assumed weights \\(W_i, = 1, ..., N,\\) \\(N\\) number plots, \\(W_i\\) follows uniform distribution independently. draw, weights lineup simulated. , evaluation draw, function sample number plots number selection evaluation using simulated weights without replacement. Finally, distribution occurrences plot 1 draw approximated distribution number detections lineup.","code":""},{"path":"/reference/sim_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Approximate the distribution of number of detections of a lineup with simulation — sim_dist","text":"","code":"sim_dist(3, c(2,2,3)) #>       0       1       2       3  #> 0.69960 0.25364 0.04414 0.00262  sim_dist(1, c(1)) #>       0       1  #> 0.94948 0.05052"}]
