[{"path":"https://tengmcing.github.io/visage/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 visage authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://tengmcing.github.io/visage/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Weihao Li. Author, maintainer.","code":""},{"path":"https://tengmcing.github.io/visage/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Li W (2023). visage: Visual Inference Linear Regression Diagnostics. https://tengmcing.github.io/visage/, https://github.com/TengMCing/visage/.","code":"@Manual{,   title = {visage: Visual Inference for Linear Regression Diagnostics},   author = {Weihao Li},   year = {2023},   note = {https://tengmcing.github.io/visage/, https://github.com/TengMCing/visage/}, }"},{"path":"https://tengmcing.github.io/visage/index.html","id":"visage","dir":"","previous_headings":"","what":"Visual Inference for Linear Regression Diagnostics","title":"Visual Inference for Linear Regression Diagnostics","text":"goal visage provide set tools running visual inference experiments linear regression models.","code":""},{"path":"https://tengmcing.github.io/visage/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Visual Inference for Linear Regression Diagnostics","text":"development version GitHub :","code":"# install.packages(\"remotes\") remotes::install_url(\"https://github.com/TengMCing/visage/raw/master/built/visage_0.1.1.tar.gz\") library(visage)"},{"path":"https://tengmcing.github.io/visage/index.html","id":"table-of-content","dir":"","previous_headings":"","what":"Table of Content","title":"Visual Inference for Linear Regression Diagnostics","text":"Visual inference cubic linear model class CUBIC_MODEL Visual inference heteroskedasticity linear model class HETER_MODEL Closed form expression CLOSED_FORM","code":""},{"path":"https://tengmcing.github.io/visage/index.html","id":"id_1-visual-inference-cubic-linear-model-class-cubic_model","dir":"","previous_headings":"","what":"1. Visual inference cubic linear model class CUBIC_MODEL","title":"Visual Inference for Linear Regression Diagnostics","text":"1.1. Define model visual inference cubic linear model defined : x z random variables, , b c parameters e random error term. cubic_model() cubic model class constructor, takes arguments , b, c, sigma, x z, first four numeric values defined , x z random variable instances created random variable abstract base class constructor rand_var(). like x z uniform random variables ranged −1 1, can achieved using uniform random variable class constructor rand_uniform(). takes two arguments lower bound upper bound support. 1.2. Generate random values model instance cubic model class contains methods simulating data making residual plot. Method gen() returns data frame containing realizations x, z, y e simulated model. number realizations depends integer argument n. addition, null model fitted using simulated data residuals fitted values included returned data frame. null model defined : Generates five realizations model: 1.3. Make residual plot Method plot() produce ggplot object. takes data frame containing columns .resid .fitted input, along character argument type indicating type data plot, aesthetic arguments size alpha control appearance plot.  1.4. Make lineup lineup matrix residual plots can produced using methods gen_lineup() plot_lineup(). Method gen_lineup() takes number realizations n number plots lineup k inputs. , method plot_lineup() user interface plot(). Generate lineup consists 2 plots 8 realizations: Plot lineup consists 20 plots 300 realizations:","code":"CUBIC_MODEL$formula #> y ~ 1 + (2 - c) * x + c * z + a * (((2 - c) * x)^2 + (c * z)^2) +  #>     b * (((2 - c) * x)^3 + (c * z)^3) + e mod <- cubic_model(a = -3, b = -3, c = 1, sigma = 1,                    x = rand_uniform(-1, 1), z = rand_uniform(-1, 1)) mod #>  #> ── <CUBIC_MODEL object> #> y = 1 + (2 - c) * x + c * z + a * (((2 - c) * x)^2 + (c * z)^2) + b * (((2 - c) * x)^3 + (c * z)^3) + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - z: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #> Parameters: #>  - a: -3 #>  - b: -3 #>  - c: 1 #>  - sigma: 1 CUBIC_MODEL$null_formula #> y ~ x + z mod$gen(n = 5) #>            y            x          z          e     .resid    .fitted #> 1 -1.4823094 -0.381315470  0.7835510  0.6703734  1.4061902 -2.8884996 #> 2  0.7120971 -0.002402515 -0.6769199  0.8355626  1.2155014 -0.5034043 #> 3  0.6104170  0.336467392 -0.9973950  0.7330245 -1.1286155  1.7390325 #> 4 -5.7280040 -0.531081537  0.9129219 -1.9302331 -1.8470815 -3.8809225 #> 5 -1.1488316 -0.175382074  0.7953012  0.7139479  0.3540055 -1.5028370 mod$plot(mod$gen(n = 100), type = \"resid\", size = 1) mod$gen_lineup(n = 8, k = 2) #>             y          x          z           e     .resid    .fitted test_name #> 1  -4.2741053  0.2173978  0.9730634 -0.68735752 -1.2616429 -3.0124624    F-test #> 2   0.3409917  0.3259869  0.1603458 -0.63311304  2.7012045 -2.3602128    F-test #> 3  -2.2637457  0.6595516 -0.0492654 -1.70135289  0.4888987 -2.7526444    F-test #> 4  -1.8939956  0.7051014 -0.6626419  0.05110670  0.2995834 -2.1935790    F-test #> 5  -2.2726905  0.6581385 -0.7364619 -0.61090733 -0.2426241 -2.0300664    F-test #> 6  -1.0466662 -0.8312880  0.2628276 -0.86674354 -0.7025174 -0.3441488    F-test #> 7  -1.2840775 -0.5223657  0.8456534  1.74326999  0.2375345 -1.5216119    F-test #> 8  -4.2859657  0.9472303 -0.5407787 -0.04810181 -1.5204367 -2.7655289    F-test #> 9  -3.2561988  0.2173978  0.9730634 -0.68735752 -0.2437364 -3.0124624    F-test #> 10 -2.4902247  0.3259869  0.1603458 -0.63311304 -0.1300119 -2.3602128    F-test #> 11 -2.4092319  0.6595516 -0.0492654 -1.70135289  0.3434125 -2.7526444    F-test #> 12 -4.8687212  0.7051014 -0.6626419  0.05110670 -2.6751422 -2.1935790    F-test #> 13 -1.6497602  0.6581385 -0.7364619 -0.61090733  0.3803062 -2.0300664    F-test #> 14  0.3631987 -0.8312880  0.2628276 -0.86674354  0.7073476 -0.3441488    F-test #> 15 -1.9029286 -0.5223657  0.8456534  1.74326999 -0.3813167 -1.5216119    F-test #> 16 -0.7663880  0.9472303 -0.5407787 -0.04810181  1.9991409 -2.7655289    F-test #>     statistic    p_value k  null #> 1  1445.40416 0.01972441 2 FALSE #> 2  1445.40416 0.01972441 2 FALSE #> 3  1445.40416 0.01972441 2 FALSE #> 4  1445.40416 0.01972441 2 FALSE #> 5  1445.40416 0.01972441 2 FALSE #> 6  1445.40416 0.01972441 2 FALSE #> 7  1445.40416 0.01972441 2 FALSE #> 8  1445.40416 0.01972441 2 FALSE #> 9    20.24929 0.16497676 1  TRUE #> 10   20.24929 0.16497676 1  TRUE #> 11   20.24929 0.16497676 1  TRUE #> 12   20.24929 0.16497676 1  TRUE #> 13   20.24929 0.16497676 1  TRUE #> 14   20.24929 0.16497676 1  TRUE #> 15   20.24929 0.16497676 1  TRUE #> 16   20.24929 0.16497676 1  TRUE mod$plot_lineup(mod$gen_lineup(n = 300, k = 20), type = \"resid\", alpha = 0.6)"},{"path":"https://tengmcing.github.io/visage/index.html","id":"id_2-visual-inference-heteroskedasticity-linear-model-class-heter_model","dir":"","previous_headings":"","what":"2. Visual inference heteroskedasticity linear model class HETER_MODEL","title":"Visual Inference for Linear Regression Diagnostics","text":"visual inference heteroskedasticity linear model defined : x random variables, , b parameters e random error term. Similar cubic model, heteroskedasticity model built heteroskedasticity model class constructor heter_model(). function takes three arguments inputs, , b x. b numeric parameters defined . x needs random variable object. Since cubic model class CUBIC_MODEL heteroskedasticity model class HETER_MODEL inherited visual inference model class VI_MODEL, heteroskedasticity model object can used similar way cubic model object. following codes give examples use object.","code":"HETER_MODEL$formula #> y ~ 1 + x + sqrt(1 + (2 - abs(a)) * (x - a)^2 * b) * e mod <- heter_model(a = 0, b = 16, x = rand_uniform(-1, 1))  mod #>  #> ── <HETER_MODEL object> #> y = 1 + x + sqrt(1 + (2 - abs(a)) * (x - a)^2 * b) * e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #> Parameters: #>  - a: 0 #>  - b: 16 mod$gen(n = 5) #>            y          x           e     .resid    .fitted #> 1 -1.7982441 -0.7046938 -0.50939638 -2.5840225  0.7857784 #> 2  7.4223277 -0.7233512  1.69637874  6.6008776  0.8214500 #> 3 -1.9015359  0.3384022 -1.50014613 -0.6929879 -1.2085480 #> 4 -0.8498885 -0.9935263 -0.15001515 -2.1878943  1.3380058 #> 5  0.0101072 -0.8931431 -0.01878493 -1.1359729  1.1460801 mod$plot(mod$gen(n = 300), type = \"resid\", size = 1) mod$plot_lineup(mod$gen_lineup(n = 300), alpha = 0.6)"},{"path":"https://tengmcing.github.io/visage/index.html","id":"id_3-closed-form-expression-closed_form","dir":"","previous_headings":"","what":"3. Closed form expression CLOSED_FORM","title":"Visual Inference for Linear Regression Diagnostics","text":"3.1. Define evaluate closed form expression “Closed form expression” defined special type R expression can replace random variables expression realizations evaluation. may sound confusing, let’s look examples. closed_form() closed form expression constructor, takes one arguments expr required formula. Considering simplest case first, expression contains zero random variables, 1 + 3. can evaluated using method compute() directly typical R expression. However, closed form expression contains random variables, can evaluated directly since values random variables unknown. following example, x uniform random variable ranged -1 1, x + 1 expression can evaluated method compute(). case, gen() method try generate n realizations random variables, evaluate expression. addition, rhs_val = TRUE, realizations generated random variables returned. 3.2. Nested closed form expression Nested closed form expression useful hierarchical structure present expression. Consider following statistical model: y = x + e, x uniform random variable ranged -1 1, e = 1 + x^2 * z, z standard normal random variable. can define model using following code: Note y depends e e closed form expression. y e depend x. method gen() return values x, z e rhs_val = TRUE. 3.3. Turn gen() result dataframe via method as_dataframe() Results gen() either vector list, can converted dataframe via method as_dataframe(). lhs argument naming left hand side result closed form expression. 3.4. Current limitiation CLOSED_FORM closed_form(), simple expressions can provided, long symbols exist current environment. Note function tries evaluate atomic symbols expression initialization, store values object. Hence, calls like $b also decomposed $, b, b interpreted variable b exists current environment. Therefore, use ~[[\"b\"]] instead ~$b. pre-define function like myfun = function() 1, use expression ~myfun().","code":"cf <- closed_form(~1 + 3) cf #>  #> ── <CLOSED_FORM object> #> EXPR = 1 + 3 cf$compute() #> [1] 4 x <- rand_uniform(-1, 1) cf <- closed_form(~1 + x) cf$gen(n = 5, rhs_val = TRUE) #> $lhs #> [1] 1.1733333 1.4757701 1.1004389 1.0628132 0.2765408 #>  #> $rhs #> $rhs$x #> [1]  0.17333326  0.47577013  0.10043886  0.06281325 -0.72345923 z <- rand_normal(mu = 0, sigma = 1) x <- rand_uniform(-1, 1) e <- closed_form(~1 + x^2 * z) y <- closed_form(~x + e) y #>  #> ── <CLOSED_FORM object> #> EXPR = x + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <CLOSED_FORM object> #>    EXPR = 1 + x^2 * z #>     - x: <RAND_UNIFORM object> #>       [a: -1, b: 1] #>     - z: <RAND_NORMAL object> #>       [mu: 0, sigma: 1] y$gen(n = 5, rhs_val = TRUE) #> $lhs #> [1] 1.3171537 0.1137230 1.2278964 1.1174784 0.7516698 #>  #> $rhs #> $rhs$x #> [1]  0.5882566 -0.8464125  0.1883570  0.4431485 -0.3737404 #>  #> $rhs$z #> [1] -0.78343075 -0.05564446  1.11446630 -1.65836192  0.89782735 #>  #> $rhs$e #> [1] 0.7288970 0.9601355 1.0395394 0.6743300 1.1254102 y$as_dataframe(y$gen(n = 5, rhs_val = TRUE), lhs = \"y\") #>           y           x          z           e #> 1 0.4047076 -0.42104891 -0.9828596  0.82575651 #> 2 0.9381029 -0.06229928  0.1036231  1.00040218 #> 3 0.8623083 -0.51855076  1.4163862  1.38085902 #> 4 0.7050461  0.73734006 -1.8987498 -0.03229397 #> 5 0.8528809 -0.98482490  0.8637210  1.83770580"},{"path":"https://tengmcing.github.io/visage/reference/AR1_MODEL-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — AR1_MODEL$..init..","title":"Initialization method — AR1_MODEL$..init..","text":"function called instance built. User input stored environment. response variable model y. formula y defined AR1_MODEL$formula, null formula defined AR1_MODEL$null_formula, alternative defined AR1_MODEL$alt_formula.","code":""},{"path":"https://tengmcing.github.io/visage/reference/AR1_MODEL-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — AR1_MODEL$..init..","text":"phi Numeric. parameter AR(1) term. Default phi = 0.5. sigma Positive numeric. Default sigma = 1. x Random variable closed form expression. Default x = rand_uniform(-1, 1, env = new.env(parent = parent.env(self))). e Random variable closed form expression. Default e = rand_normal(0, sigma, env = new.env(parent = parent.env(self))).","code":""},{"path":"https://tengmcing.github.io/visage/reference/AR1_MODEL-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — AR1_MODEL$..init..","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/AR1_MODEL-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — AR1_MODEL$..init..","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal(sigma = 0.5)  test <- ar1_model(phi = 0.9, x = x, e = e)  test #>  #> ── <AR1_MODEL object> #> y = ar1(1 + x + e, phi) #>  - x: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #> Parameters: #>  - phi: 0.9 #>  - sigma: 1   # Generate data test$gen(10) #>             y          x           e     .resid  .fitted #> 1   0.9515714 0.01900064 -0.06742919 -2.3450383 3.296610 #> 2   1.5320467 0.10367271 -0.42804027 -2.2749914 3.807038 #> 3   3.1601084 0.64518137  0.13608499 -3.9113047 7.071413 #> 4   4.0636998 0.25642605 -0.03682387 -0.6641808 4.727881 #> 5   5.4010314 0.33007560  0.41362599  0.2291694 5.171862 #> 6   6.1758538 0.35774475 -0.04281922  0.8371939 5.338660 #> 7   6.7367907 0.62049175 -0.44196939 -0.1857860 6.922577 #> 8   8.6023001 0.83620571  0.70298273  0.3793355 8.222965 #> 9   9.1609523 0.10560614  0.31327610  5.3422589 3.818693 #> 10 10.0362274 0.70680258  0.08456777  2.5933434 7.442884  # Generate lineup test$gen_lineup(10, k = 3) #> Error in match.arg(type): 'arg' should be one of “Box-Pierce”, “Ljung-Box”  # Plot the lineup test$plot_lineup(test$gen_lineup(100)) #> Error in match.arg(type): 'arg' should be one of “Box-Pierce”, “Ljung-Box”  test <- ar1_model(phi = 0.1, x = x, e = e) test$plot_lineup(test$gen_lineup(100)) #> Error in match.arg(type): 'arg' should be one of “Box-Pierce”, “Ljung-Box”  test <- ar1_model(phi = 0.3, x = x, e = e) test$plot_lineup(test$gen_lineup(100)) #> Error in match.arg(type): 'arg' should be one of “Box-Pierce”, “Ljung-Box”  test <- ar1_model(phi = 0.5, x = x, e = e) test$plot_lineup(test$gen_lineup(100)) #> Error in match.arg(type): 'arg' should be one of “Box-Pierce”, “Ljung-Box”  test <- ar1_model(phi = 0.7, x = x, e = e) test$plot_lineup(test$gen_lineup(100)) #> Error in match.arg(type): 'arg' should be one of “Box-Pierce”, “Ljung-Box”"},{"path":"https://tengmcing.github.io/visage/reference/AR1_MODEL.html","id":null,"dir":"Reference","previous_headings":"","what":"AR1_MODEL class environment — AR1_MODEL","title":"AR1_MODEL class environment — AR1_MODEL","text":"class visual inference orthogonal polynomial linear model, inherited VI_MODEL.","code":""},{"path":"https://tengmcing.github.io/visage/reference/AR1_MODEL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AR1_MODEL class environment — AR1_MODEL","text":"","code":"AR1_MODEL"},{"path":"https://tengmcing.github.io/visage/reference/AR1_MODEL.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"AR1_MODEL class environment — AR1_MODEL","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — CLOSED_FORM$..init..","title":"Initialization method — CLOSED_FORM$..init..","text":"function called instance built. User input stored environment. simple expressions can provided, long symbols exist current environment. Note function tries evaluate atomic symbols expression initialization, store values object. Hence, calls like $b also decomposed $, b, b interpreted variable \"b\" exists current environment. Therefore, use ~[[\"b\"]] instead ~$b. pre-define function like myfun = function() 1, use expression ~myfun().  Random variables replaced returns gen method, typically vectors.  Inner closed form expressions hierarchical closed form expression also replaced returns gen method.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — CLOSED_FORM$..init..","text":"expr Formula. right hand side last ~ kept final expression.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — CLOSED_FORM$..init..","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — CLOSED_FORM$..init..","text":"","code":"# Constant variable a <- 1  # Random uniform variable b <- rand_uniform()  # Define a closed form expression cf <- closed_form(~3 * (exp(a) + b))  cf #>  #> ── <CLOSED_FORM object> #> EXPR = 3 * (exp(a) + b) #>  - b: <RAND_UNIFORM object> #>    [a: 0, b: 1]   d <- rand_normal()  # Define a closed form expression with another closed form expression cf2 <- closed_form(~cf + 3 * d)  cf2 #>  #> ── <CLOSED_FORM object> #> EXPR = cf + 3 * d #>  - cf: <CLOSED_FORM object> #>    EXPR = 3 * (exp(a) + b) #>     - b: <RAND_UNIFORM object> #>       [a: 0, b: 1] #>  - d: <RAND_NORMAL object> #>    [mu: 0, sigma: 1]"},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-..len...html","id":null,"dir":"Reference","previous_headings":"","what":"Length of the object — CLOSED_FORM$..len..","title":"Length of the object — CLOSED_FORM$..len..","text":"function recursively count symbols stored closed form expression nested closed form expression.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-..len...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Length of the object — CLOSED_FORM$..len..","text":"integer.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-..len...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Length of the object — CLOSED_FORM$..len..","text":"","code":"test <- closed_form(~1+1) test$..len..() #> [1] 1"},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-..str...html","id":null,"dir":"Reference","previous_headings":"","what":"String representation of the object — CLOSED_FORM$..str..","title":"String representation of the object — CLOSED_FORM$..str..","text":"function returns string representation object.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-..str...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"String representation of the object — CLOSED_FORM$..str..","text":"string.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-..str...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"String representation of the object — CLOSED_FORM$..str..","text":"","code":"CLOSED_FORM$..str..() #> [1] \"<CLOSED_FORM class>\"  test <- closed_form(~1+1) test$..str..() #> [1] \"<CLOSED_FORM object>\\n EXPR = 1 + 1\""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-as_dataframe.html","id":null,"dir":"Reference","previous_headings":"","what":"Transforming list to data frame — CLOSED_FORM$as_dataframe","title":"Transforming list to data frame — CLOSED_FORM$as_dataframe","text":"function transforms result generated gen data frame.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-as_dataframe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transforming list to data frame — CLOSED_FORM$as_dataframe","text":"dat Vector List. Results generated gen method. lhs Character. name expression. Default \".lhs\".","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-as_dataframe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transforming list to data frame — CLOSED_FORM$as_dataframe","text":"data frame.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-as_dataframe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transforming list to data frame — CLOSED_FORM$as_dataframe","text":"","code":"# Constant variable a <- 1  # Random uniform variable b <- rand_uniform()  # Define a closed form expression cf <- closed_form(~3 * (exp(a) + b))  # Generate data result1 <- cf$gen(10)  cf$as_dataframe(result1) #>         .lhs #> 1  10.228240 #> 2   9.547561 #> 3  11.057295 #> 4   9.127090 #> 5   9.346991 #> 6  10.937322 #> 7  10.507607 #> 8  10.836989 #> 9   8.176374 #> 10 10.708859  # Generate data and keep the RHS result2 <- cf$gen(10, rhs_val = TRUE)  # Specify the name cf$as_dataframe(result2, lhs = \"y\") #>            y          b #> 1   8.632832 0.15932887 #> 2  10.147190 0.66411496 #> 3   8.748423 0.19785905 #> 4   9.576169 0.47377465 #> 5  10.474165 0.77310643 #> 6   8.412033 0.08572925 #> 7   9.157261 0.33413839 #> 8   8.834989 0.22671455 #> 9   9.504720 0.44995801 #> 10 10.614718 0.81995758"},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-ast.html","id":null,"dir":"Reference","previous_headings":"","what":"Abstract syntax tree of the expression — CLOSED_FORM$ast","title":"Abstract syntax tree of the expression — CLOSED_FORM$ast","text":"function returns abstract syntax tree exrpession","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-ast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abstract syntax tree of the expression — CLOSED_FORM$ast","text":"expr Language. quoted expression.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-ast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Abstract syntax tree of the expression — CLOSED_FORM$ast","text":"list.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-ast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Abstract syntax tree of the expression — CLOSED_FORM$ast","text":"","code":"CLOSED_FORM$ast(quote(a + b)) #> [[1]] #> `+` #>  #> [[2]] #> a #>  #> [[3]] #> b #>  CLOSED_FORM$ast(quote(exp(a) + b^2)) #> [[1]] #> `+` #>  #> [[2]] #> [[2]][[1]] #> exp #>  #> [[2]][[2]] #> a #>  #>  #> [[3]] #> [[3]][[1]] #> `^` #>  #> [[3]][[2]] #> b #>  #> [[3]][[3]] #> [1] 2 #>  #>"},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-compute.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the expression without generating any random values — CLOSED_FORM$compute","title":"Compute the expression without generating any random values — CLOSED_FORM$compute","text":"function computes deterministic expression.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-compute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the expression without generating any random values — CLOSED_FORM$compute","text":"Numeric value.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-compute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the expression without generating any random values — CLOSED_FORM$compute","text":"","code":"test <- closed_form(~1+mean(c(1,2,3))) test$compute() #> [1] 3"},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-expr.html","id":null,"dir":"Reference","previous_headings":"","what":"Expression extracted from the provided formula — CLOSED_FORM$expr","title":"Expression extracted from the provided formula — CLOSED_FORM$expr","text":"language object.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-expr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expression extracted from the provided formula — CLOSED_FORM$expr","text":"","code":"# Constant variable a <- 1  # Random uniform variable b <- rand_uniform()  # Define a closed form expression cf <- closed_form(omit~omit~3 * (exp(a) + b))  # Only the right hand side of the last `~` will be kept cf$expr #> 3 * (exp(a) + b)  d <- rand_normal()  # Define a closed form expression with another closed form expression cf2 <- closed_form(~cf + 3 * d)  cf2$expr #> cf + 3 * d"},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-gen.html","id":null,"dir":"Reference","previous_headings":"","what":"Generating random values from the expression — CLOSED_FORM$gen","title":"Generating random values from the expression — CLOSED_FORM$gen","text":"function generates random values expression. Random values closed form expression share value long name.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-gen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generating random values from the expression — CLOSED_FORM$gen","text":"n Integer. Number observations. rhs_val Boolean. Whether keep right hand side values expression. Default FALSE. computed List. Default NULL. provided, random variables random closed form expression use values list, makes expression potentially deterministic.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-gen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generating random values from the expression — CLOSED_FORM$gen","text":"Numeric values.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-gen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generating random values from the expression — CLOSED_FORM$gen","text":"","code":"# Constant variable a <- 1  # Random uniform variable b <- rand_uniform()  # Define a closed form expression cf <- closed_form(~3 * (exp(a) + b))  # Generate 5 values cf$gen(5) #> [1] 9.025952 9.006486 8.686820 9.064382 9.624908  # Generate 5 values, and keep RHS cf$gen(5, rhs_val = TRUE) #> $lhs #> [1]  9.689161  8.161639 10.021806 10.296185  8.792739 #>  #> $rhs #> $rhs$b #> [1] 0.51143860 0.00226467 0.62232006 0.71377975 0.21263121 #>  #>   d <- rand_normal()  # Define a closed form expression with another closed form expression cf2 <- closed_form(~cf + 3 * d)  # Generate 5 values cf2$gen(5) #> [1]  7.289884 10.847694 11.801906  7.806618 10.038594  # Generate 5 values, and keep RHS cf2$gen(5, rhs_val = TRUE) #> $lhs #> [1]  1.888998 11.707233  8.190652  8.005405 11.628381 #>  #> $rhs #> $rhs$b #> [1] 0.31838138 0.84764663 0.07206554 0.69952794 0.14146297 #>  #> $rhs$cf #> [1]  9.109990 10.697785  8.371042 10.253429  8.579234 #>  #> $rhs$d #> [1] -2.40699727  0.33648257 -0.06013018 -0.74934151  1.01638213 #>  #>   # Define a closed form expression with two random variables of the same name cf3 <- closed_form(~d + d)  # Both `d` will share the same values cf3$gen(5, rhs_val = TRUE) #> $lhs #> [1] -3.71423355  2.45187191 -0.46534391 -1.69692250 -0.02546444 #>  #> $rhs #> $rhs$d #> [1] -1.85711677  1.22593595 -0.23267196 -0.84846125 -0.01273222 #>  #>   # Define a closed form expression with two closed form expressions of the same name cf4 <- closed_form(~cf3 + cf3)  # Both `cf3` will share the same values, both `d` will share the same values as well cf4$gen(5, rhs_val = TRUE) #> $lhs #> [1]  9.1466890 -3.8513348 -0.8938031  1.5021936  1.5214328 #>  #> $rhs #> $rhs$d #> [1]  2.2866722 -0.9628337 -0.2234508  0.3755484  0.3803582 #>  #> $rhs$cf3 #> [1]  4.5733445 -1.9256674 -0.4469016  0.7510968  0.7607164 #>  #>   # Define a closed form expression with two different closed form expressions, # but contains same random variables cf5 <- closed_form(~cf3 + cf4)  # Both `d` in `cf3` and `cf4` will share the same value cf5$gen(5, rhs_val = TRUE) #> $lhs #> [1]  3.130342  7.451691  9.046918  7.158485 -7.172244 #>  #> $rhs #> $rhs$d #> [1]  0.5217237  1.2419485  1.5078196  1.1930808 -1.1953740 #>  #> $rhs$cf3 #> [1]  1.043447  2.483897  3.015639  2.386162 -2.390748 #>  #> $rhs$cf4 #> [1]  2.086895  4.967794  6.031278  4.772323 -4.781496 #>  #>   # Control the value of `d` cf5$gen(5, rhs_val = TRUE, computed = list(d = 1)) #> $lhs #> [1] 6 #>  #> $rhs #> $rhs$d #> [1] 1 #>  #> $rhs$cf3 #> [1] 2 #>  #> $rhs$cf4 #> [1] 4 #>  #>"},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-set_expr.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the closed form expression — CLOSED_FORM$set_expr","title":"Set the closed form expression — CLOSED_FORM$set_expr","text":"function updates closed form expression. update symbol values. updating symbol values, please check CLOSED_FORM$set_sym.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-set_expr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the closed form expression — CLOSED_FORM$set_expr","text":"expr Formula. right hand side last ~ kept final expression.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-set_expr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the closed form expression — CLOSED_FORM$set_expr","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-set_expr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the closed form expression — CLOSED_FORM$set_expr","text":"","code":"# Constant variable a <- 1  # Random uniform variable z <- closed_form(~2 + a)  z$compute() #> [1] 3  # Update the expression z$set_expr(~2 - a)  z$compute() #> [1] 1"},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-set_sym.html","id":null,"dir":"Reference","previous_headings":"","what":"Set values for symbols — CLOSED_FORM$set_sym","title":"Set values for symbols — CLOSED_FORM$set_sym","text":"function stores user inputs updated values symbols. List symbol names symbol types updated automatically. protection values modified, may lead error loss binding objects. Please use function caution.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-set_sym.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set values for symbols — CLOSED_FORM$set_sym","text":"sym_name Vector List. sequence character symbol names. sym_value Vector List. sequence symbol values.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-set_sym.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set values for symbols — CLOSED_FORM$set_sym","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-set_sym.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set values for symbols — CLOSED_FORM$set_sym","text":"","code":"# Constant variable a <- 1  # Random uniform variable z <- closed_form(~2 + a)  z$compute() #> [1] 3  # Update value for \"a\" z$set_sym(\"a\", 3)  z$compute() #> [1] 5  # Update value for \"+\" z$set_sym(\"+\", list(function(a, b) a * b))  z$compute() #> [1] 6"},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-sym.html","id":null,"dir":"Reference","previous_headings":"","what":"List of symbols in the abstract syntax tree of the expression — CLOSED_FORM$sym","title":"List of symbols in the abstract syntax tree of the expression — CLOSED_FORM$sym","text":"list, initialized instance built.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-sym.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of symbols in the abstract syntax tree of the expression — CLOSED_FORM$sym","text":"","code":"# Constant variable a <- 1  # Random uniform variable b <- rand_uniform()  # Define a closed form expression cf <- closed_form(~3 * (exp(a) + b))  cf #>  #> ── <CLOSED_FORM object> #> EXPR = 3 * (exp(a) + b) #>  - b: <RAND_UNIFORM object> #>    [a: 0, b: 1]   # Get the list of symbols cf$sym #> $`*` #> function (e1, e2)  .Primitive(\"*\") #>  #> $`(` #> .Primitive(\"(\") #>  #> $`+` #> function (e1, e2)  .Primitive(\"+\") #>  #> $exp #> function (x)  .Primitive(\"exp\") #>  #> $a #> [1] 1 #>  #> $b #>  #> ── <RAND_UNIFORM object> #> [a: 0, b: 1]  #>   # Get the list of symbol names cf$sym_name #> [[1]] #> [1] \"*\" #>  #> [[2]] #> [1] \"(\" #>  #> [[3]] #> [1] \"+\" #>  #> [[4]] #> [1] \"exp\" #>  #> [[5]] #> [1] \"a\" #>  #> [[6]] #> [1] \"b\" #>   # Get the list of symbol types cf$sym_type #> $`*` #> [1] \"other\" #>  #> $`(` #> [1] \"other\" #>  #> $`+` #> [1] \"other\" #>  #> $exp #> [1] \"other\" #>  #> $a #> [1] \"other\" #>  #> $b #> [1] \"rand_var or closed_form\" #>   d <- rand_normal()  # Define a closed form expression with another closed form expression cf2 <- closed_form(~cf + 3 * d)  cf2 #>  #> ── <CLOSED_FORM object> #> EXPR = cf + 3 * d #>  - cf: <CLOSED_FORM object> #>    EXPR = 3 * (exp(a) + b) #>     - b: <RAND_UNIFORM object> #>       [a: 0, b: 1] #>  - d: <RAND_NORMAL object> #>    [mu: 0, sigma: 1]   # Get the list of symbols, constants are not counted as symbols cf2$sym #> $`+` #> function (e1, e2)  .Primitive(\"+\") #>  #> $cf #>  #> ── <CLOSED_FORM object> #> EXPR = 3 * (exp(a) + b) #>  - b: <RAND_UNIFORM object> #>    [a: 0, b: 1]  #>  #> $`*` #> function (e1, e2)  .Primitive(\"*\") #>  #> $d #>  #> ── <RAND_NORMAL object> #> [mu: 0, sigma: 1]  #>   # Get the list of symbol names cf2$sym_name #> [[1]] #> [1] \"+\" #>  #> [[2]] #> [1] \"cf\" #>  #> [[3]] #> [1] \"*\" #>  #> [[4]] #> [1] \"d\" #>   # Get the list of symbol types cf$sym_type #> $`*` #> [1] \"other\" #>  #> $`(` #> [1] \"other\" #>  #> $`+` #> [1] \"other\" #>  #> $exp #> [1] \"other\" #>  #> $a #> [1] \"other\" #>  #> $b #> [1] \"rand_var or closed_form\" #>"},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-sym_name.html","id":null,"dir":"Reference","previous_headings":"","what":"List of symbol names in the abstract syntax tree of the expression — CLOSED_FORM$sym_name","title":"List of symbol names in the abstract syntax tree of the expression — CLOSED_FORM$sym_name","text":"list, initialized instance built.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-sym_type.html","id":null,"dir":"Reference","previous_headings":"","what":"List of symbol types in the abstract syntax tree of the expression — CLOSED_FORM$sym_type","title":"List of symbol types in the abstract syntax tree of the expression — CLOSED_FORM$sym_type","text":"list, initialized instance built.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM.html","id":null,"dir":"Reference","previous_headings":"","what":"CLOSED_FORM class environment — CLOSED_FORM","title":"CLOSED_FORM class environment — CLOSED_FORM","text":"base class closed form expression, inherited bandicoot::BASE.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CLOSED_FORM class environment — CLOSED_FORM","text":"","code":"CLOSED_FORM"},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CLOSED_FORM class environment — CLOSED_FORM","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — CUBIC_MODEL$..init..","title":"Initialization method — CUBIC_MODEL$..init..","text":"function called instance built. User input stored environment. response variable model y. formula y defined CUBIC_MODEL$formula, null formula defined CUBIC_MODEL$null_formula, alternative defined CUBIC_MODEL$alt_formula.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — CUBIC_MODEL$..init..","text":"Numeric. Default = 1. b Numeric. Default b = 1. c Numeric. Default c = 1. sigma Positive numeric. Default sigma = 1. x Random variable closed form expression. Default x = rand_uniform(-1, 1, env = new.env(parent = parent.env(self))). z Random variable closed form expression. Default z = rand_uniform(-1, 1, env = new.env(parent = parent.env(self))). e Random variable closed form expression. Default e = rand_normal(0, sigma, env = new.env(parent = parent.env(self))).","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — CUBIC_MODEL$..init..","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — CUBIC_MODEL$..init..","text":"","code":"# Instantiate x <- rand_uniform() z <- rand_uniform() e <- rand_normal()  test <- cubic_model(a = 200, b = 200, c = 1, x = x, z = z, e = e)  test #>  #> ── <CUBIC_MODEL object> #> y = 1 + (2 - c) * x + c * z + a * (((2 - c) * x)^2 + (c * z)^2) + b * (((2 - c) * x)^3 + (c * z)^3) + e #>  - x: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - z: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #> Parameters: #>  - a: 200 #>  - b: 200 #>  - c: 1 #>  - sigma: 1   # Generate data test$gen(10) #>             y          x         z           e     .resid  .fitted #> 1  142.261912 0.50613202 0.4635440  0.23195582 -66.925513 209.1874 #> 2  290.318543 0.14852255 0.8733548 -2.55009678  -3.880668 294.1992 #> 3  350.623812 0.61950183 0.7900710  0.43012355 -43.509727 394.1335 #> 4  534.580165 0.84462647 0.8526638 -0.69666013  45.140550 489.4396 #> 5    6.660578 0.04072794 0.1335064  1.10036207  87.643775 -80.9832 #> 6  153.678911 0.32775041 0.6198681 -1.27667090 -75.585953 229.2649 #> 7  584.973574 0.79517564 0.9541092 -0.56985678  62.991878 521.9817 #> 8  323.493326 0.21486282 0.9018162  0.82060968  -3.440864 326.9342 #> 9  173.308391 0.65581186 0.3266761  0.58069824 -16.387581 189.6960 #> 10 442.258050 0.42121073 0.9893733 -0.04571533  13.954104 428.3039  # Generate lineup test$gen_lineup(10, k = 3) #>            y          x          z          e     .resid   .fitted test_name #> 1   36.24446 0.23011326 0.30207653 -2.0781075 -11.337853  47.58231    F-test #> 2  370.38420 0.78813454 0.66124136  0.5204272 -34.782762 405.16696    F-test #> 3  212.07907 0.01767204 0.77138057 -0.5777430  36.104331 175.97474    F-test #> 4  357.89635 0.85754417 0.51425928  2.2306483  -8.093742 365.99010    F-test #> 5  551.61866 0.76828639 0.93756790 -0.4757793  32.982394 518.63627    F-test #> 6  457.98661 0.69734395 0.87949402 -0.4314085  -9.771313 467.75792    F-test #> 7   82.45019 0.30156060 0.44287898  0.4315099 -52.301848 134.75204    F-test #> 8  170.50860 0.70162816 0.07838648 -0.1328384  50.879395 119.62921    F-test #> 9  431.00046 0.88238663 0.64117824  0.4085165   0.672237 430.32822    F-test #> 10 138.68686 0.62520825 0.19502245  0.7223721  -4.350839 143.03770    F-test #> 11  94.22715 0.23011326 0.30207653 -2.0781075  46.644835  47.58231    F-test #> 12 389.24929 0.78813454 0.66124136  0.5204272 -15.917668 405.16696    F-test #> 13 145.90705 0.01767204 0.77138057 -0.5777430 -30.067686 175.97474    F-test #> 14 367.16545 0.85754417 0.51425928  2.2306483   1.175358 365.99010    F-test #> 15 532.01487 0.76828639 0.93756790 -0.4757793  13.378599 518.63627    F-test #> 16 435.87184 0.69734395 0.87949402 -0.4314085 -31.886077 467.75792    F-test #> 17 153.35819 0.30156060 0.44287898  0.4315099  18.606148 134.75204    F-test #> 18  74.53132 0.70162816 0.07838648 -0.1328384 -45.097885 119.62921    F-test #> 19 478.29653 0.88238663 0.64117824  0.4085165  47.968312 430.32822    F-test #> 20 138.23377 0.62520825 0.19502245  0.7223721  -4.803935 143.03770    F-test #> 21  73.03134 0.23011326 0.30207653 -2.0781075  25.449029  47.58231    F-test #> 22 459.13155 0.78813454 0.66124136  0.5204272  53.964594 405.16696    F-test #> 23 153.36176 0.01767204 0.77138057 -0.5777430 -22.612982 175.97474    F-test #> 24 320.36488 0.85754417 0.51425928  2.2306483 -45.625214 365.99010    F-test #> 25 489.50304 0.76828639 0.93756790 -0.4757793 -29.133229 518.63627    F-test #> 26 465.65637 0.69734395 0.87949402 -0.4314085  -2.101550 467.75792    F-test #> 27 149.51801 0.30156060 0.44287898  0.4315099  14.765970 134.75204    F-test #> 28  93.16773 0.70162816 0.07838648 -0.1328384 -26.461481 119.62921    F-test #> 29 466.27908 0.88238663 0.64117824  0.4085165  35.950858 430.32822    F-test #> 30 138.84171 0.62520825 0.19502245  0.7223721  -4.195994 143.03770    F-test #>       statistic      p_value k  null #> 1  2016.6763772 1.791589e-05 3 FALSE #> 2  2016.6763772 1.791589e-05 3 FALSE #> 3  2016.6763772 1.791589e-05 3 FALSE #> 4  2016.6763772 1.791589e-05 3 FALSE #> 5  2016.6763772 1.791589e-05 3 FALSE #> 6  2016.6763772 1.791589e-05 3 FALSE #> 7  2016.6763772 1.791589e-05 3 FALSE #> 8  2016.6763772 1.791589e-05 3 FALSE #> 9  2016.6763772 1.791589e-05 3 FALSE #> 10 2016.6763772 1.791589e-05 3 FALSE #> 11    4.5409905 1.220741e-01 1  TRUE #> 12    4.5409905 1.220741e-01 1  TRUE #> 13    4.5409905 1.220741e-01 1  TRUE #> 14    4.5409905 1.220741e-01 1  TRUE #> 15    4.5409905 1.220741e-01 1  TRUE #> 16    4.5409905 1.220741e-01 1  TRUE #> 17    4.5409905 1.220741e-01 1  TRUE #> 18    4.5409905 1.220741e-01 1  TRUE #> 19    4.5409905 1.220741e-01 1  TRUE #> 20    4.5409905 1.220741e-01 1  TRUE #> 21    0.7775372 6.067149e-01 2  TRUE #> 22    0.7775372 6.067149e-01 2  TRUE #> 23    0.7775372 6.067149e-01 2  TRUE #> 24    0.7775372 6.067149e-01 2  TRUE #> 25    0.7775372 6.067149e-01 2  TRUE #> 26    0.7775372 6.067149e-01 2  TRUE #> 27    0.7775372 6.067149e-01 2  TRUE #> 28    0.7775372 6.067149e-01 2  TRUE #> 29    0.7775372 6.067149e-01 2  TRUE #> 30    0.7775372 6.067149e-01 2  TRUE  # Plot the lineup test$plot_lineup(test$gen_lineup(100))"},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-E.html","id":null,"dir":"Reference","previous_headings":"","what":"Expectation of the residuals — CUBIC_MODEL$E","title":"Expectation of the residuals — CUBIC_MODEL$E","text":"function calculate expectation residuals use Frisch–Waugh–Lovell theorem.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-E.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expectation of the residuals — CUBIC_MODEL$E","text":"dat Dataframe/List. List contains variable x z. Numeric. Default = self$prm$. b Numeric. Default b = self$prm$b. c Numeric. Default c = self$prm$c.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-E.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expectation of the residuals — CUBIC_MODEL$E","text":"vector numeric expectations.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-E.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expectation of the residuals — CUBIC_MODEL$E","text":"","code":"mod <- cubic_model(-1, 1, 1, 0.5) dat <- mod$gen(1000, fit_model = TRUE) dat$exp <- mod$E(dat) mod$plot(dat) + ggplot2::geom_point(ggplot2::aes(.fitted, exp),                                     col = \"red\",                                     alpha = 0.6)"},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-alt_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the alternative model — CUBIC_MODEL$alt_formula","title":"Formula for fitting the alternative model — CUBIC_MODEL$alt_formula","text":"Quoted formula fitting alternative model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-alt_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the alternative model — CUBIC_MODEL$alt_formula","text":"","code":"CUBIC_MODEL$alt_formula #> y ~ x + I(x^2) + I(x^3) + z + I(z^2) + I(z^3)"},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Closed form expression of y — CUBIC_MODEL$formula","title":"Closed form expression of y — CUBIC_MODEL$formula","text":"quoted formula, passed CLOSED_FORM$instantiate define closed form expression y.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Closed form expression of y — CUBIC_MODEL$formula","text":"","code":"CUBIC_MODEL$formula #> y ~ 1 + (2 - c) * x + c * z + a * (((2 - c) * x)^2 + (c * z)^2) +  #>     b * (((2 - c) * x)^3 + (c * z)^3) + e"},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-null_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the null model — CUBIC_MODEL$null_formula","title":"Formula for fitting the null model — CUBIC_MODEL$null_formula","text":"Quoted formula fitting null model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-null_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the null model — CUBIC_MODEL$null_formula","text":"","code":"CUBIC_MODEL$null_formula #> y ~ x + z"},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-sample_effect_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the sample baased effect size of the simulated data — CUBIC_MODEL$sample_effect_size","title":"Compute the sample baased effect size of the simulated data — CUBIC_MODEL$sample_effect_size","text":"function computes sample based effect size simulated data.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-sample_effect_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the sample baased effect size of the simulated data — CUBIC_MODEL$sample_effect_size","text":"dat Dataframe/List. List contains variable x z. Numeric. Default = self$prm$. b Numeric. Default b = self$prm$b. c Numeric. Default c = self$prm$c. sigma Positive numeric. Default sigma = self$prm$sigma.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-sample_effect_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the sample baased effect size of the simulated data — CUBIC_MODEL$sample_effect_size","text":"numeric value.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-sample_effect_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the sample baased effect size of the simulated data — CUBIC_MODEL$sample_effect_size","text":"","code":"mod <- cubic_model(-1, 1, 1, 0.5) dat <- mod$gen(1000, fit_model = TRUE) mod$sample_effect_size(dat) #> [1] 3.776623"},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-set_prm.html","id":null,"dir":"Reference","previous_headings":"","what":"Set parameter for the model — CUBIC_MODEL$set_prm","title":"Set parameter for the model — CUBIC_MODEL$set_prm","text":"function store values environment update values closed form expression y, except parameter sigma. parameter sigma, value updated, corresponding value e updated.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-set_prm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set parameter for the model — CUBIC_MODEL$set_prm","text":"prm_name List Vector. Parameter character names. prm_val List Vector. Parameter values.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-set_prm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set parameter for the model — CUBIC_MODEL$set_prm","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-set_prm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set parameter for the model — CUBIC_MODEL$set_prm","text":"","code":"# Instantiate mod <- cubic_model(a = -1, b = 1, c = 1, sigma = 0.5)  mod #>  #> ── <CUBIC_MODEL object> #> y = 1 + (2 - c) * x + c * z + a * (((2 - c) * x)^2 + (c * z)^2) + b * (((2 - c) * x)^3 + (c * z)^3) + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - z: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #> Parameters: #>  - a: -1 #>  - b: 1 #>  - c: 1 #>  - sigma: 0.5   mod$set_prm(\"a\", 2)  mod #>  #> ── <CUBIC_MODEL object> #> y = 1 + (2 - c) * x + c * z + a * (((2 - c) * x)^2 + (c * z)^2) + b * (((2 - c) * x)^3 + (c * z)^3) + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - z: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #> Parameters: #>  - a: 2 #>  - b: 1 #>  - c: 1 #>  - sigma: 0.5   mod$set_prm(\"sigma\", 1)  mod #>  #> ── <CUBIC_MODEL object> #> y = 1 + (2 - c) * x + c * z + a * (((2 - c) * x)^2 + (c * z)^2) + b * (((2 - c) * x)^3 + (c * z)^3) + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - z: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #> Parameters: #>  - a: 2 #>  - b: 1 #>  - c: 1 #>  - sigma: 1"},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL.html","id":null,"dir":"Reference","previous_headings":"","what":"CUBIC_MODEL class environment — CUBIC_MODEL","title":"CUBIC_MODEL class environment — CUBIC_MODEL","text":"class visual inference cubic linear model, inherited VI_MODEL.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CUBIC_MODEL class environment — CUBIC_MODEL","text":"","code":"CUBIC_MODEL"},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CUBIC_MODEL class environment — CUBIC_MODEL","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — HETER_MODEL$..init..","title":"Initialization method — HETER_MODEL$..init..","text":"function called instance built. User input stored environment. response variable model y. formula y defined HETER_MODEL$formula, null formula defined HETER_MODEL$null_formula.","code":""},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — HETER_MODEL$..init..","text":"Numeric. Default = 0. b Numeric. Default b = 1. x Random variable closed form expression. Default x = rand_uniform(-1, 1, env = new.env(parent = parent.env(self))). e Random variable closed form expression. Default e = rand_normal(0, 1, env = new.env(parent = parent.env(self))).","code":""},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — HETER_MODEL$..init..","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — HETER_MODEL$..init..","text":"","code":"# Instantiate test <- heter_model(a = 0, b = 20)  test #>  #> ── <HETER_MODEL object> #> y = 1 + x + sqrt(1 + (2 - abs(a)) * (x - a)^2 * b) * e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #> Parameters: #>  - a: 0 #>  - b: 20   # Generate data test$gen(10) #>             y          x          e     .resid   .fitted #> 1   3.7910489  0.3085354  1.1321921  2.1870174 1.6040315 #> 2   2.0431958  0.8577522  0.0336174 -0.1517121 2.1949079 #> 3   4.6438956 -0.8441994  0.8262286  4.2800369 0.3638587 #> 4  -0.3796699 -0.3955702 -0.3652580 -1.2261875 0.8465176 #> 5  -5.3437042 -0.7955397 -1.0815457 -5.7599135 0.4162093 #> 6   4.3652842 -0.3533806  1.5187571  3.4733767 0.8919074 #> 7  -1.0329121 -0.3253130 -0.7464567 -1.9550161 0.9221040 #> 8  -0.2426286  0.5883926 -0.4751776 -2.1477453 1.9051167 #> 9   4.8129207 -0.7120485  0.9808994  4.3068871 0.5060335 #> 10 -2.7805898 -0.9721954 -0.4508224 -3.0067436 0.2261538  # Generate lineup test$gen_lineup(10, k = 3) #>              y           x           e       .resid   .fitted test_name #> 1   3.23852596  0.41177906  0.65481615  2.866709354 0.3718166   BP-test #> 2   1.50832328 -0.08641925  0.52187839  1.006945284 0.5013780   BP-test #> 3   0.24122020 -0.42833001 -0.11443457 -0.349075065 0.5902953   BP-test #> 4   1.52595469  0.57330265 -0.01258834  1.196143891 0.3298108   BP-test #> 5   0.58233618 -0.99922370  0.09089323 -0.156425626 0.7387618   BP-test #> 6   0.55951863  0.94997310 -0.22828732  0.327664697 0.2318539   BP-test #> 7  -3.94335276  0.30007383 -2.44428945 -4.344219415 0.4008667   BP-test #> 8  -1.42627450  0.77649787 -0.63904863 -1.703242378 0.2769679   BP-test #> 9   4.30100941  0.52043656  0.80828664  3.957450262 0.3435592   BP-test #> 10 -2.49287159  0.65302041 -0.97564103 -2.801951004 0.3090794   BP-test #> 11  4.32796204  0.41177906  0.65481615  3.956145437 0.3718166   BP-test #> 12  3.22909096 -0.08641925  0.52187839  2.727712961 0.5013780   BP-test #> 13 -0.96324678 -0.42833001 -0.11443457 -1.553542046 0.5902953   BP-test #> 14 -0.02111171  0.57330265 -0.01258834 -0.350922516 0.3298108   BP-test #> 15 -0.13512099 -0.99922370  0.09089323 -0.873882798 0.7387618   BP-test #> 16 -3.21496999  0.94997310 -0.22828732 -3.446823928 0.2318539   BP-test #> 17  0.17324743  0.30007383 -2.44428945 -0.227619220 0.4008667   BP-test #> 18  3.30407606  0.77649787 -0.63904863  3.027108178 0.2769679   BP-test #> 19 -2.59062780  0.52043656  0.80828664 -2.934186950 0.3435592   BP-test #> 20 -0.01490971  0.65302041 -0.97564103 -0.323989120 0.3090794   BP-test #> 21 -2.50129275  0.41177906  0.65481615 -2.873109358 0.3718166   BP-test #> 22  1.89676394 -0.08641925  0.52187839  1.395385944 0.5013780   BP-test #> 23  0.59721766 -0.42833001 -0.11443457  0.006922392 0.5902953   BP-test #> 24  4.22712014  0.57330265 -0.01258834  3.897309333 0.3298108   BP-test #> 25  0.31728483 -0.99922370  0.09089323 -0.421476973 0.7387618   BP-test #> 26 -0.84355220  0.94997310 -0.22828732 -1.075406131 0.2318539   BP-test #> 27 -2.59579687  0.30007383 -2.44428945 -2.996663529 0.4008667   BP-test #> 28 -1.60447120  0.77649787 -0.63904863 -1.881439081 0.2769679   BP-test #> 29  4.45811516  0.52043656  0.80828664  4.114556004 0.3435592   BP-test #> 30  0.14300081  0.65302041 -0.97564103 -0.166078602 0.3090794   BP-test #>    statistic   p_value k  null #> 1   2.614535 0.2705583 3 FALSE #> 2   2.614535 0.2705583 3 FALSE #> 3   2.614535 0.2705583 3 FALSE #> 4   2.614535 0.2705583 3 FALSE #> 5   2.614535 0.2705583 3 FALSE #> 6   2.614535 0.2705583 3 FALSE #> 7   2.614535 0.2705583 3 FALSE #> 8   2.614535 0.2705583 3 FALSE #> 9   2.614535 0.2705583 3 FALSE #> 10  2.614535 0.2705583 3 FALSE #> 11  1.539717 0.4630786 1  TRUE #> 12  1.539717 0.4630786 1  TRUE #> 13  1.539717 0.4630786 1  TRUE #> 14  1.539717 0.4630786 1  TRUE #> 15  1.539717 0.4630786 1  TRUE #> 16  1.539717 0.4630786 1  TRUE #> 17  1.539717 0.4630786 1  TRUE #> 18  1.539717 0.4630786 1  TRUE #> 19  1.539717 0.4630786 1  TRUE #> 20  1.539717 0.4630786 1  TRUE #> 21  2.451625 0.2935191 2  TRUE #> 22  2.451625 0.2935191 2  TRUE #> 23  2.451625 0.2935191 2  TRUE #> 24  2.451625 0.2935191 2  TRUE #> 25  2.451625 0.2935191 2  TRUE #> 26  2.451625 0.2935191 2  TRUE #> 27  2.451625 0.2935191 2  TRUE #> 28  2.451625 0.2935191 2  TRUE #> 29  2.451625 0.2935191 2  TRUE #> 30  2.451625 0.2935191 2  TRUE  # Plot the lineup test$plot_lineup(test$gen_lineup(100))"},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-alt_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the alternative model — HETER_MODEL$alt_formula","title":"Formula for fitting the alternative model — HETER_MODEL$alt_formula","text":"Quoted formula fitting alternative model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-alt_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the alternative model — HETER_MODEL$alt_formula","text":"","code":"HETER_MODEL$alt_formula #> NULL"},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Closed form expression of y — HETER_MODEL$formula","title":"Closed form expression of y — HETER_MODEL$formula","text":"quoted formula, passed CLOSED_FORM$instantiate define closed form expression y.","code":""},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Closed form expression of y — HETER_MODEL$formula","text":"","code":"HETER_MODEL$formula #> y ~ 1 + x + sqrt(1 + (2 - abs(a)) * (x - a)^2 * b) * e"},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-null_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the null model — HETER_MODEL$null_formula","title":"Formula for fitting the null model — HETER_MODEL$null_formula","text":"Quoted formula fitting null model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-null_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the null model — HETER_MODEL$null_formula","text":"","code":"HETER_MODEL$null_formula #> y ~ x"},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-sample_effect_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the sample based effect size of the simulated data — HETER_MODEL$sample_effect_size","title":"Compute the sample based effect size of the simulated data — HETER_MODEL$sample_effect_size","text":"function computes sample based effect size simulated data.","code":""},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-sample_effect_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the sample based effect size of the simulated data — HETER_MODEL$sample_effect_size","text":"dat Dataframe. number rows data frame used. Numeric. Default = self$prm$. b Numeric. Default b = self$prm$b. type Character. Type effect size. Default type = NULL.","code":""},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-sample_effect_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the sample based effect size of the simulated data — HETER_MODEL$sample_effect_size","text":"single numeric value.","code":""},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-sample_effect_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the sample based effect size of the simulated data — HETER_MODEL$sample_effect_size","text":"","code":"mod <- heter_model(a = 0, b = 16) mod$sample_effect_size(mod$gen(100)) #> [1] 160"},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-test.html","id":null,"dir":"Reference","previous_headings":"","what":"Test the null model — HETER_MODEL$test","title":"Test the null model — HETER_MODEL$test","text":"function test null model. class, test BP-test computed using lmtest::bptest. variance formula ~ x + (x^2).","code":""},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test the null model — HETER_MODEL$test","text":"dat Data frame. data frame containing variables needed null_formula. null_formula Formula. Formula fitting null model. Default null_formula = self$null_formula.","code":""},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test the null model — HETER_MODEL$test","text":"list containing test name, test statistic p-value.","code":""},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test the null model — HETER_MODEL$test","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- heter_model(a = 0, b = 100)   dat <- test$gen(100000) test$test(dat) #> $name #> [1] \"BP-test\" #>  #> $statistic #> [1] 17777.63 #>  #> $p_value #> [1] 0 #>"},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL.html","id":null,"dir":"Reference","previous_headings":"","what":"HETER_MODEL class environment — HETER_MODEL","title":"HETER_MODEL class environment — HETER_MODEL","text":"class visual inference heteroskedasticity linear model, inherited VI_MODEL.","code":""},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HETER_MODEL class environment — HETER_MODEL","text":"","code":"HETER_MODEL"},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"HETER_MODEL class environment — HETER_MODEL","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/NON_NORMAL_MODEL-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — NON_NORMAL_MODEL$..init..","title":"Initialization method — NON_NORMAL_MODEL$..init..","text":"function called instance built. User input stored environment. response variable model y. formula y defined NON_NORMAL_MODEL$formula, null formula defined NON_NORMAL_MODEL$null_formula, alternative defined NON_NORMAL_MODEL$alt_formula.","code":""},{"path":"https://tengmcing.github.io/visage/reference/NON_NORMAL_MODEL-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — NON_NORMAL_MODEL$..init..","text":"x Random variable closed form expression. Default x = rand_uniform(-1, 1, env = new.env(parent = parent.env(self))). e Random variable closed form expression. Default e = rand_lognormal(0, sigma, env = new.env(parent = parent.env(self))).","code":""},{"path":"https://tengmcing.github.io/visage/reference/NON_NORMAL_MODEL-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — NON_NORMAL_MODEL$..init..","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/NON_NORMAL_MODEL-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — NON_NORMAL_MODEL$..init..","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_lognormal(sigma = 0.5)  test <- non_normal_model(x = x, e = e)  test #>  #> ── <NON_NORMAL_MODEL object> #> y = 1 + x + e #>  - x: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - e: <RAND_LOGNORMAL object> #>    [mu: 0, sigma: 0.5]   # Generate data test$gen(10) #>           y          x         e       .resid  .fitted #> 1  2.391012 0.01560364 1.3754081  0.539550663 1.851461 #> 2  1.495592 0.04114743 0.4544442 -0.375927998 1.871520 #> 3  2.590158 0.34181611 1.2483416  0.482534139 2.107624 #> 4  1.759085 0.09582660 0.6632586 -0.155371920 1.914457 #> 5  2.427548 0.73897184 0.6885760  0.008052568 2.419495 #> 6  1.716567 0.27015548 0.4464114 -0.334784286 2.051351 #> 7  2.062545 0.39075994 0.6717851 -0.083512351 2.146057 #> 8  2.251777 0.72791796 0.5238587 -0.159038378 2.410815 #> 9  2.716843 0.99019490 0.7266486  0.100072086 2.616771 #> 10 2.152389 0.42629773 0.7260916 -0.021574523 2.173964  # Generate lineup test$gen_lineup(10, k = 3) #>           y         x         e       .resid  .fitted    test_name statistic #> 1  2.432726 0.1191926 1.3135333 -0.103540120 2.536266 Shapiro-test 0.9681300 #> 2  2.729167 0.3289581 1.4002093  0.086483796 2.642684 Shapiro-test 0.9681300 #> 3  3.149750 0.8069489 1.3428012  0.264573837 2.885176 Shapiro-test 0.9681300 #> 4  2.579223 0.1635338 1.4156888  0.020461501 2.558761 Shapiro-test 0.9681300 #> 5  2.745409 0.1375378 1.6078709  0.199835785 2.545573 Shapiro-test 0.9681300 #> 6  2.679236 0.4886426 1.1905930 -0.044458591 2.723694 Shapiro-test 0.9681300 #> 7  3.322861 0.5347001 1.7881604  0.575800602 2.747060 Shapiro-test 0.9681300 #> 8  2.309022 0.4300653 0.8789563 -0.384955367 2.693977 Shapiro-test 0.9681300 #> 9  2.169324 0.6201941 0.5491296 -0.621108735 2.790432 Shapiro-test 0.9681300 #> 10 2.789020 0.6037949 1.1852253  0.006907291 2.782113 Shapiro-test 0.9681300 #> 11 2.674269 0.1191926 1.3135333  0.138003015 2.536266 Shapiro-test 0.8851872 #> 12 2.905962 0.3289581 1.4002093  0.263278731 2.642684 Shapiro-test 0.8851872 #> 13 3.099489 0.8069489 1.3428012  0.214312940 2.885176 Shapiro-test 0.8851872 #> 14 2.267033 0.1635338 1.4156888 -0.291728334 2.558761 Shapiro-test 0.8851872 #> 15 2.857039 0.1375378 1.6078709  0.311466570 2.545573 Shapiro-test 0.8851872 #> 16 2.666306 0.4886426 1.1905930 -0.057387771 2.723694 Shapiro-test 0.8851872 #> 17 2.063661 0.5347001 1.7881604 -0.683399090 2.747060 Shapiro-test 0.8851872 #> 18 2.387457 0.4300653 0.8789563 -0.306519700 2.693977 Shapiro-test 0.8851872 #> 19 3.119989 0.6201941 0.5491296  0.329556833 2.790432 Shapiro-test 0.8851872 #> 20 2.864530 0.6037949 1.1852253  0.082416805 2.782113 Shapiro-test 0.8851872 #> 21 2.574754 0.1191926 1.3135333  0.038488048 2.536266 Shapiro-test 0.8987383 #> 22 2.826197 0.3289581 1.4002093  0.183513606 2.642684 Shapiro-test 0.8987383 #> 23 2.689916 0.8069489 1.3428012 -0.195260104 2.885176 Shapiro-test 0.8987383 #> 24 2.823730 0.1635338 1.4156888  0.264969380 2.558761 Shapiro-test 0.8987383 #> 25 1.970917 0.1375378 1.6078709 -0.574655601 2.545573 Shapiro-test 0.8987383 #> 26 2.519623 0.4886426 1.1905930 -0.204071456 2.723694 Shapiro-test 0.8987383 #> 27 3.125421 0.5347001 1.7881604  0.378361165 2.747060 Shapiro-test 0.8987383 #> 28 2.950641 0.4300653 0.8789563  0.256663813 2.693977 Shapiro-test 0.8987383 #> 29 3.077492 0.6201941 0.5491296  0.287059814 2.790432 Shapiro-test 0.8987383 #> 30 2.347044 0.6037949 1.1852253 -0.435068665 2.782113 Shapiro-test 0.8987383 #>      p_value k  null #> 1  0.8729865 1 FALSE #> 2  0.8729865 1 FALSE #> 3  0.8729865 1 FALSE #> 4  0.8729865 1 FALSE #> 5  0.8729865 1 FALSE #> 6  0.8729865 1 FALSE #> 7  0.8729865 1 FALSE #> 8  0.8729865 1 FALSE #> 9  0.8729865 1 FALSE #> 10 0.8729865 1 FALSE #> 11 0.1495836 2  TRUE #> 12 0.1495836 2  TRUE #> 13 0.1495836 2  TRUE #> 14 0.1495836 2  TRUE #> 15 0.1495836 2  TRUE #> 16 0.1495836 2  TRUE #> 17 0.1495836 2  TRUE #> 18 0.1495836 2  TRUE #> 19 0.1495836 2  TRUE #> 20 0.1495836 2  TRUE #> 21 0.2122056 3  TRUE #> 22 0.2122056 3  TRUE #> 23 0.2122056 3  TRUE #> 24 0.2122056 3  TRUE #> 25 0.2122056 3  TRUE #> 26 0.2122056 3  TRUE #> 27 0.2122056 3  TRUE #> 28 0.2122056 3  TRUE #> 29 0.2122056 3  TRUE #> 30 0.2122056 3  TRUE  # Plot the lineup test$plot_lineup(test$gen_lineup(100))   test <- non_normal_model(x = x, e = rand_lognormal(sigma = 0.1)) test$plot_lineup(test$gen_lineup(100))   test <- non_normal_model(x = x, e = rand_lognormal(sigma = 0.5)) test$plot_lineup(test$gen_lineup(100))   test <- non_normal_model(x = x, e = rand_lognormal(sigma = 1)) test$plot_lineup(test$gen_lineup(100))   test <- non_normal_model(x = x, e = rand_lognormal(sigma = 2)) test$plot_lineup(test$gen_lineup(100))"},{"path":"https://tengmcing.github.io/visage/reference/NON_NORMAL_MODEL.html","id":null,"dir":"Reference","previous_headings":"","what":"NON_NORMAL_MODEL class environment — NON_NORMAL_MODEL","title":"NON_NORMAL_MODEL class environment — NON_NORMAL_MODEL","text":"class visual inference orthogonal polynomial linear model, inherited VI_MODEL.","code":""},{"path":"https://tengmcing.github.io/visage/reference/NON_NORMAL_MODEL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NON_NORMAL_MODEL class environment — NON_NORMAL_MODEL","text":"","code":"NON_NORMAL_MODEL"},{"path":"https://tengmcing.github.io/visage/reference/NON_NORMAL_MODEL.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"NON_NORMAL_MODEL class environment — NON_NORMAL_MODEL","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — POLY_MODEL$..init..","title":"Initialization method — POLY_MODEL$..init..","text":"function called instance built. User input stored environment. response variable model y. formula y defined POLY_MODEL$formula, null formula defined POLY_MODEL$null_formula, alternative defined POLY_MODEL$alt_formula. formula raw orthogonal polynomial term defined POLY_MODEL$raw_z_formula, scaled orthogonal polynomial term defined POLY_MODEL$z_formula.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — POLY_MODEL$..init..","text":"shape Integer. shape orthogonal polynomial used model. Note value 1 4. Default shape = 1. sigma Positive numeric. Default sigma = 1. include_z Boolean. Whether include z formula y. Default include_z = TRUE. x Random variable closed form expression. Default x = rand_uniform(-1, 1, env = new.env(parent = parent.env(self))). e Random variable closed form expression. Default e = rand_normal(0, sigma, env = new.env(parent = parent.env(self))).","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — POLY_MODEL$..init..","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — POLY_MODEL$..init..","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal(sigma = 0.5)  test <- poly_model(shape = 1, x = x, e = e)  test #>  #> ── <POLY_MODEL object> #> y = 1 + x + include_z * z + e #>  - x: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - z: <CLOSED_FORM object> #>    EXPR = (raw_z - min(raw_z))/max(raw_z - min(raw_z)) * 2 - 1 #>     - raw_z: <CLOSED_FORM object> #>       EXPR = hermite(shape)((x - min(x))/max(x - min(x)) * 4 - 2) #>        - x: <RAND_UNIFORM object> #>          [a: 0, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #> Parameters: #>  - shape: 1 #>  - include_z: TRUE #>  - sigma: 1   # Generate data test$gen(10) #>             y          x      raw_z          z           e      .resid #> 1  2.82918402 0.99206147  3.0000000  1.0000000 -0.16287746  0.43127384 #> 2  1.18415371 0.32417575 -0.4060480 -0.7046933  0.56467131  0.14006221 #> 3  1.45230931 0.23659775  0.2859441 -0.3583581  0.57406970  0.58574029 #> 4  1.10669575 0.64739654 -0.6748962 -0.8392492  0.29854844 -0.59257122 #> 5  0.12738603 0.40899947 -0.8246092 -0.9141791 -0.36743434 -1.08864498 #> 6  0.91455446 0.52503913 -0.9960829 -1.0000000  0.38951532 -0.53669143 #> 7  3.24321498 0.92981657  2.0338006  0.5164267  0.79697167  0.97147655 #> 8  1.57651064 0.02784324  3.0000000  1.0000000 -0.45133259  1.13309149 #> 9  0.05887894 0.40170245 -0.7983379 -0.9010306 -0.44179295 -1.14236085 #> 10 0.95571796 0.23192334  0.3302999 -0.3361585  0.05995314  0.09862408 #>      .fitted #> 1  2.3979102 #> 2  1.0440915 #> 3  0.8665690 #> 4  1.6992670 #> 5  1.2160310 #> 6  1.4512459 #> 7  2.2717384 #> 8  0.4434191 #> 9  1.2012398 #> 10 0.8570939  # Generate lineup test$gen_lineup(10, k = 3) #>             y           x      raw_z          z           e      .resid #> 1   0.5661146 0.464207984 -0.8315598 -0.9158039  0.01771045 -0.72833381 #> 2  -0.6533803 0.386998348 -0.9999500 -1.0000000 -1.04037869 -1.84380747 #> 3   1.5131674 0.002796276  3.0000000  1.0000000 -0.48962883  0.84035936 #> 4   2.1179047 0.768493104  3.0000000  1.0000000 -0.65058840  0.41350599 #> 5   0.7062670 0.431980628 -0.9414075 -0.9707284  0.24501472 -0.54476286 #> 6   3.1096976 0.724419444  2.1320477  0.5660184  0.81925975  1.46467745 #> 7   0.6738162 0.536686856 -0.3774092 -0.6887257 -0.17414497 -0.71827989 #> 8   0.2255530 0.494252309 -0.6780956 -0.8390708 -0.42962847 -1.10937278 #> 9   2.7763821 0.680455114  1.3718759  0.1859278  0.90999921  1.19059319 #> 10  1.7428003 0.028456856  2.4817662  0.7408799 -0.02653640  1.03542082 #> 11  1.3539328 0.464207984 -0.8315598 -0.9158039  0.01771045  0.05948446 #> 12  0.2050582 0.386998348 -0.9999500 -1.0000000 -1.04037869 -0.98536897 #> 13 -0.1714869 0.002796276  3.0000000  1.0000000 -0.48962883 -0.84429503 #> 14  2.2200728 0.768493104  3.0000000  1.0000000 -0.65058840  0.51567408 #> 15  3.3877251 0.431980628 -0.9414075 -0.9707284  0.24501472  2.13669531 #> 16  0.8792281 0.724419444  2.1320477  0.5660184  0.81925975 -0.76579210 #> 17  2.8587838 0.536686856 -0.3774092 -0.6887257 -0.17414497  1.46668776 #> 18  0.5664912 0.494252309 -0.6780956 -0.8390708 -0.42962847 -0.76843462 #> 19  0.3700902 0.680455114  1.3718759  0.1859278  0.90999921 -1.21569872 #> 20  1.1084273 0.028456856  2.4817662  0.7408799 -0.02653640  0.40104782 #> 21  2.5209435 0.464207984 -0.8315598 -0.9158039  0.01771045  1.22649515 #> 22 -0.2402070 0.386998348 -0.9999500 -1.0000000 -1.04037869 -1.43063414 #> 23  1.2726077 0.002796276  3.0000000  1.0000000 -0.48962883  0.59979959 #> 24  0.4758463 0.768493104  3.0000000  1.0000000 -0.65058840 -1.22855243 #> 25  3.0939044 0.431980628 -0.9414075 -0.9707284  0.24501472  1.84287453 #> 26  2.2088480 0.724419444  2.1320477  0.5660184  0.81925975  0.56382785 #> 27  0.5499036 0.536686856 -0.3774092 -0.6887257 -0.17414497 -0.84219246 #> 28  0.7270716 0.494252309 -0.6780956 -0.8390708 -0.42962847 -0.60785420 #> 29  2.3191896 0.680455114  1.3718759  0.1859278  0.90999921  0.73340076 #> 30 -0.1497851 0.028456856  2.4817662  0.7408799 -0.02653640 -0.85716465 #>      .fitted test_name  statistic     p_value k  null #> 1  1.2944484    F-test 20.1814245 0.002824028 3 FALSE #> 2  1.1904271    F-test 20.1814245 0.002824028 3 FALSE #> 3  0.6728081    F-test 20.1814245 0.002824028 3 FALSE #> 4  1.7043987    F-test 20.1814245 0.002824028 3 FALSE #> 5  1.2510298    F-test 20.1814245 0.002824028 3 FALSE #> 6  1.6450202    F-test 20.1814245 0.002824028 3 FALSE #> 7  1.3920961    F-test 20.1814245 0.002824028 3 FALSE #> 8  1.3349258    F-test 20.1814245 0.002824028 3 FALSE #> 9  1.5857889    F-test 20.1814245 0.002824028 3 FALSE #> 10 0.7073795    F-test 20.1814245 0.002824028 3 FALSE #> 11 1.2944484    F-test  0.4726027 0.513917579 1  TRUE #> 12 1.1904271    F-test  0.4726027 0.513917579 1  TRUE #> 13 0.6728081    F-test  0.4726027 0.513917579 1  TRUE #> 14 1.7043987    F-test  0.4726027 0.513917579 1  TRUE #> 15 1.2510298    F-test  0.4726027 0.513917579 1  TRUE #> 16 1.6450202    F-test  0.4726027 0.513917579 1  TRUE #> 17 1.3920961    F-test  0.4726027 0.513917579 1  TRUE #> 18 1.3349258    F-test  0.4726027 0.513917579 1  TRUE #> 19 1.5857889    F-test  0.4726027 0.513917579 1  TRUE #> 20 0.7073795    F-test  0.4726027 0.513917579 1  TRUE #> 21 1.2944484    F-test  0.1342374 0.724901776 2  TRUE #> 22 1.1904271    F-test  0.1342374 0.724901776 2  TRUE #> 23 0.6728081    F-test  0.1342374 0.724901776 2  TRUE #> 24 1.7043987    F-test  0.1342374 0.724901776 2  TRUE #> 25 1.2510298    F-test  0.1342374 0.724901776 2  TRUE #> 26 1.6450202    F-test  0.1342374 0.724901776 2  TRUE #> 27 1.3920961    F-test  0.1342374 0.724901776 2  TRUE #> 28 1.3349258    F-test  0.1342374 0.724901776 2  TRUE #> 29 1.5857889    F-test  0.1342374 0.724901776 2  TRUE #> 30 0.7073795    F-test  0.1342374 0.724901776 2  TRUE  # Plot the lineup test$plot_lineup(test$gen_lineup(100))   test <- poly_model(shape = 1, include_z = FALSE, x = x, e = e) test$plot_lineup(test$gen_lineup(100))   test <- poly_model(shape = 2, x = x, e = e) test$plot_lineup(test$gen_lineup(100))   test <- poly_model(shape = 3, x = x, e = e) test$plot_lineup(test$gen_lineup(100))   test <- poly_model(shape = 4, x = x, e = e) test$plot_lineup(test$gen_lineup(100))"},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-E.html","id":null,"dir":"Reference","previous_headings":"","what":"Expectation of the residuals — POLY_MODEL$E","title":"Expectation of the residuals — POLY_MODEL$E","text":"function calculate expectation residuals use Frisch–Waugh–Lovell theorem.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-E.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expectation of the residuals — POLY_MODEL$E","text":"dat Dataframe/List. List contains variable x z.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-E.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expectation of the residuals — POLY_MODEL$E","text":"vector numeric expectations.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-E.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expectation of the residuals — POLY_MODEL$E","text":"","code":"mod <- poly_model(4, 0.5) dat <- mod$gen(1000, fit_model = TRUE) dat$exp <- mod$E(dat) mod$plot(dat) + ggplot2::geom_point(ggplot2::aes(.fitted, exp),                                     col = \"red\",                                     alpha = 0.6)"},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-alt_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the alternative model — POLY_MODEL$alt_formula","title":"Formula for fitting the alternative model — POLY_MODEL$alt_formula","text":"Quoted formula fitting alternative model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-alt_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the alternative model — POLY_MODEL$alt_formula","text":"","code":"POLY_MODEL$alt_formula #> y ~ x + z"},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Closed form expression of y — POLY_MODEL$formula","title":"Closed form expression of y — POLY_MODEL$formula","text":"quoted formula, passed CLOSED_FORM$instantiate define closed form expression y.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Closed form expression of y — POLY_MODEL$formula","text":"","code":"POLY_MODEL$formula #> y ~ 1 + x + include_z * z + e"},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-hermite.html","id":null,"dir":"Reference","previous_headings":"","what":"Hermite polynomial functions — POLY_MODEL$hermite","title":"Hermite polynomial functions — POLY_MODEL$hermite","text":"function returns Hermite polynomial function defined using mpoly::hermite.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-hermite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hermite polynomial functions — POLY_MODEL$hermite","text":"shape Integer. value 1 4.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-hermite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hermite polynomial functions — POLY_MODEL$hermite","text":"function.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-hermite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hermite polynomial functions — POLY_MODEL$hermite","text":"","code":"POLY_MODEL$hermite(1) #> function (.)  #> { #>     if (length(.) > 1) { #>         .[] <- sapply(., f) #>         return(.) #>     } #>     -1 + .^2 #> } #> <environment: 0x10d0739e0> POLY_MODEL$hermite(2) #> function (.)  #> { #>     if (length(.) > 1) { #>         .[] <- sapply(., f) #>         return(.) #>     } #>     -3 * . + .^3 #> } #> <environment: 0x109bd5fa8> POLY_MODEL$hermite(3) #> function (.)  #> { #>     if (length(.) > 1) { #>         .[] <- sapply(., f) #>         return(.) #>     } #>     -15 + 45 * .^2 - 15 * .^4 + .^6 #> } #> <environment: 0x10b3c2c68> POLY_MODEL$hermite(4) #> function (.)  #> { #>     if (length(.) > 1) { #>         .[] <- sapply(., f) #>         return(.) #>     } #>     -34459425 + 310134825 * .^2 - 413513100 * .^4 + 192972780 *  #>         .^6 - 41351310 * .^8 + 4594590 * .^10 - 278460 * .^12 +  #>         9180 * .^14 - 153 * .^16 + .^18 #> } #> <environment: 0x11c66e9d0>"},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-null_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the null model — POLY_MODEL$null_formula","title":"Formula for fitting the null model — POLY_MODEL$null_formula","text":"Quoted formula fitting null model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-null_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the null model — POLY_MODEL$null_formula","text":"","code":"POLY_MODEL$null_formula #> y ~ x"},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-raw_z_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for the raw orthogonal polynomial term raw_z — POLY_MODEL$raw_z_formula","title":"Formula for the raw orthogonal polynomial term raw_z — POLY_MODEL$raw_z_formula","text":"Quoted formula raw orthogonal polynomial term raw_z.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-raw_z_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for the raw orthogonal polynomial term raw_z — POLY_MODEL$raw_z_formula","text":"","code":"POLY_MODEL$raw_z_formula #> raw_z ~ hermite(shape)((x - min(x))/max(x - min(x)) * 4 - 2)"},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-sample_effect_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the sample based effect size of the simulated data — POLY_MODEL$sample_effect_size","title":"Compute the sample based effect size of the simulated data — POLY_MODEL$sample_effect_size","text":"function computes sample based effect size simulated data.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-sample_effect_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the sample based effect size of the simulated data — POLY_MODEL$sample_effect_size","text":"dat Dataframe/List. List contains variable x z. sigma Positive numeric. Default sigma = self$prm$sigma. include_z Boolean. Default include_z = self$prm$include_z. shape Positive integer. Default shape = self$prm$shape. type Character. Type effect size measure. Default type = kl.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-sample_effect_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the sample based effect size of the simulated data — POLY_MODEL$sample_effect_size","text":"numeric value.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-sample_effect_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the sample based effect size of the simulated data — POLY_MODEL$sample_effect_size","text":"","code":"mod <- poly_model(4, 0.5) dat <- mod$gen(1000, fit_model = TRUE) mod$sample_effect_size(dat) #> [1] 610.4448"},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-set_prm.html","id":null,"dir":"Reference","previous_headings":"","what":"Set parameter for the model — POLY_MODEL$set_prm","title":"Set parameter for the model — POLY_MODEL$set_prm","text":"function store values environment update values closed form expression y, except parameter sigma, shape raw_z. parameter sigma, value updated, corresponding value e updated. parameter shape, value updated, corresponding value raw_z updated. parameter raw_z, value updated, corresponding value z updated.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-set_prm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set parameter for the model — POLY_MODEL$set_prm","text":"prm_name List Vector. Parameter character names. prm_val List Vector. Parameter values.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-set_prm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set parameter for the model — POLY_MODEL$set_prm","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-set_prm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set parameter for the model — POLY_MODEL$set_prm","text":"","code":"# Instantiate mod <- poly_model(shape = 2, sigma = 0.5)  mod #>  #> ── <POLY_MODEL object> #> y = 1 + x + include_z * z + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - z: <CLOSED_FORM object> #>    EXPR = (raw_z - min(raw_z))/max(raw_z - min(raw_z)) * 2 - 1 #>     - raw_z: <CLOSED_FORM object> #>       EXPR = hermite(shape)((x - min(x))/max(x - min(x)) * 4 - 2) #>        - x: <RAND_UNIFORM object> #>          [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #> Parameters: #>  - shape: 2 #>  - include_z: TRUE #>  - sigma: 0.5   mod$set_prm(\"shape\", 4)  mod #>  #> ── <POLY_MODEL object> #> y = 1 + x + include_z * z + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - z: <CLOSED_FORM object> #>    EXPR = (raw_z - min(raw_z))/max(raw_z - min(raw_z)) * 2 - 1 #>     - raw_z: <CLOSED_FORM object> #>       EXPR = hermite(shape)((x - min(x))/max(x - min(x)) * 4 - 2) #>        - x: <RAND_UNIFORM object> #>          [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #> Parameters: #>  - shape: 4 #>  - include_z: TRUE #>  - sigma: 0.5   mod$set_prm(\"sigma\", 1)  mod #>  #> ── <POLY_MODEL object> #> y = 1 + x + include_z * z + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - z: <CLOSED_FORM object> #>    EXPR = (raw_z - min(raw_z))/max(raw_z - min(raw_z)) * 2 - 1 #>     - raw_z: <CLOSED_FORM object> #>       EXPR = hermite(shape)((x - min(x))/max(x - min(x)) * 4 - 2) #>        - x: <RAND_UNIFORM object> #>          [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #> Parameters: #>  - shape: 4 #>  - include_z: TRUE #>  - sigma: 1"},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-test.html","id":null,"dir":"Reference","previous_headings":"","what":"Test the null model — POLY_MODEL$test","title":"Test the null model — POLY_MODEL$test","text":"function test null model. class, test either F-test computed using stats::anova RESET test computed using lmtest::resettest.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test the null model — POLY_MODEL$test","text":"dat Data frame. data frame containing variables needed null_formula. null_formula Formula. Formula fitting null model. Default null_formula = self$null_formula. alt_formula Formula. Formula fitting alternative model. used F-test. Default alt_formula = self$alt_formula. test Character. string representing test. Either \"F\" \"RESET\". power Integer. vector integers representing power variables included. used RESET test. Default 2:3. power_type Character. Argument passed lmtest::resettest. \"fitted\", \"regressor\" \"princomp\". used RESET test. Default \"fitted\".","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test the null model — POLY_MODEL$test","text":"list containing test name, test statistic p-value.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test the null model — POLY_MODEL$test","text":"","code":"# Instantiate mod <- poly_model(shape = 2, sigma = 0.5)  mod #>  #> ── <POLY_MODEL object> #> y = 1 + x + include_z * z + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - z: <CLOSED_FORM object> #>    EXPR = (raw_z - min(raw_z))/max(raw_z - min(raw_z)) * 2 - 1 #>     - raw_z: <CLOSED_FORM object> #>       EXPR = hermite(shape)((x - min(x))/max(x - min(x)) * 4 - 2) #>        - x: <RAND_UNIFORM object> #>          [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #> Parameters: #>  - shape: 2 #>  - include_z: TRUE #>  - sigma: 0.5   dat <- mod$gen(100000)  # F-test mod$test(dat, test = \"F\") #> $name #> [1] \"F-test\" #>  #> $statistic #> [1] 147619.7 #>  #> $p_value #> [1] 0 #>   # RESET test mod$test(dat, test = \"RESET\", power = 2:4) #> $name #> [1] \"RESET-test\" #>  #> $statistic #> [1] 49206.78 #>  #> $p_value #> [1] 0 #>"},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-z_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for the scaled orthogonal polynomial term z — POLY_MODEL$z_formula","title":"Formula for the scaled orthogonal polynomial term z — POLY_MODEL$z_formula","text":"Quoted formula scaled orthogonal polynomial term z.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-z_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for the scaled orthogonal polynomial term z — POLY_MODEL$z_formula","text":"","code":"POLY_MODEL$z_formula #> z ~ (raw_z - min(raw_z))/max(raw_z - min(raw_z)) * 2 - 1"},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL.html","id":null,"dir":"Reference","previous_headings":"","what":"POLY_MODEL class environment — POLY_MODEL","title":"POLY_MODEL class environment — POLY_MODEL","text":"class visual inference orthogonal polynomial linear model, inherited VI_MODEL.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"POLY_MODEL class environment — POLY_MODEL","text":"","code":"POLY_MODEL"},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"POLY_MODEL class environment — POLY_MODEL","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — QUARTIC_MODEL$..init..","title":"Initialization method — QUARTIC_MODEL$..init..","text":"function called instance built. User input stored environment. response variable model y. formula y defined QUARTIC_MODEL$formula, null formula defined QUARTIC_MODEL$null_formula, alternative defined QUARTIC_MODEL$alt_formula.","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — QUARTIC_MODEL$..init..","text":"Numeric. Default = 1. b Numeric. Default b = 1. c Numeric. Default c = 1. sigma Positive numeric. Default sigma = 1. x Random variable closed form expression. Default x = rand_uniform(-1, 1, env = new.env(parent = parent.env(self))). e Random variable closed form expression. Default e = rand_normal(0, sigma, env = new.env(parent = parent.env(self))).","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — QUARTIC_MODEL$..init..","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — QUARTIC_MODEL$..init..","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal()  test <- quartic_model(a = 200, b = 200, c = 20, x = x, e = e)  test #>  #> ── <QUARTIC_MODEL object> #> y = 1 + x + a * x^2 + b * x^3 + c * x^4 + e #>  - x: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #> Parameters: #>  - a: 200 #>  - b: 200 #>  - c: 20 #>  - sigma: 1   # Generate data test$gen(10) #>            y         x            e     .resid    .fitted #> 1  266.48809 0.8326320  0.938881482  -1.800431 268.288523 #> 2   26.51895 0.3091217  0.008264311  30.234716  -3.715769 #> 3  205.34567 0.7511824 -0.403337227 -20.623480 225.969154 #> 4  299.17899 0.8731442  0.071562534   9.841233 289.337754 #> 5  218.28410 0.7693290  0.067087294 -17.113629 235.397727 #> 6  328.83247 0.9072684 -0.614122881  21.764498 307.067971 #> 7  345.78039 0.9256728 -0.840134614  29.149906 316.630481 #> 8  111.29668 0.5848244 -1.035898785 -28.236563 139.533243 #> 9  212.67593 0.7591172  1.533917315 -17.415968 230.091894 #> 10 257.80709 0.8236224 -0.632095091  -5.800283 263.607369  # Generate lineup test$gen_lineup(10, k = 3) #>              y         x           e      .resid   .fitted test_name #> 1   54.3271881 0.4284965 -0.23259193  -1.5709352  55.89812    F-test #> 2   39.1302801 0.3733132 -0.90920584   8.0983724  31.03191    F-test #> 3  122.5927703 0.6104263 -1.81007892 -15.2849231 137.87769    F-test #> 4   21.1949939 0.2725567  0.90514030  35.5650532 -14.37006    F-test #> 5  110.0813949 0.5798953 -0.01716754 -14.0387046 124.12010    F-test #> 6  103.9378940 0.5716289 -2.47815205 -16.4572710 120.39516    F-test #> 7  295.0216335 0.8686505 -0.23346133  40.7852952 254.23634    F-test #> 8  121.5066421 0.6049306 -0.23855210 -13.8946337 135.40128    F-test #> 9   90.9914387 0.5342331  0.25253545 -12.5527408 103.54418    F-test #> 10  84.1062062 0.5147296  0.92304862 -10.6495125  94.75572    F-test #> 11  61.5382280 0.4284965 -0.23259193   5.6401047  55.89812    F-test #> 12   2.4728132 0.3733132 -0.90920584 -28.5590945  31.03191    F-test #> 13 151.5442297 0.6104263 -1.81007892  13.6665363 137.87769    F-test #> 14  -0.6372846 0.2725567  0.90514030  13.7327747 -14.37006    F-test #> 15 122.1688830 0.5798953 -0.01716754  -1.9512165 124.12010    F-test #> 16  76.1001927 0.5716289 -2.47815205 -44.2949723 120.39516    F-test #> 17 254.3409886 0.8686505 -0.23346133   0.1046503 254.23634    F-test #> 18 147.1006095 0.6049306 -0.23855210  11.6993337 135.40128    F-test #> 19 104.6043717 0.5342331  0.25253545   1.0601922 103.54418    F-test #> 20 123.6574099 0.5147296  0.92304862  28.9016913  94.75572    F-test #> 21  10.5135488 0.4284965 -0.23259193 -45.3845745  55.89812    F-test #> 22  31.4304791 0.3733132 -0.90920584   0.3985714  31.03191    F-test #> 23 140.7893153 0.6104263 -1.81007892   2.9116219 137.87769    F-test #> 24  -3.7014761 0.2725567  0.90514030  10.6685833 -14.37006    F-test #> 25 153.2225809 0.5798953 -0.01716754  29.1024814 124.12010    F-test #> 26 113.2009035 0.5716289 -2.47815205  -7.1942615 120.39516    F-test #> 27 238.3662294 0.8686505 -0.23346133 -15.8701090 254.23634    F-test #> 28 162.9525012 0.6049306 -0.23855210  27.5512254 135.40128    F-test #> 29 108.2715220 0.5342331  0.25253545   4.7273425 103.54418    F-test #> 30  87.8448377 0.5147296  0.92304862  -6.9108810  94.75572    F-test #>       statistic      p_value k  null #> 1  1124.3940219 1.716002e-07 3 FALSE #> 2  1124.3940219 1.716002e-07 3 FALSE #> 3  1124.3940219 1.716002e-07 3 FALSE #> 4  1124.3940219 1.716002e-07 3 FALSE #> 5  1124.3940219 1.716002e-07 3 FALSE #> 6  1124.3940219 1.716002e-07 3 FALSE #> 7  1124.3940219 1.716002e-07 3 FALSE #> 8  1124.3940219 1.716002e-07 3 FALSE #> 9  1124.3940219 1.716002e-07 3 FALSE #> 10 1124.3940219 1.716002e-07 3 FALSE #> 11    0.2059589 8.881709e-01 1  TRUE #> 12    0.2059589 8.881709e-01 1  TRUE #> 13    0.2059589 8.881709e-01 1  TRUE #> 14    0.2059589 8.881709e-01 1  TRUE #> 15    0.2059589 8.881709e-01 1  TRUE #> 16    0.2059589 8.881709e-01 1  TRUE #> 17    0.2059589 8.881709e-01 1  TRUE #> 18    0.2059589 8.881709e-01 1  TRUE #> 19    0.2059589 8.881709e-01 1  TRUE #> 20    0.2059589 8.881709e-01 1  TRUE #> 21    1.8892705 2.492128e-01 2  TRUE #> 22    1.8892705 2.492128e-01 2  TRUE #> 23    1.8892705 2.492128e-01 2  TRUE #> 24    1.8892705 2.492128e-01 2  TRUE #> 25    1.8892705 2.492128e-01 2  TRUE #> 26    1.8892705 2.492128e-01 2  TRUE #> 27    1.8892705 2.492128e-01 2  TRUE #> 28    1.8892705 2.492128e-01 2  TRUE #> 29    1.8892705 2.492128e-01 2  TRUE #> 30    1.8892705 2.492128e-01 2  TRUE  # Plot the lineup test$plot_lineup(test$gen_lineup(100))"},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-E.html","id":null,"dir":"Reference","previous_headings":"","what":"Expectation of the residuals — QUARTIC_MODEL$E","title":"Expectation of the residuals — QUARTIC_MODEL$E","text":"function calculate expectation residuals use Frisch–Waugh–Lovell theorem.","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-E.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expectation of the residuals — QUARTIC_MODEL$E","text":"dat Dataframe/List. List contains variable x z. Numeric. Default = self$prm$. b Numeric. Default b = self$prm$b. c Numeric. Default c = self$prm$c.","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-E.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expectation of the residuals — QUARTIC_MODEL$E","text":"vector numeric expectations.","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-E.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expectation of the residuals — QUARTIC_MODEL$E","text":"","code":"mod <- quartic_model(-1, 1, 1, 0.5) dat <- mod$gen(1000, fit_model = TRUE) dat$exp <- mod$E(dat) mod$plot(dat) + ggplot2::geom_point(ggplot2::aes(.fitted, exp),                                     col = \"red\",                                     alpha = 0.6)"},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-alt_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the alternative model — QUARTIC_MODEL$alt_formula","title":"Formula for fitting the alternative model — QUARTIC_MODEL$alt_formula","text":"Quoted formula fitting alternative model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-alt_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the alternative model — QUARTIC_MODEL$alt_formula","text":"","code":"QUARTIC_MODEL$alt_formula #> y ~ x + I(x^2) + I(x^3) + I(x^4)"},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Closed form expression of y — QUARTIC_MODEL$formula","title":"Closed form expression of y — QUARTIC_MODEL$formula","text":"quoted formula, passed CLOSED_FORM$instantiate define closed form expression y.","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Closed form expression of y — QUARTIC_MODEL$formula","text":"","code":"QUARTIC_MODEL$formula #> y ~ 1 + x + a * x^2 + b * x^3 + c * x^4 + e"},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-null_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the null model — QUARTIC_MODEL$null_formula","title":"Formula for fitting the null model — QUARTIC_MODEL$null_formula","text":"Quoted formula fitting null model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-null_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the null model — QUARTIC_MODEL$null_formula","text":"","code":"QUARTIC_MODEL$null_formula #> y ~ x"},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-sample_effect_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the sample based effect size of the simulated data — QUARTIC_MODEL$sample_effect_size","title":"Compute the sample based effect size of the simulated data — QUARTIC_MODEL$sample_effect_size","text":"function computes sample based effect size simulated data.","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-sample_effect_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the sample based effect size of the simulated data — QUARTIC_MODEL$sample_effect_size","text":"dat Dataframe/List. List contains variable x. Numeric. Default = self$prm$. b Numeric. Default b = self$prm$b. c Numeric. Default c = self$prm$c. sigma Positive numeric. Default sigma = self$prm$sigma.","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-sample_effect_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the sample based effect size of the simulated data — QUARTIC_MODEL$sample_effect_size","text":"numeric value.","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-sample_effect_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the sample based effect size of the simulated data — QUARTIC_MODEL$sample_effect_size","text":"","code":"mod <- quartic_model(-1, 1, 1, 0.5) dat <- mod$gen(1000, fit_model = TRUE) mod$sample_effect_size(dat) #> [1] 0.6366838"},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-set_prm.html","id":null,"dir":"Reference","previous_headings":"","what":"Set parameter for the model — QUARTIC_MODEL$set_prm","title":"Set parameter for the model — QUARTIC_MODEL$set_prm","text":"function store values environment update values closed form expression y, except parameter sigma. parameter sigma, value updated, corresponding value e updated.","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-set_prm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set parameter for the model — QUARTIC_MODEL$set_prm","text":"prm_name List Vector. Parameter character names. prm_val List Vector. Parameter values.","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-set_prm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set parameter for the model — QUARTIC_MODEL$set_prm","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-set_prm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set parameter for the model — QUARTIC_MODEL$set_prm","text":"","code":"# Instantiate mod <- quartic_model(a = -1, b = 1, c = 1, sigma = 0.5)  mod #>  #> ── <QUARTIC_MODEL object> #> y = 1 + x + a * x^2 + b * x^3 + c * x^4 + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #> Parameters: #>  - a: -1 #>  - b: 1 #>  - c: 1 #>  - sigma: 0.5   mod$set_prm(\"a\", 2)  mod #>  #> ── <QUARTIC_MODEL object> #> y = 1 + x + a * x^2 + b * x^3 + c * x^4 + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #> Parameters: #>  - a: 2 #>  - b: 1 #>  - c: 1 #>  - sigma: 0.5   mod$set_prm(\"sigma\", 1)  mod #>  #> ── <QUARTIC_MODEL object> #> y = 1 + x + a * x^2 + b * x^3 + c * x^4 + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #> Parameters: #>  - a: 2 #>  - b: 1 #>  - c: 1 #>  - sigma: 1"},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL.html","id":null,"dir":"Reference","previous_headings":"","what":"QUARTIC_MODEL class environment — QUARTIC_MODEL","title":"QUARTIC_MODEL class environment — QUARTIC_MODEL","text":"class visual inference quartic linear model, inherited VI_MODEL.","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"QUARTIC_MODEL class environment — QUARTIC_MODEL","text":"","code":"QUARTIC_MODEL"},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"QUARTIC_MODEL class environment — QUARTIC_MODEL","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/RAND_LOGNORMAL-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — RAND_LOGNORMAL$..init..","title":"Initialization method — RAND_LOGNORMAL$..init..","text":"function called instance built. User input stored environment.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_LOGNORMAL-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — RAND_LOGNORMAL$..init..","text":"mu Numeric. Mean log random variable. Default 0. sigma Numeric. Standard deviation log random variable. Default 1.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_LOGNORMAL-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — RAND_LOGNORMAL$..init..","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_LOGNORMAL-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — RAND_LOGNORMAL$..init..","text":"","code":"# Instantiate test <- rand_lognormal(mu = 1, sigma = 2) test #>  #> ── <RAND_LOGNORMAL object> #> [mu: 1, sigma: 2]"},{"path":"https://tengmcing.github.io/visage/reference/RAND_LOGNORMAL-cash-gen.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random values — RAND_LOGNORMAL$gen","title":"Generate random values — RAND_LOGNORMAL$gen","text":"function generates random values random variable.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_LOGNORMAL-cash-gen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random values — RAND_LOGNORMAL$gen","text":"n Integer. Number observations. mu Numeric. provided length n, values used realization. sigma Numeric. provided length n, values used realization.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_LOGNORMAL-cash-gen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random values — RAND_LOGNORMAL$gen","text":"vector numeric values.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/RAND_LOGNORMAL-cash-gen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random values — RAND_LOGNORMAL$gen","text":"","code":"test <- rand_lognormal(mu = 1, sigma = 2) test$gen(10) #>  [1]  1.02141317  9.56484814  0.58001387  1.06664094 26.72162584  2.82191931 #>  [7]  5.53787116  0.97328392  0.06651952  0.21273126  test$gen(3, mu = c(0,1,2), sigma = c(1,2,3)) #> [1]  2.2017418  0.5300569 47.3228123"},{"path":"https://tengmcing.github.io/visage/reference/RAND_LOGNORMAL.html","id":null,"dir":"Reference","previous_headings":"","what":"RAND_LOGNORMAL class environment — RAND_LOGNORMAL","title":"RAND_LOGNORMAL class environment — RAND_LOGNORMAL","text":"class log-normal random variable, inherited RAND_VAR.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_LOGNORMAL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RAND_LOGNORMAL class environment — RAND_LOGNORMAL","text":"","code":"RAND_LOGNORMAL"},{"path":"https://tengmcing.github.io/visage/reference/RAND_LOGNORMAL.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"RAND_LOGNORMAL class environment — RAND_LOGNORMAL","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/RAND_NORMAL-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — RAND_NORMAL$..init..","title":"Initialization method — RAND_NORMAL$..init..","text":"function called instance built. User input stored environment.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_NORMAL-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — RAND_NORMAL$..init..","text":"mu Numeric. Mean. Default 0. sigma Numeric. Standard deviation. Default 1.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_NORMAL-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — RAND_NORMAL$..init..","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_NORMAL-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — RAND_NORMAL$..init..","text":"","code":"# Instantiate test <- rand_normal(mu = 1, sigma = 2) test #>  #> ── <RAND_NORMAL object> #> [mu: 1, sigma: 2]"},{"path":"https://tengmcing.github.io/visage/reference/RAND_NORMAL-cash-gen.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random values — RAND_NORMAL$gen","title":"Generate random values — RAND_NORMAL$gen","text":"function generates random values random variable.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_NORMAL-cash-gen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random values — RAND_NORMAL$gen","text":"n Integer. Number observations. mu Numeric. provided length n, values used realization. sigma Numeric. provided length n, values used realization.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_NORMAL-cash-gen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random values — RAND_NORMAL$gen","text":"vector numeric values.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/RAND_NORMAL-cash-gen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random values — RAND_NORMAL$gen","text":"","code":"test <- rand_normal(mu = 1, sigma = 2) test$gen(10) #>  [1] -0.8857216  3.8146824  1.7406460  2.6620003  4.0644920  1.7348785 #>  [7] -0.8010374  1.7234418  2.2915657  2.2673275  test$gen(3, mu = c(0,1,2), sigma = c(1,2,4)) #> [1] -0.4565394  2.5225371  4.3377065"},{"path":"https://tengmcing.github.io/visage/reference/RAND_NORMAL.html","id":null,"dir":"Reference","previous_headings":"","what":"RAND_NORMAL class environment — RAND_NORMAL","title":"RAND_NORMAL class environment — RAND_NORMAL","text":"class normal random variable, inherited RAND_VAR.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_NORMAL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RAND_NORMAL class environment — RAND_NORMAL","text":"","code":"RAND_NORMAL"},{"path":"https://tengmcing.github.io/visage/reference/RAND_NORMAL.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"RAND_NORMAL class environment — RAND_NORMAL","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/RAND_T-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — RAND_T$..init..","title":"Initialization method — RAND_T$..init..","text":"function called instance built. User input stored environment.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_T-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — RAND_T$..init..","text":"mu Numeric. Mean. Default 0. tau Numeric. Scale parameter. Default 1. df Integer. Degree freedom. Default 10.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_T-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — RAND_T$..init..","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_T-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — RAND_T$..init..","text":"","code":"# Instantiate test <- rand_t(mu = 0, tau = 1, df = 3) test #>  #> ── <RAND_T object> #> [mu: 0, tau: 1, df: 3]"},{"path":"https://tengmcing.github.io/visage/reference/RAND_T-cash-gen.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random values — RAND_T$gen","title":"Generate random values — RAND_T$gen","text":"function generates random values random variable.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_T-cash-gen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random values — RAND_T$gen","text":"n Integer. Number observations. mu Numeric. provided length n, values used realization. tau Numeric. provided length n, values used realization. df Integer. provided length n, values used realization.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_T-cash-gen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random values — RAND_T$gen","text":"vector numeric values.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/RAND_T-cash-gen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random values — RAND_T$gen","text":"","code":"test <- rand_t(df = 12) test$gen(10) #>  [1]  0.97510056  0.37433776 -0.44801671 -1.31098250 -1.08235387  0.28841580 #>  [7] -0.83180065  0.39389265 -0.47373281  0.08233864  test$gen(3, mu = c(1,2,3), tau = c(2,3,4), df = 10) #> [1] 2.334299 9.651929 2.889913"},{"path":"https://tengmcing.github.io/visage/reference/RAND_T.html","id":null,"dir":"Reference","previous_headings":"","what":"RAND_T class environment — RAND_T","title":"RAND_T class environment — RAND_T","text":"class discrete uniform random variable, inherited RAND_VAR.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_T.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RAND_T class environment — RAND_T","text":"","code":"RAND_T"},{"path":"https://tengmcing.github.io/visage/reference/RAND_T.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"RAND_T class environment — RAND_T","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — RAND_UNIFORM$..init..","title":"Initialization method — RAND_UNIFORM$..init..","text":"function called instance built. User input stored environment.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — RAND_UNIFORM$..init..","text":"Numeric. Lower bound. Default 0. b Numeric. Upper bound. Default 1.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — RAND_UNIFORM$..init..","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — RAND_UNIFORM$..init..","text":"","code":"# Instantiate test <- rand_uniform(a = 1, b = 2) test #>  #> ── <RAND_UNIFORM object> #> [a: 1, b: 2]"},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM-cash-gen.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random values — RAND_UNIFORM$gen","title":"Generate random values — RAND_UNIFORM$gen","text":"function generates random values random variable.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM-cash-gen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random values — RAND_UNIFORM$gen","text":"n Integer. Number observations. Numeric. provided length n, values used realization. b Numeric. provided length n, values used realization.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM-cash-gen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random values — RAND_UNIFORM$gen","text":"vector numeric values.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM-cash-gen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random values — RAND_UNIFORM$gen","text":"","code":"test <- rand_uniform(a = 1, b = 2) test$gen(10) #>  [1] 1.137069 1.133181 1.435886 1.456972 1.860435 1.704314 1.757486 1.501987 #>  [9] 1.211501 1.042683  test$gen(3, a = c(1,2,3), b = c(2,3,4)) #> [1] 1.903444 2.211401 3.661088"},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM.html","id":null,"dir":"Reference","previous_headings":"","what":"RAND_UNIFORM class environment — RAND_UNIFORM","title":"RAND_UNIFORM class environment — RAND_UNIFORM","text":"class uniform random variable, inherited RAND_VAR.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RAND_UNIFORM class environment — RAND_UNIFORM","text":"","code":"RAND_UNIFORM"},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"RAND_UNIFORM class environment — RAND_UNIFORM","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM_D-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — RAND_UNIFORM_D$..init..","title":"Initialization method — RAND_UNIFORM_D$..init..","text":"function called instance built. User input stored environment.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM_D-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — RAND_UNIFORM_D$..init..","text":"Numeric. Lower bound. Default 0. b Numeric. Upper bound. Default 1. k Integer. Number unique discrete values. Default 5. even Boolean. Whether candidate values evenly spaced.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM_D-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — RAND_UNIFORM_D$..init..","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM_D-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — RAND_UNIFORM_D$..init..","text":"","code":"# Instantiate test <- rand_uniform_d(a = 1, b = 2, k = 3) test #>  #> ── <RAND_UNIFORM_D object> #> [a: 1, b: 2, k: 3, even: 0]"},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM_D-cash-gen.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random values — RAND_UNIFORM_D$gen","title":"Generate random values — RAND_UNIFORM_D$gen","text":"function generates random values random variable.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM_D-cash-gen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random values — RAND_UNIFORM_D$gen","text":"n Integer. Number observations. Numeric. provided length n, values used realization. b Numeric. provided length n, values used realization. k Numeric. provided length n, values used realization. even Boolean. provided length n, values used realization.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM_D-cash-gen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random values — RAND_UNIFORM_D$gen","text":"vector numeric values.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM_D-cash-gen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random values — RAND_UNIFORM_D$gen","text":"","code":"test <- rand_uniform_d(a = 1, b = 2, k = 2, even = TRUE) test$gen(10) #>  [1] 2 1 2 1 2 1 1 2 1 1  test$gen(3, a = c(1,2,3), b = c(2,3,4), k = 1, even = c(TRUE, TRUE, FALSE)) #> [1] 1 2 1"},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM_D.html","id":null,"dir":"Reference","previous_headings":"","what":"RAND_UNIFORM_D class environment — RAND_UNIFORM_D","title":"RAND_UNIFORM_D class environment — RAND_UNIFORM_D","text":"class discrete uniform random variable, inherited RAND_VAR.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM_D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RAND_UNIFORM_D class environment — RAND_UNIFORM_D","text":"","code":"RAND_UNIFORM_D"},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM_D.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"RAND_UNIFORM_D class environment — RAND_UNIFORM_D","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — RAND_VAR$..init..","title":"Initialization method — RAND_VAR$..init..","text":"function called instance built. User input stored environment.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — RAND_VAR$..init..","text":"dist Character. Distribution name. prm List. List parameters.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — RAND_VAR$..init..","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — RAND_VAR$..init..","text":"","code":"RAND_VAR$..init.. #> function (dist = \"uniform\", prm = list())  #> { #>     self$dist <- dist #>     if (!is.list(prm))  #>         stop(\"`prm` is not a list!\") #>     self$prm <- prm #>     return(invisible(self)) #> } #> <environment: 0x10c099190>  # Instantiate test <- rand_var(dist = \"uniform\", prm = list(a = 1, b = 2)) test$prm #> $a #> [1] 1 #>  #> $b #> [1] 2 #>  test$dist #> [1] \"uniform\""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-..str...html","id":null,"dir":"Reference","previous_headings":"","what":"String representation of the object — RAND_VAR$..str..","title":"String representation of the object — RAND_VAR$..str..","text":"function returns string representation object.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-..str...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"String representation of the object — RAND_VAR$..str..","text":"string.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-..str...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"String representation of the object — RAND_VAR$..str..","text":"","code":"RAND_VAR$..str..() #> [1] \"<RAND_VAR class>\"  test <- rand_var(dist = \"uniform\", prm = list(a = 1, b = 2)) test$..str..() #> [1] \"<RAND_VAR object>\\n [a: 1, b: 2]\""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-E.html","id":null,"dir":"Reference","previous_headings":"","what":"Expectation of the random variable — RAND_VAR$E","title":"Expectation of the random variable — RAND_VAR$E","text":"Expectation random variable. User override method derived class.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-E.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expectation of the random variable — RAND_VAR$E","text":"NA","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-E.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expectation of the random variable — RAND_VAR$E","text":"","code":"RAND_VAR$E() #> [1] NA"},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-Var.html","id":null,"dir":"Reference","previous_headings":"","what":"Variance of the random variable — RAND_VAR$Var","title":"Variance of the random variable — RAND_VAR$Var","text":"Variance random variable. User override method derived class.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-Var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variance of the random variable — RAND_VAR$Var","text":"NA","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-Var.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variance of the random variable — RAND_VAR$Var","text":"","code":"RAND_VAR$Var() #> [1] NA"},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Distribution name — RAND_VAR$dist","title":"Distribution name — RAND_VAR$dist","text":"string, initialized instance built.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distribution name — RAND_VAR$dist","text":"","code":"# Instantiate test <- rand_var(dist = \"uniform\", prm = list(a = 1, b = 2)) test$prm #> $a #> [1] 1 #>  #> $b #> [1] 2 #>  test$dist #> [1] \"uniform\""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-gen.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random values — RAND_VAR$gen","title":"Generate random values — RAND_VAR$gen","text":"function generates random values random variable.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-gen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random values — RAND_VAR$gen","text":"n Integer. Number observations. ... Ignored.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-gen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random values — RAND_VAR$gen","text":"NA. User needs define gen method derived class.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-gen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random values — RAND_VAR$gen","text":"","code":"test <- RAND_VAR$gen(10)"},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-prm.html","id":null,"dir":"Reference","previous_headings":"","what":"List of parameters — RAND_VAR$prm","title":"List of parameters — RAND_VAR$prm","text":"list, initialized instance built.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-prm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of parameters — RAND_VAR$prm","text":"","code":"# Instantiate test <- rand_var(dist = \"uniform\", prm = list(a = 1, b = 2)) test$prm #> $a #> [1] 1 #>  #> $b #> [1] 2 #>  test$dist #> [1] \"uniform\""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-set_prm.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random values — RAND_VAR$set_prm","title":"Generate random values — RAND_VAR$set_prm","text":"function updates parameters.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-set_prm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random values — RAND_VAR$set_prm","text":"prm_name List Vector. sequence character parameter names. prm_value List Vector. sequence parameter values.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-set_prm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random values — RAND_VAR$set_prm","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-set_prm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random values — RAND_VAR$set_prm","text":"","code":"test <- rand_var() test$set_prm(\"a\", 1) test #>  #> ── <RAND_VAR object> #> [a: 1]"},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR.html","id":null,"dir":"Reference","previous_headings":"","what":"RAND_VAR class environment — RAND_VAR","title":"RAND_VAR class environment — RAND_VAR","text":"base class random variable, inherited bandicoot::BASE.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RAND_VAR class environment — RAND_VAR","text":"","code":"RAND_VAR"},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"RAND_VAR class environment — RAND_VAR","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — SIMPLE_CUBIC_MODEL$..init..","title":"Initialization method — SIMPLE_CUBIC_MODEL$..init..","text":"function called instance built. User input stored environment. response variable model y. formula y defined SIMPLE_CUBIC_MODEL$formula, null formula defined SIMPLE_CUBIC_MODEL$null_formula, alternative defined SIMPLE_CUBIC_MODEL$alt_formula.","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — SIMPLE_CUBIC_MODEL$..init..","text":"Numeric. Default = 1. b Numeric. Default b = 1. sigma Positive numeric. Default sigma = 1. x Random variable closed form expression. Default x = rand_uniform(-1, 1, env = new.env(parent = parent.env(self))). e Random variable closed form expression. Default e = rand_normal(0, sigma, env = new.env(parent = parent.env(self))).","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — SIMPLE_CUBIC_MODEL$..init..","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — SIMPLE_CUBIC_MODEL$..init..","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal()  test <- simple_cubic_model(a = 200, b = 200, x = x, e = e)  test #>  #> ── <SIMPLE_CUBIC_MODEL object> #> y = 1 + x + a * x^2 + b * x^3 + e #>  - x: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #> Parameters: #>  - a: 200 #>  - b: 200 #>  - sigma: 1   # Generate data test$gen(10) #>            y         x          e    .resid    .fitted #> 1  168.53846 0.7030087 -1.4971662 -23.70854 192.246999 #> 2  303.31711 0.8922242  0.1585662  19.41738 283.899738 #> 3  159.53752 0.6851842 -0.3788172 -24.07557 183.613093 #> 4  166.67202 0.6975997 -0.2513820 -22.95495 189.626974 #> 5   75.89404 0.4976895  0.2023785 -16.89983  92.793873 #> 6   26.59478 0.3092583  0.2418459  25.07372   1.521064 #> 7  372.68988 0.9691593  0.8063879  51.52411 321.165770 #> 8   19.91782 0.2682683  0.3946286  38.25161 -18.333790 #> 9  140.99932 0.6501972 -0.1771570 -25.66668 166.666004 #> 10  84.94296 0.5247555 -0.5556692 -20.96124 105.904197  # Generate lineup test$gen_lineup(10, k = 3) #>              y           x          e      .resid    .fitted test_name #> 1    8.2979016 0.161186423  1.1029437  -0.1810592   8.478961    F-test #> 2  256.4668756 0.832564333  0.5810179  46.9087077 209.558168    F-test #> 3   84.6665356 0.523206639 -0.2507683 -32.2383011 116.904837    F-test #> 4    4.2535880 0.099319639  0.9854447  14.3038692 -10.050281    F-test #> 5   13.0242841 0.218025394  0.2264736 -12.4780776  25.502362    F-test #> 6    1.4488015 0.005001875  0.4387708  39.7474671 -38.298666    F-test #> 7   35.7144364 0.361099309 -1.1421487 -32.6388873  68.353324    F-test #> 8   10.0986066 0.194766170 -0.1605784  -8.4375648  18.536171    F-test #> 9  114.0838802 0.594807324 -0.3581386 -24.2655241 138.349404    F-test #> 10 189.1403245 0.733409113  0.9306020   9.2793701 179.860954    F-test #> 11  -8.0670428 0.161186423  1.1029437 -16.5460036   8.478961    F-test #> 12 207.5567827 0.832564333  0.5810179  -2.0013852 209.558168    F-test #> 13 104.0802194 0.523206639 -0.2507683 -12.8246173 116.904837    F-test #> 14  -1.8858816 0.099319639  0.9854447   8.1643997 -10.050281    F-test #> 15   0.2215766 0.218025394  0.2264736 -25.2807851  25.502362    F-test #> 16  13.7648935 0.005001875  0.4387708  52.0635591 -38.298666    F-test #> 17  42.2702022 0.361099309 -1.1421487 -26.0831215  68.353324    F-test #> 18   5.8680439 0.194766170 -0.1605784 -12.6681274  18.536171    F-test #> 19 127.0132471 0.594807324 -0.3581386 -11.3361571 138.349404    F-test #> 20 226.3731930 0.733409113  0.9306020  46.5122386 179.860954    F-test #> 21  -4.2545274 0.161186423  1.1029437 -12.7334883   8.478961    F-test #> 22 205.0324757 0.832564333  0.5810179  -4.5256922 209.558168    F-test #> 23  79.6824498 0.523206639 -0.2507683 -37.2223869 116.904837    F-test #> 24 -32.5116747 0.099319639  0.9854447 -22.4613934 -10.050281    F-test #> 25  77.6324531 0.218025394  0.2264736  52.1300913  25.502362    F-test #> 26 -16.0025462 0.005001875  0.4387708  22.2961194 -38.298666    F-test #> 27  50.8838919 0.361099309 -1.1421487 -17.4694318  68.353324    F-test #> 28  -2.7992422 0.194766170 -0.1605784 -21.3354135  18.536171    F-test #> 29 165.7153670 0.594807324 -0.3581386  27.3659627 138.349404    F-test #> 30 193.8165869 0.733409113  0.9306020  13.9556325 179.860954    F-test #>       statistic      p_value k  null #> 1  8174.6834385 4.937111e-11 1 FALSE #> 2  8174.6834385 4.937111e-11 1 FALSE #> 3  8174.6834385 4.937111e-11 1 FALSE #> 4  8174.6834385 4.937111e-11 1 FALSE #> 5  8174.6834385 4.937111e-11 1 FALSE #> 6  8174.6834385 4.937111e-11 1 FALSE #> 7  8174.6834385 4.937111e-11 1 FALSE #> 8  8174.6834385 4.937111e-11 1 FALSE #> 9  8174.6834385 4.937111e-11 1 FALSE #> 10 8174.6834385 4.937111e-11 1 FALSE #> 11   11.4741510 8.903986e-03 2  TRUE #> 12   11.4741510 8.903986e-03 2  TRUE #> 13   11.4741510 8.903986e-03 2  TRUE #> 14   11.4741510 8.903986e-03 2  TRUE #> 15   11.4741510 8.903986e-03 2  TRUE #> 16   11.4741510 8.903986e-03 2  TRUE #> 17   11.4741510 8.903986e-03 2  TRUE #> 18   11.4741510 8.903986e-03 2  TRUE #> 19   11.4741510 8.903986e-03 2  TRUE #> 20   11.4741510 8.903986e-03 2  TRUE #> 21    0.1754956 8.431973e-01 3  TRUE #> 22    0.1754956 8.431973e-01 3  TRUE #> 23    0.1754956 8.431973e-01 3  TRUE #> 24    0.1754956 8.431973e-01 3  TRUE #> 25    0.1754956 8.431973e-01 3  TRUE #> 26    0.1754956 8.431973e-01 3  TRUE #> 27    0.1754956 8.431973e-01 3  TRUE #> 28    0.1754956 8.431973e-01 3  TRUE #> 29    0.1754956 8.431973e-01 3  TRUE #> 30    0.1754956 8.431973e-01 3  TRUE  # Plot the lineup test$plot_lineup(test$gen_lineup(100))"},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-E.html","id":null,"dir":"Reference","previous_headings":"","what":"Expectation of the residuals — SIMPLE_CUBIC_MODEL$E","title":"Expectation of the residuals — SIMPLE_CUBIC_MODEL$E","text":"function calculate expectation residuals use Frisch–Waugh–Lovell theorem.","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-E.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expectation of the residuals — SIMPLE_CUBIC_MODEL$E","text":"dat Dataframe/List. List contains variable x z. Numeric. Default = self$prm$. b Numeric. Default b = self$prm$b.","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-E.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expectation of the residuals — SIMPLE_CUBIC_MODEL$E","text":"vector numeric expectations.","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-E.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expectation of the residuals — SIMPLE_CUBIC_MODEL$E","text":"","code":"mod <- simple_cubic_model(-1, 1, 0.5) dat <- mod$gen(1000, fit_model = TRUE) dat$exp <- mod$E(dat) mod$plot(dat) + ggplot2::geom_point(ggplot2::aes(.fitted, exp),                                     col = \"red\",                                     alpha = 0.6)"},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-alt_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the alternative model — SIMPLE_CUBIC_MODEL$alt_formula","title":"Formula for fitting the alternative model — SIMPLE_CUBIC_MODEL$alt_formula","text":"Quoted formula fitting alternative model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-alt_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the alternative model — SIMPLE_CUBIC_MODEL$alt_formula","text":"","code":"SIMPLE_CUBIC_MODEL$alt_formula #> y ~ x + I(x^2) + I(x^3)"},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Closed form expression of y — SIMPLE_CUBIC_MODEL$formula","title":"Closed form expression of y — SIMPLE_CUBIC_MODEL$formula","text":"quoted formula, passed CLOSED_FORM$instantiate define closed form expression y.","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Closed form expression of y — SIMPLE_CUBIC_MODEL$formula","text":"","code":"SIMPLE_CUBIC_MODEL$formula #> y ~ 1 + x + a * x^2 + b * x^3 + e"},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-null_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the null model — SIMPLE_CUBIC_MODEL$null_formula","title":"Formula for fitting the null model — SIMPLE_CUBIC_MODEL$null_formula","text":"Quoted formula fitting null model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-null_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the null model — SIMPLE_CUBIC_MODEL$null_formula","text":"","code":"SIMPLE_CUBIC_MODEL$null_formula #> y ~ x"},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-sample_effect_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the sample based effect size of the simulated data — SIMPLE_CUBIC_MODEL$sample_effect_size","title":"Compute the sample based effect size of the simulated data — SIMPLE_CUBIC_MODEL$sample_effect_size","text":"function computes sample based effect size simulated data.","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-sample_effect_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the sample based effect size of the simulated data — SIMPLE_CUBIC_MODEL$sample_effect_size","text":"dat Dataframe/List. List contains variable x. Numeric. Default = self$prm$. b Numeric. Default b = self$prm$b. sigma Positive numeric. Default sigma = self$prm$sigma.","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-sample_effect_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the sample based effect size of the simulated data — SIMPLE_CUBIC_MODEL$sample_effect_size","text":"numeric value.","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-sample_effect_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the sample based effect size of the simulated data — SIMPLE_CUBIC_MODEL$sample_effect_size","text":"","code":"mod <- simple_cubic_model(-1, 1, 0.5) dat <- mod$gen(1000, fit_model = TRUE) mod$sample_effect_size(dat) #> [1] 1.360239"},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-set_prm.html","id":null,"dir":"Reference","previous_headings":"","what":"Set parameter for the model — SIMPLE_CUBIC_MODEL$set_prm","title":"Set parameter for the model — SIMPLE_CUBIC_MODEL$set_prm","text":"function store values environment update values closed form expression y, except parameter sigma. parameter sigma, value updated, corresponding value e updated.","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-set_prm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set parameter for the model — SIMPLE_CUBIC_MODEL$set_prm","text":"prm_name List Vector. Parameter character names. prm_val List Vector. Parameter values.","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-set_prm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set parameter for the model — SIMPLE_CUBIC_MODEL$set_prm","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-set_prm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set parameter for the model — SIMPLE_CUBIC_MODEL$set_prm","text":"","code":"# Instantiate mod <- simple_cubic_model(a = -1, b = 1, sigma = 0.5)  mod #>  #> ── <SIMPLE_CUBIC_MODEL object> #> y = 1 + x + a * x^2 + b * x^3 + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #> Parameters: #>  - a: -1 #>  - b: 1 #>  - sigma: 0.5   mod$set_prm(\"a\", 2)  mod #>  #> ── <SIMPLE_CUBIC_MODEL object> #> y = 1 + x + a * x^2 + b * x^3 + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #> Parameters: #>  - a: 2 #>  - b: 1 #>  - sigma: 0.5   mod$set_prm(\"sigma\", 1)  mod #>  #> ── <SIMPLE_CUBIC_MODEL object> #> y = 1 + x + a * x^2 + b * x^3 + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #> Parameters: #>  - a: 2 #>  - b: 1 #>  - sigma: 1"},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL.html","id":null,"dir":"Reference","previous_headings":"","what":"SIMPLE_CUBIC_MODEL class environment — SIMPLE_CUBIC_MODEL","title":"SIMPLE_CUBIC_MODEL class environment — SIMPLE_CUBIC_MODEL","text":"class visual inference simple cubic linear model, inherited VI_MODEL.","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SIMPLE_CUBIC_MODEL class environment — SIMPLE_CUBIC_MODEL","text":"","code":"SIMPLE_CUBIC_MODEL"},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"SIMPLE_CUBIC_MODEL class environment — SIMPLE_CUBIC_MODEL","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-..cache...html","id":null,"dir":"Reference","previous_headings":"","what":"Cache list, containing the last fitted model, data frame and formula — VI_MODEL$..cache..","title":"Cache list, containing the last fitted model, data frame and formula — VI_MODEL$..cache..","text":"list, used cache = TRUE calling fit method.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-..cache...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cache list, containing the last fitted model, data frame and formula — VI_MODEL$..cache..","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  # Turn on cache test$fit(test$gen(10), cache = TRUE) #>  #> Call: #> stats::lm(formula = y ~ x, data = test$gen(10)) #>  #> Coefficients: #> (Intercept)            x   #>      0.5371       2.4550   #>   test$..cache.. #> $dat #>             y          x           e     .resid   .fitted #> 1  2.70041295 0.89184237  0.01318775 -0.4861032 3.1865161 #> 2  0.36658615 0.53451153 -1.45362796 -1.7961332 2.1627193 #> 3  0.14277243 0.01523344 -0.87269307 -0.5321513 0.6749237 #> 4  3.93123433 0.60936551  1.95054251  1.5540492 2.3771852 #> 5  3.59532086 0.98478629  0.64073053  0.1425090 3.4528119 #> 6  4.14476037 0.64215488  2.09024261  1.6736296 2.4711307 #> 7  1.14252524 0.63887879 -0.90451966 -1.3192191 2.4617443 #> 8  1.88783385 0.09722767  0.78115296  0.9779866 0.9098473 #> 9  1.72102519 0.13497229  0.56783538  0.7030349 1.0179902 #> 10 0.04940525 0.11717814 -1.08150361 -0.9176026 0.9670078 #>  #> $formula #> y ~ x #>  #> $mod #>  #> Call: #> stats::lm(formula = y ~ x, data = test$gen(10)) #>  #> Coefficients: #> (Intercept)            x   #>      0.5371       2.4550   #>  #>"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — VI_MODEL$..init..","title":"Initialization method — VI_MODEL$..init..","text":"function called instance built. User input stored environment. response variable model y.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — VI_MODEL$..init..","text":"prm Named List. list random variables closed form expressions needs used constructing y. Constant parameters also supplied. prm_type Named List. list characters denoting type parameters. \"r\" stands random variable closed form used expression y, \"o\" stands others. value affects string representation object. formula Formula. passed CLOSED_FORM$instantiate define closed form expression y. Default formula = self$formula. null_formula Formula. Formula fitting null model. Default NULL. alt_formula Formula. Formula fitting alternative model. Default NULL.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — VI_MODEL$..init..","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — VI_MODEL$..init..","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  test #>  #> ── <VI_MODEL object> #> y = 1 + x + x^2 + e #>  - x: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1]"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-..str...html","id":null,"dir":"Reference","previous_headings":"","what":"String representation of the object — VI_MODEL$..str..","title":"String representation of the object — VI_MODEL$..str..","text":"function returns string representation object.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-..str...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"String representation of the object — VI_MODEL$..str..","text":"string.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-..str...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"String representation of the object — VI_MODEL$..str..","text":"","code":"VI_MODEL$..str..() #> [1] \"<VI_MODEL class>\"  # Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  test$..str..() #> [1] \"<VI_MODEL object>\\n y = 1 + x + x^2 + e\\n  - x: <RAND_UNIFORM object>\\n    [a: 0, b: 1]\\n  - e: <RAND_NORMAL object>\\n    [mu: 0, sigma: 1]\""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-alt_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the alternative model — VI_MODEL$alt_formula","title":"Formula for fitting the alternative model — VI_MODEL$alt_formula","text":"quoted formula, used fit alternative model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-alt_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the alternative model — VI_MODEL$alt_formula","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  # A formula with environment equals to `test` test$alt_formula #> y ~ x + I(x^2)  # Use alternative formula in `fit` test$fit(test$gen(10), test$alt_formula) #>  #> Call: #> stats::lm(formula = y ~ x + I(x^2), data = test$gen(10)) #>  #> Coefficients: #> (Intercept)            x       I(x^2)   #>      0.4546       3.1471      -0.9350   #>   # F-test also needs to use the alternative model test$test(test$gen(1000)) #> $name #> [1] \"F-test\" #>  #> $statistic #> [1] 1.744172 #>  #> $p_value #> [1] 0.1869141 #>"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-average_effect_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the effect size of the simulated data or the defined model — VI_MODEL$average_effect_size","title":"Compute the effect size of the simulated data or the defined model — VI_MODEL$average_effect_size","text":"function computes average effect size defined model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-average_effect_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the effect size of the simulated data or the defined model — VI_MODEL$average_effect_size","text":"n Number observations plot. tol Tolerance convergence. window_size Window size convergence check. ... Arguments passed method VI_MODEL$sample_effect_size.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-average_effect_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the effect size of the simulated data or the defined model — VI_MODEL$average_effect_size","text":"average effect size.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Test the null model against the alternative model — VI_MODEL$fit","title":"Test the null model against the alternative model — VI_MODEL$fit","text":"function fit linear model using stats::lm.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test the null model against the alternative model — VI_MODEL$fit","text":"dat Data frame. data frame containing variables needed formula. Default dat = self$..cache..$dat. formula Formula. Formula fitting model. Default formula = self$null_formula. cache Boolean. Whether cache model. Default FALSE. ... Arguments passed stats::lm.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test the null model against the alternative model — VI_MODEL$fit","text":"fitted linear model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test the null model against the alternative model — VI_MODEL$fit","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  test$fit(test$gen(100000)) #>  #> Call: #> stats::lm(formula = y ~ x, data = test$gen(1e+05)) #>  #> Coefficients: #> (Intercept)            x   #>      0.8303       2.0135   #>   test$fit(test$gen(100000), formula = y ~ x + I(x^2)) #>  #> Call: #> stats::lm(formula = y ~ x + I(x^2), data = test$gen(1e+05)) #>  #> Coefficients: #> (Intercept)            x       I(x^2)   #>       1.009        0.952        1.038   #>"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Closed form expression of y — VI_MODEL$formula","title":"Closed form expression of y — VI_MODEL$formula","text":"quoted formula, passed CLOSED_FORM$instantiate define closed form expression y.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Closed form expression of y — VI_MODEL$formula","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  # A formula with environment equals to `test` test$formula #> y ~ 1 + x + x^2 + e  # `y` has the same expression test$prm$y #>  #> ── <CLOSED_FORM object> #> EXPR = 1 + x + x^2 + e #>  - x: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1]"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-gen.html","id":null,"dir":"Reference","previous_headings":"","what":"Generating random values from the expression of y — VI_MODEL$gen","title":"Generating random values from the expression of y — VI_MODEL$gen","text":"function generates random values expression y, keeps right hand side information data frame.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-gen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generating random values from the expression of y — VI_MODEL$gen","text":"n Integer. Number observations. fit_model Boolean. Whether fit null model obtain fitted values residuals. Default TRUE. test Boolean. Whether test null model alternative model obtain test statistic p-value. Default FALSE. computed List. Default NULL. provided, random variables random closed form expression use values list, makes expression potentially deterministic.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-gen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generating random values from the expression of y — VI_MODEL$gen","text":"data frame.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-gen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generating random values from the expression of y — VI_MODEL$gen","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  dat <- test$gen(10) dat #>           y          x          e      .resid  .fitted #> 1  2.181303 0.34361211  0.7196220  0.04673363 2.134570 #> 2  2.709697 0.50525009  0.9491690  0.63606571 2.073631 #> 3  3.336069 0.54693797  1.4899895  1.27815418 2.057914 #> 4  2.682229 0.31685982  1.2649687  0.53757303 2.144656 #> 5  2.316093 0.67233648  0.1917197  0.30545430 2.010638 #> 6  0.352242 0.36084107 -1.1388054 -1.77583238 2.128074 #> 7  1.124684 0.42776140 -0.4860573 -0.97816100 2.102845 #> 8  1.391063 0.54282316 -0.4464167 -0.66840227 2.059466 #> 9  2.890814 0.02153749  1.8688128  0.63481978 2.255994 #> 10 2.159453 0.23409623  0.8705559 -0.01640497 2.175858  test$gen(10, computed = list(e = dat$e)) #>            y          e          x      .resid   .fitted #> 1  1.8513290  0.7196220 0.11782441  0.67867725 1.1726518 #> 2  2.6769460  0.9491690 0.48882608  0.25067664 2.4262694 #> 3  3.4897471  1.4899895 0.61792557  0.62724944 2.8624976 #> 4  3.4519712  1.2649687 0.69875040  0.31636582 3.1356054 #> 5  1.2983932  0.1917197 0.09722147  0.19535891 1.1030343 #> 6  0.1578863 -1.1388054 0.23938600 -1.42552308 1.5834094 #> 7  0.5492292 -0.4860573 0.03412225 -0.34059226 0.8898215 #> 8  1.8720756 -0.4464167 0.75239464 -1.44479406 3.3168697 #> 9  3.6836295  1.8688128 0.53189955  1.11181445 2.5718150 #> 10 2.8265758  0.8705559 0.59818938  0.03076689 2.7958089  test$gen(10, test = TRUE) #>             y         x           e      .resid  .fitted test_name statistic #> 1   1.0953586 0.3539549 -0.38388032 -0.50698122 1.602340    F-test 0.6208182 #> 2   1.3896059 0.5508355 -0.46464934 -0.18939569 1.579002    F-test 0.6208182 #> 3   1.5968128 0.7216158 -0.64553227  0.03805569 1.558757    F-test 0.6208182 #> 4  -0.6144918 0.3004186 -2.00516171 -2.22317787 1.608686    F-test 0.6208182 #> 5   2.3348543 0.5050097  0.57480978  0.75042050 1.584434    F-test 0.6208182 #> 6   2.0964468 0.6854306 -0.05879878  0.53340026 1.563047    F-test 0.6208182 #> 7   1.7458138 0.5190429 -0.04263452  0.16304358 1.582770    F-test 0.6208182 #> 8   1.3239188 0.8703345 -1.30389782 -0.21720916 1.541128    F-test 0.6208182 #> 9   1.7273424 0.7745808 -0.64721396  0.17486373 1.552479    F-test 0.6208182 #> 10  3.1093524 0.1006041  1.99862713  1.47698016 1.632372    F-test 0.6208182 #>      p_value #> 1  0.4565906 #> 2  0.4565906 #> 3  0.4565906 #> 4  0.4565906 #> 5  0.4565906 #> 6  0.4565906 #> 7  0.4565906 #> 8  0.4565906 #> 9  0.4565906 #> 10 0.4565906"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-gen_lineup.html","id":null,"dir":"Reference","previous_headings":"","what":"Generating random values from the expression of y, and forms a lineup — VI_MODEL$gen_lineup","title":"Generating random values from the expression of y, and forms a lineup — VI_MODEL$gen_lineup","text":"function generates random values expression y, keeps right hand side information data frame.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-gen_lineup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generating random values from the expression of y, and forms a lineup — VI_MODEL$gen_lineup","text":"n Integer. Number observations. k Integer. Number plots lineup. Default k = 20. pos Integer. Position true data plot. Default pos = NULL, means position random. computed List. Default NULL. provided, random variables random closed form expression use values list, makes expression potentially deterministic.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-gen_lineup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generating random values from the expression of y, and forms a lineup — VI_MODEL$gen_lineup","text":"data frame.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-gen_lineup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generating random values from the expression of y, and forms a lineup — VI_MODEL$gen_lineup","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  test$gen_lineup(10, k = 3) #>            y         x          e     .resid  .fitted test_name statistic #> 1  2.2337979 0.3184964  0.8138616  0.4524626 1.781335    F-test 13.452795 #> 2  1.2316579 0.4662598 -0.4520001 -0.7315824 1.963240    F-test 13.452795 #> 3  1.6634854 0.6777285 -0.4735591 -0.5600846 2.223570    F-test 13.452795 #> 4  1.3424917 0.3738539 -0.1711289 -0.5069917 1.849483    F-test 13.452795 #> 5  1.3065891 0.7687011 -1.0530134 -1.0289731 2.335562    F-test 13.452795 #> 6  4.7657337 0.9982908  1.7708584  2.1475339 2.618200    F-test 13.452795 #> 7  1.8743713 0.4043063  0.3066015 -0.0126007 1.886972    F-test 13.452795 #> 8  0.4633385 0.6903336 -1.7035555 -1.7757490 2.239087    F-test 13.452795 #> 9  2.8437422 0.2128211  1.5856284  1.1924991 1.651243    F-test 13.452795 #> 10 2.7963563 0.4740823  1.0975199  0.8234861 1.972870    F-test 13.452795 #> 11 2.0154726 0.3184964  0.8138616  0.2341372 1.781335    F-test  1.697958 #> 12 0.6572083 0.4662598 -0.4520001 -1.3060320 1.963240    F-test  1.697958 #> 13 3.7838578 0.6777285 -0.4735591  1.5602878 2.223570    F-test  1.697958 #> 14 0.4117211 0.3738539 -0.1711289 -1.4377624 1.849483    F-test  1.697958 #> 15 3.1871892 0.7687011 -1.0530134  0.8516270 2.335562    F-test  1.697958 #> 16 1.3780200 0.9982908  1.7708584 -1.2401799 2.618200    F-test  1.697958 #> 17 2.4793629 0.4043063  0.3066015  0.5923909 1.886972    F-test  1.697958 #> 18 1.7258043 0.6903336 -1.7035555 -0.5132831 2.239087    F-test  1.697958 #> 19 1.2076225 0.2128211  1.5856284 -0.4436207 1.651243    F-test  1.697958 #> 20 3.6753055 0.4740823  1.0975199  1.7024353 1.972870    F-test  1.697958 #> 21 0.5227955 0.3184964  0.8138616 -1.2585399 1.781335    F-test  1.788007 #> 22 0.2425309 0.4662598 -0.4520001 -1.7207094 1.963240    F-test  1.788007 #> 23 2.9429976 0.6777285 -0.4735591  0.7194276 2.223570    F-test  1.788007 #> 24 1.5241622 0.3738539 -0.1711289 -0.3253212 1.849483    F-test  1.788007 #> 25 2.6112160 0.7687011 -1.0530134  0.2756538 2.335562    F-test  1.788007 #> 26 3.1668421 0.9982908  1.7708584  0.5486422 2.618200    F-test  1.788007 #> 27 1.5513904 0.4043063  0.3066015 -0.3355817 1.886972    F-test  1.788007 #> 28 1.2213615 0.6903336 -1.7035555 -1.0177260 2.239087    F-test  1.788007 #> 29 3.7967325 0.2128211  1.5856284  2.1454894 1.651243    F-test  1.788007 #> 30 2.9415354 0.4740823  1.0975199  0.9686651 1.972870    F-test  1.788007 #>        p_value k  null #> 1  0.007987396 2 FALSE #> 2  0.007987396 2 FALSE #> 3  0.007987396 2 FALSE #> 4  0.007987396 2 FALSE #> 5  0.007987396 2 FALSE #> 6  0.007987396 2 FALSE #> 7  0.007987396 2 FALSE #> 8  0.007987396 2 FALSE #> 9  0.007987396 2 FALSE #> 10 0.007987396 2 FALSE #> 11 0.233778614 1  TRUE #> 12 0.233778614 1  TRUE #> 13 0.233778614 1  TRUE #> 14 0.233778614 1  TRUE #> 15 0.233778614 1  TRUE #> 16 0.233778614 1  TRUE #> 17 0.233778614 1  TRUE #> 18 0.233778614 1  TRUE #> 19 0.233778614 1  TRUE #> 20 0.233778614 1  TRUE #> 21 0.222985393 3  TRUE #> 22 0.222985393 3  TRUE #> 23 0.222985393 3  TRUE #> 24 0.222985393 3  TRUE #> 25 0.222985393 3  TRUE #> 26 0.222985393 3  TRUE #> 27 0.222985393 3  TRUE #> 28 0.222985393 3  TRUE #> 29 0.222985393 3  TRUE #> 30 0.222985393 3  TRUE  test$gen_lineup(10, k = 3, computed = list(e = 1:10)) #>             y  e          x     .resid  .fitted test_name statistic   p_value k #> 1   2.0946218  1 0.08704496 -3.0056956 5.100317    F-test 1.0685115 0.3356668 2 #> 2   3.1902553  2 0.16351739 -2.3577832 5.548039    F-test 1.0685115 0.3356668 2 #> 3   4.7510404  3 0.50052007 -2.7700389 7.521079    F-test 1.0685115 0.3356668 2 #> 4   5.4434568  4 0.33274054 -1.0953281 6.538785    F-test 1.0685115 0.3356668 2 #> 5   6.9349441  5 0.58855137 -1.1015298 8.036474    F-test 1.0685115 0.3356668 2 #> 6   7.7472215  6 0.49860979  0.2373262 7.509895    F-test 1.0685115 0.3356668 2 #> 7   9.7219859  7 0.90427416 -0.1629420 9.884928    F-test 1.0685115 0.3356668 2 #> 8   9.9284136  8 0.58554760  1.9095258 8.018888    F-test 1.0685115 0.3356668 2 #> 9  11.4795415  9 0.81512034  2.1165801 9.362961    F-test 1.0685115 0.3356668 2 #> 10 11.0386304 10 0.03724331  6.2298855 4.808745    F-test 1.0685115 0.3356668 2 #> 11  6.5805193  1 0.08704496  1.4802020 5.100317    F-test 0.3706724 0.5618672 1 #> 12  0.8308687  2 0.16351739 -4.7171698 5.548039    F-test 0.3706724 0.5618672 1 #> 13  6.3248759  3 0.50052007 -1.1962034 7.521079    F-test 0.3706724 0.5618672 1 #> 14  9.6856315  4 0.33274054  3.1468467 6.538785    F-test 0.3706724 0.5618672 1 #> 15  8.6993940  5 0.58855137  0.6629201 8.036474    F-test 0.3706724 0.5618672 1 #> 16  4.8883880  6 0.49860979 -2.6215073 7.509895    F-test 0.3706724 0.5618672 1 #> 17 13.2123694  7 0.90427416  3.3274415 9.884928    F-test 0.3706724 0.5618672 1 #> 18  9.4345400  8 0.58554760  1.4156522 8.018888    F-test 0.3706724 0.5618672 1 #> 19  5.9292932  9 0.81512034 -3.4336682 9.362961    F-test 0.3706724 0.5618672 1 #> 20  6.7442312 10 0.03724331  1.9354863 4.808745    F-test 0.3706724 0.5618672 1 #> 21  2.9489698  1 0.08704496 -2.1513475 5.100317    F-test 1.2884848 0.2936953 3 #> 22  4.6744424  2 0.16351739 -0.8735961 5.548039    F-test 1.2884848 0.2936953 3 #> 23  9.8049783  3 0.50052007  2.2838990 7.521079    F-test 1.2884848 0.2936953 3 #> 24  3.3966093  4 0.33274054 -3.1421755 6.538785    F-test 1.2884848 0.2936953 3 #> 25  6.7656764  5 0.58855137 -1.2707975 8.036474    F-test 1.2884848 0.2936953 3 #> 26  4.3579368  6 0.49860979 -3.1519585 7.509895    F-test 1.2884848 0.2936953 3 #> 27  9.1282802  7 0.90427416 -0.7566477 9.884928    F-test 1.2884848 0.2936953 3 #> 28  8.4409210  8 0.58554760  0.4220332 8.018888    F-test 1.2884848 0.2936953 3 #> 29 12.7919394  9 0.81512034  3.4289780 9.362961    F-test 1.2884848 0.2936953 3 #> 30 10.0203576 10 0.03724331  5.2116127 4.808745    F-test 1.2884848 0.2936953 3 #>     null #> 1  FALSE #> 2  FALSE #> 3  FALSE #> 4  FALSE #> 5  FALSE #> 6  FALSE #> 7  FALSE #> 8  FALSE #> 9  FALSE #> 10 FALSE #> 11  TRUE #> 12  TRUE #> 13  TRUE #> 14  TRUE #> 15  TRUE #> 16  TRUE #> 17  TRUE #> 18  TRUE #> 19  TRUE #> 20  TRUE #> 21  TRUE #> 22  TRUE #> 23  TRUE #> 24  TRUE #> 25  TRUE #> 26  TRUE #> 27  TRUE #> 28  TRUE #> 29  TRUE #> 30  TRUE"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-null_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the null model — VI_MODEL$null_formula","title":"Formula for fitting the null model — VI_MODEL$null_formula","text":"quoted formula, used fit null model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-null_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the null model — VI_MODEL$null_formula","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  # A formula with environment equals to `test` test$null_formula #> y ~ x  # By default, `fit` use the null formula test$fit(test$gen(10)) #>  #> Call: #> stats::lm(formula = y ~ x, data = test$gen(10)) #>  #> Coefficients: #> (Intercept)            x   #>      0.3399       3.9126   #>   # F-test also needs to use the null model test$test(test$gen(1000)) #> $name #> [1] \"F-test\" #>  #> $statistic #> [1] 2.883157 #>  #> $p_value #> [1] 0.08982242 #>"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-null_resid.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate null residuals from a null model — VI_MODEL$null_resid","title":"Generate null residuals from a null model — VI_MODEL$null_resid","text":"function uses data null model generate null residuals. null residuals generated first regressing random noises original regressors, multiply obtained residuals original RSS divided current RSS. results null residuals.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-null_resid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate null residuals from a null model — VI_MODEL$null_resid","text":"dat Data frame. data frame used fit model. mod Linear Model. null model. test Boolean. Whether use test newly generated data.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-null_resid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate null residuals from a null model — VI_MODEL$null_resid","text":"data frame updated y, .resid, potentially updated test result.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-null_resid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate null residuals from a null model — VI_MODEL$null_resid","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  dat <- test$gen(10) test$null_resid(dat, test$fit(dat), test = TRUE) #>           y          x          e     .resid  .fitted test_name statistic #> 1  3.441043 0.39981093 -0.2018527  1.1069942 2.334049    F-test  1.590544 #> 2  1.956685 0.05564954  0.6577813 -0.6577916 2.614477    F-test  1.590544 #> 3  1.147591 0.93751792 -1.4748553 -0.7483271 1.895918    F-test  1.590544 #> 4  1.187821 0.66930164  0.5465937 -0.9266438 2.114464    F-test  1.590544 #> 5  2.633396 0.23329027  1.8163460  0.1636628 2.469733    F-test  1.590544 #> 6  2.497478 0.13328545  0.5711878 -0.0537396 2.551218    F-test  1.590544 #> 7  2.470786 0.43430630  1.8795511  0.1648445 2.305942    F-test  1.590544 #> 8  1.785301 0.90614375 -1.2087911 -0.1361807 1.921482    F-test  1.590544 #> 9  4.029171 0.64952762 -0.1792063  1.8985942 2.130577    F-test  1.590544 #> 10 1.550555 0.36554707  2.3814244 -0.8114129 2.361968    F-test  1.590544 #>     p_value null #> 1  0.247652 TRUE #> 2  0.247652 TRUE #> 3  0.247652 TRUE #> 4  0.247652 TRUE #> 5  0.247652 TRUE #> 6  0.247652 TRUE #> 7  0.247652 TRUE #> 8  0.247652 TRUE #> 9  0.247652 TRUE #> 10 0.247652 TRUE"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the fitted model — VI_MODEL$plot","title":"Plot the fitted model — VI_MODEL$plot","text":"function generates plot fitted model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the fitted model — VI_MODEL$plot","text":"dat Data frame. data frame containing correspoding variables. type Character. \"resid\": VI_MODEL$plot_resid. Default type = \"resid\". theme ggtheme. ggplot theme object. alpha Numeric. Alpha dot. Value 0 1. Default 1. size Numeric. Size dot. Value 0 1. Default 0.5. stroke Numeric. Stroke dot. Default 0.5. remove_axis Boolean. Whether remove axis. Default remove_axis = FALSE. remove_legend Boolean. Whether remove legend. Default remove_legend = FALSE. remove_grid_line Boolean. Whether remove grid lines. Default remove_grid_line = FALSE. add_zero_line Boolean. Whether add zero horizontal line. Default add_zero_line = TRUE.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the fitted model — VI_MODEL$plot","text":"ggplot.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the fitted model — VI_MODEL$plot","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + 10 * x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  # Residual plot of the null model test$plot(test$gen(1000, fit_model = TRUE), type = \"resid\")   # Customize the plot test$plot(test$gen(1000, fit_model = TRUE),           type = \"resid\",           theme = ggplot2::theme_light(),           remove_axis = TRUE,           remove_grid_line = TRUE,           add_zero_line = TRUE)"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot_lineup.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the lineup — VI_MODEL$plot_lineup","title":"Plot the lineup — VI_MODEL$plot_lineup","text":"function plots lineup.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot_lineup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the lineup — VI_MODEL$plot_lineup","text":"dat Data frame. data frame containing correspoding variables. type Character. \"resid\": VI_MODEL$plot_resid. Default type = \"resid\". ... Arguments passed VI_MODEL$plot","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot_lineup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the lineup — VI_MODEL$plot_lineup","text":"ggplot.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot_lineup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the lineup — VI_MODEL$plot_lineup","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + 10 * x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  # Lineup of residual plots test$plot_lineup(test$gen_lineup(100), type = \"resid\")   # Customize the plot test$plot_lineup(test$gen_lineup(100),                  type = \"resid\",                  theme = ggplot2::theme_light(),                  remove_axis = TRUE,                  remove_grid_line = TRUE,                  add_zero_line = TRUE)"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot_qq.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the residual Q-Q plot — VI_MODEL$plot_qq","title":"Plot the residual Q-Q plot — VI_MODEL$plot_qq","text":"function generate Q-Q plot residuals.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot_qq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the residual Q-Q plot — VI_MODEL$plot_qq","text":"dat Data frame. data frame containing .resid.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot_qq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the residual Q-Q plot — VI_MODEL$plot_qq","text":"ggplot.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot_qq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the residual Q-Q plot — VI_MODEL$plot_qq","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + 10 * x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  # Residual plot of the null model test$plot_qq(test$gen(1000, fit_model = TRUE))"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot_resid.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the residuals vs fitted values plot — VI_MODEL$plot_resid","title":"Plot the residuals vs fitted values plot — VI_MODEL$plot_resid","text":"function generate residuals vs fitted values plot.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot_resid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the residuals vs fitted values plot — VI_MODEL$plot_resid","text":"dat Data frame. data frame containing .resid .fitted. alpha Numeric. Alpha dot. Value 0 1. size Numeric. Size dot. Value 0 1. Default 0.5. stroke Numeric. Stroke dot. Default 0.5.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot_resid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the residuals vs fitted values plot — VI_MODEL$plot_resid","text":"ggplot.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot_resid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the residuals vs fitted values plot — VI_MODEL$plot_resid","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + 10 * x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  # Residual plot of the null model test$plot_resid(test$gen(1000, fit_model = TRUE))"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-prm.html","id":null,"dir":"Reference","previous_headings":"","what":"List of parameters — VI_MODEL$prm","title":"List of parameters — VI_MODEL$prm","text":"list, initialized instance built.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-prm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of parameters — VI_MODEL$prm","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e) test$prm #> $x #>  #> ── <RAND_UNIFORM object> #> [a: 0, b: 1]  #>  #> $e #>  #> ── <RAND_NORMAL object> #> [mu: 0, sigma: 1]  #>  #> $y #>  #> ── <CLOSED_FORM object> #> EXPR = 1 + x + x^2 + e #>  - x: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1]  #>"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-prm_type.html","id":null,"dir":"Reference","previous_headings":"","what":"List of parameter types — VI_MODEL$prm_type","title":"List of parameter types — VI_MODEL$prm_type","text":"list, initialized instance built. \"r\" stands random variable closed form used expression y, \"o\" stands others. value affects string representation object. variable part expression y, labelled \"o\". variable part expression y, random variable closed form expression, labelled \"o\" well.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-prm_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of parameter types — VI_MODEL$prm_type","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e) test$prm_type #> $x #> [1] \"r\" #>  #> $e #> [1] \"r\" #>"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-rss.html","id":null,"dir":"Reference","previous_headings":"","what":"Residual sum of square of a fitted model — VI_MODEL$rss","title":"Residual sum of square of a fitted model — VI_MODEL$rss","text":"function returns residual sum square fitted model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-rss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Residual sum of square of a fitted model — VI_MODEL$rss","text":"Numeric value.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-rss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Residual sum of square of a fitted model — VI_MODEL$rss","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  test$rss(test$fit(test$gen(100))) #> [1] 95.28764"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-sample_effect_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the sample based effect size of the simulated data of the defined model — VI_MODEL$sample_effect_size","title":"Compute the sample based effect size of the simulated data of the defined model — VI_MODEL$sample_effect_size","text":"function computes sample based effect size simulated data defined model. abstract method.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-sample_effect_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the sample based effect size of the simulated data of the defined model — VI_MODEL$sample_effect_size","text":"... Derived class needs override method.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-sample_effect_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the sample based effect size of the simulated data of the defined model — VI_MODEL$sample_effect_size","text":"NA","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-sample_effect_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the sample based effect size of the simulated data of the defined model — VI_MODEL$sample_effect_size","text":"","code":"VI_MODEL$sample_effect_size() #> [1] NA"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-set_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Set formula for y, null model or alternative model — VI_MODEL$set_formula","title":"Set formula for y, null model or alternative model — VI_MODEL$set_formula","text":"function store formula environment, drops attributes. recommended modify formula y instance built, may create confusion.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-set_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set formula for y, null model or alternative model — VI_MODEL$set_formula","text":"... Formulas. Formulas names.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-set_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set formula for y, null model or alternative model — VI_MODEL$set_formula","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-set_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set formula for y, null model or alternative model — VI_MODEL$set_formula","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  test$set_formula(alt_formula = y ~ x + I(x^3)) test$alt_formula #> y ~ x + I(x^3)"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-set_prm.html","id":null,"dir":"Reference","previous_headings":"","what":"Set parameter for the model — VI_MODEL$set_prm","title":"Set parameter for the model — VI_MODEL$set_prm","text":"function store values environment update values closed form expression y. However, parameter directly used closed form expression, user override method correctly set parameter.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-set_prm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set parameter for the model — VI_MODEL$set_prm","text":"prm_name List Vector. Parameter character names. prm_val List Vector. Parameter values.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-set_prm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set parameter for the model — VI_MODEL$set_prm","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-set_prm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set parameter for the model — VI_MODEL$set_prm","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(a = 1, x = x, e = e),                  prm_type = list(a = \"o\", x = \"r\", e = \"r\"),                  formula = y ~ 1 + a * x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  test #>  #> ── <VI_MODEL object> #> y = 1 + a * x + x^2 + e #>  - x: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #> Parameters: #>  - a: 1   test$set_prm(\"a\", 2)  test #>  #> ── <VI_MODEL object> #> y = 1 + a * x + x^2 + e #>  - x: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #> Parameters: #>  - a: 2"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-test.html","id":null,"dir":"Reference","previous_headings":"","what":"Test the null model against the alternative model — VI_MODEL$test","title":"Test the null model against the alternative model — VI_MODEL$test","text":"function test null model alternative model. class, test F-test computed using stats::anova. Derived classes may test procedures.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test the null model against the alternative model — VI_MODEL$test","text":"dat Data frame. data frame containing variables needed null_formula alt_formula. null_formula Formula. Formula fitting null model. Default null_formula = self$null_formula. alt_formula Formula. Formula fitting alternative model. Default alt_formula = self$alt_formula.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test the null model against the alternative model — VI_MODEL$test","text":"list containing test name, test statistic p-value.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test the null model against the alternative model — VI_MODEL$test","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))   dat <- test$gen(100000) test$test(dat) #> $name #> [1] \"F-test\" #>  #> $statistic #> [1] 518.7168 #>  #> $p_value #> [1] 1.577532e-114 #>   test$test(dat, alt_formula = y ~ x + I(x^3)) #> $name #> [1] \"F-test\" #>  #> $statistic #> [1] 515.8307 #>  #> $p_value #> [1] 6.647544e-114 #>"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL.html","id":null,"dir":"Reference","previous_headings":"","what":"VI_MODEL class environment — VI_MODEL","title":"VI_MODEL class environment — VI_MODEL","text":"base class visual inference linear model, inherited bandicoot::BASE.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"VI_MODEL class environment — VI_MODEL","text":"","code":"VI_MODEL"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"VI_MODEL class environment — VI_MODEL","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate p-value for a visual test — calc_p_value","title":"Calculate p-value for a visual test — calc_p_value","text":"function calculate p-value visual test.","code":""},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate p-value for a visual test — calc_p_value","text":"","code":"calc_p_value(   detect,   n_sel,   n_plot = 20,   n_sim = 50000,   dist = \"dirichlet\",   alpha = 1,   cache_env = NULL,   method = \"linear_approx\",   replace_0 = TRUE )"},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate p-value for a visual test — calc_p_value","text":"detect Integer. vector boolean values indicating whether subject detect actual data plot. n_sel Integer. vector number selections. n_plot Integer. Number plots lineup. n_sim Integer. Number simulations draws. dist Character. Name distribution used attractiveness simulation. One \"uniform\" \"dirichlet\". alpha Numeric. single parameter value used Dirichlet distribution. cache_env Environment. provided environment caching. method Character. Method p-value calculation. \"linear_approx\" linear approximation \"simulate\" simulation. replace_0 Boolean. Whether treat evaluations number selections equal 0 selecting plots.","code":""},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate p-value for a visual test — calc_p_value","text":"numeric value representing p-value.","code":""},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate p-value for a visual test — calc_p_value","text":"method == \"simulate\", null distribution simulated using function sim_dist() p-value probability number detections greater equal observed value.  method == \"linear_approx\", null distribution calculated using function exact_dist() p-value probability detections greater equal weighted observed value. weighted observed detections calculated incrementing 1/n_sel detection, 1/n_plot zero selections. Since null distribution discrete, weighted observed detections real value, linear approximation used decimal part. encouraged provide cache environment boost performance function needs reused method == \"simulate\". cache environment remember result corresponding combinations n_eval n_sim. two attractiveness distribution available, one uniform distribution, another Dirichlet distribution. Uniform distribution ensures marginal distribution probability every plot selected uniform. \\(\\alpha = 1\\), Dirichlet distribution ensures probability every plot selected evenly distributed standard \\(M - 1\\) simplex.","code":""},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate p-value for a visual test — calc_p_value","text":"","code":"calc_p_value(c(1, 1, 0), c(1, 1, 2), alpha = 0.5) #> [1] 0.01761364 calc_p_value(1, 1, 1) #> [1] 1"},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate p-value for multiple lineups. — calc_p_value_multi","title":"Calculate p-value for multiple lineups. — calc_p_value_multi","text":"function calculates p-value multiple lineups using function calc_p_value().","code":""},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate p-value for multiple lineups. — calc_p_value_multi","text":"","code":"calc_p_value_multi(   dat,   lineup_id,   detect,   n_sel,   alpha,   n_plot = 20,   n_sim = 50000,   dist = \"dirichlet\",   cache_env = NULL,   method = \"linear_approx\",   replace_0 = TRUE )"},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value_multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate p-value for multiple lineups. — calc_p_value_multi","text":"dat Data.frame/Tibble. data.frame tibble. lineup_id Column ids lineup. detect Column whether lineup detected subject. n_sel Column number selections. alpha Column parameter values used Dirichlet distribution. n_plot Integer. Number plots. n_sim Integer. Number simulation draws. dist Character. Name distribution used attractiveness simulation. One \"uniform\" \"dirichlet\". cache_env Environment. provided environment caching. method Character. Method p-value calculation. \"linear_approx\" linear approximation \"simulate\" simulation. replace_0 Boolean. Whether treat evaluations number selections equal 0 selecting plots.","code":""},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value_multi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate p-value for multiple lineups. — calc_p_value_multi","text":"tibble one column lineup id one column p-value.","code":""},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value_multi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate p-value for multiple lineups. — calc_p_value_multi","text":"encouraged provide cache environment boost performance. cache environment remember result corresponding combinations n_eval n_sim. replace_0 can turned set evaluations 0 selections false detection 20 selections. two attractiveness distribution available, one uniform distribution, another Dirichlet distribution. Uniform distribution ensures marginal distribution probability every plot selected uniform. \\(\\alpha = 1\\), Dirichlet distribution ensures probability every plot selected evenly distributed standard \\(M - 1\\) simplex.","code":""},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value_multi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate p-value for multiple lineups. — calc_p_value_multi","text":"","code":"dat <- data.frame(unique_lineup_id = c(1,1,2),                   detect_or_not = c(TRUE, FALSE, TRUE),                   num_selection = c(1,1,2)) calc_p_value_multi(dat, unique_lineup_id, detect_or_not, num_selection) #> # A tibble: 2 × 2 #>   unique_lineup_id p_value #>              <dbl>   <dbl> #> 1                1  0.0952 #> 2                2  0.525"},{"path":"https://tengmcing.github.io/visage/reference/eval_p_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate test for given p-value and significance level — eval_p_value","title":"Evaluate test for given p-value and significance level — eval_p_value","text":"function reject null hypothesis p-value smaller given significance level plus tolerance.","code":""},{"path":"https://tengmcing.github.io/visage/reference/eval_p_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate test for given p-value and significance level — eval_p_value","text":"","code":"eval_p_value(p_value, significance_level = 0.05, tol = 1e-06)"},{"path":"https://tengmcing.github.io/visage/reference/eval_p_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate test for given p-value and significance level — eval_p_value","text":"p_value Numeric. vector p-values. significance_level Numeric. significance level. tol Numeric. Tolerance.","code":""},{"path":"https://tengmcing.github.io/visage/reference/eval_p_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate test for given p-value and significance level — eval_p_value","text":"vector Boolean values indicating whether null hypotheses rejected.","code":""},{"path":"https://tengmcing.github.io/visage/reference/eval_p_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate test for given p-value and significance level — eval_p_value","text":"","code":"eval_p_value(c(0.05, 0.0501), 0.05, 1e-3) #> [1] TRUE TRUE eval_p_value(c(0.05, 0.0501), 0.05, 1e-5) #> [1]  TRUE FALSE"},{"path":"https://tengmcing.github.io/visage/reference/exact_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the exact distribution of number of detections of a lineup — exact_dist","title":"Calculate the exact distribution of number of detections of a lineup — exact_dist","text":"function calculate exact distribution number detections lineup assuming every subject selects exactly one plot.","code":""},{"path":"https://tengmcing.github.io/visage/reference/exact_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the exact distribution of number of detections of a lineup — exact_dist","text":"","code":"exact_dist(n_eval, n_plot = 20, dist = \"dirichlet\", alpha = 1)"},{"path":"https://tengmcing.github.io/visage/reference/exact_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the exact distribution of number of detections of a lineup — exact_dist","text":"n_eval Integer. Number evaluations. n_plot Integer. Number plots lineup. dist Character. Name distribution used attractiveness model. One \"uniform\" \"dirichlet\". alpha Numeric. single parameter value used Dirichlet distribution.","code":""},{"path":"https://tengmcing.github.io/visage/reference/exact_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the exact distribution of number of detections of a lineup — exact_dist","text":"named vector representing probability mass function distribution.","code":""},{"path":"https://tengmcing.github.io/visage/reference/exact_dist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the exact distribution of number of detections of a lineup — exact_dist","text":"given lineup, plots assumed weights \\(W_i, = 1, ..., M,\\) \\(M\\) number plots, \\(W_i\\) follows attractiveness distribution independently.  two attractiveness distribution available, one uniform distribution, another Dirichlet distribution. Uniform distribution ensures marginal distribution probability every plot selected uniform. \\(\\alpha = 1\\), Dirichlet distribution ensures probability every plot selected evenly distributed standard \\(M - 1\\) simplex.","code":""},{"path":"https://tengmcing.github.io/visage/reference/exact_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the exact distribution of number of detections of a lineup — exact_dist","text":"","code":"sim_dist(c(2,2,3)) #>       0       1       2       3  #> 0.69948 0.25282 0.04500 0.00270  sim_dist(1) #>      0      1  #> 0.9503 0.0497"},{"path":"https://tengmcing.github.io/visage/reference/get_polynomials_lineup.html","id":null,"dir":"Reference","previous_headings":"","what":"Download the detailed information of lineups used in the polynomials study — get_polynomials_lineup","title":"Download the detailed information of lineups used in the polynomials study — get_polynomials_lineup","text":"function downloads returns list containing information 588 lineups including metadata observations. See also polynomials.","code":""},{"path":"https://tengmcing.github.io/visage/reference/get_polynomials_lineup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download the detailed information of lineups used in the polynomials study — get_polynomials_lineup","text":"","code":"get_polynomials_lineup()"},{"path":"https://tengmcing.github.io/visage/reference/get_polynomials_lineup.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Download the detailed information of lineups used in the polynomials study — get_polynomials_lineup","text":"https://raw.githubusercontent.com/TengMCing/visage/master/data-raw/polynomials_lineup.rds","code":""},{"path":"https://tengmcing.github.io/visage/reference/get_polynomials_lineup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download the detailed information of lineups used in the polynomials study — get_polynomials_lineup","text":"list 588 items, item contains named list metadata data.frame data: Metadata contains metadata lineup: type Type model formula main formula model shape Shape Hermite polynomials, please check POLY_MODEL$hermite x_dist Distribution variable x include_z Whether include variable z model e_dist Distribution error term e e_sigma standard deviation error term e name Name model k Number residual plots lineup n Number observations residual plot effect_size Effect size actual residual plot answer answer lineup Data contains data drawing 20 residual plots: y Values y raw_x Values non-scaled x x Values scaled x (-1 1) raw_z Values non-scaled z z Values scaled z (-1 1) e Values error term e .resid Value residuals .fitted Fitted values test_name Name conventional test statistic Test statistics p_value P-value test k Position plot lineup null Whehter null residual plot","code":""},{"path":"https://tengmcing.github.io/visage/reference/polynomials.html","id":null,"dir":"Reference","previous_headings":"","what":"Results of a visual inference study on reading residual plots of misspecified linear regression model caused by missing Hermite polynomial terms — polynomials","title":"Results of a visual inference study on reading residual plots of misspecified linear regression model caused by missing Hermite polynomial terms — polynomials","text":"dataset containing information 160 subject responses 588 linupes. total 588 lineups, lineup 577 - 588 used attention checks. Every subject evaluates 18 different lineups two randomly assigned attention checks. Every lineup except used attention checks evaluated five different subjects. Every lineup consists 20 residual plots one actual residual plot 19 null residual plots drawn rotated residuals.","code":""},{"path":"https://tengmcing.github.io/visage/reference/polynomials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Results of a visual inference study on reading residual plots of misspecified linear regression model caused by missing Hermite polynomial terms — polynomials","text":"","code":"polynomials"},{"path":"https://tengmcing.github.io/visage/reference/polynomials.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Results of a visual inference study on reading residual plots of misspecified linear regression model caused by missing Hermite polynomial terms — polynomials","text":"tibble 3200 rows 30 variables: page page number study website response_time Time spent page, milliseconds (1 second = 1000 milliseconds) set set number subject ID num lineup number set selection Selections made subject. Multiple selections allowed seperated \"_\". \"0\" means subject tell difference plots num_selection Number selections made subject reason reason making selections provided subject confidence Level difference selected plots others provided subject age_group Age group subject educatoin Educational background subject pronoun Preferred pronoun previous_experience Previous experience research requires reading data graphs lineup_id Lineup ID type Type model formula main formula model shape Shape Hermite polynomials, please check POLY_MODEL$hermite x_dist Distribution variable x include_z Whether include variable z model e_dist Distribution error term e e_sigma standard deviation error term e name Name model k Number residual plots lineup n Number observations residual plot effect_size Effect size actual residual plot answer answer lineup detect Whether subject selects actual residual plot conventional_p_value P-value conventional test (F-test) comparing null model (y ~ x) correct model (y ~ x + z) weigthed_detect detect == TRUE, weighted_detect = detect/num_selection. Otherwise, weighted_detect = 0. prop_detect Poportion detection lineup. lineup, prop_detect = mean(weighted_detect).","code":""},{"path":"https://tengmcing.github.io/visage/reference/polynomials.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Results of a visual inference study on reading residual plots of misspecified linear regression model caused by missing Hermite polynomial terms — polynomials","text":"reproduce models, use poly_model(). x_dist = \"uniform\", define x = rand_uniform(-1, 1). x_dist = \"normal\", define x = {stand_dist <- function(x) {(x - min(x))/max(x - min(x)) * 2 - 1}; raw_x <- rand_normal(sigma = 0.3); closed_form(~stand_dist(raw_x))}. x_dist = \"lognormal\", define x = {stand_dist <- function(x) {(x - min(x))/max(x - min(x)) * 2 - 1}; raw_x <- rand_lognormal(sigma = 0.6); closed_form(~stand_dist(raw_x/3 - 1))}. x_dist = \"uniform_discrete\", define x = rand_uniform_d(k = 5, even = TRUE). example, shape = 1, e_sigma = 1, include_z = TRUE x_dist = \"uniform\", model can defined y = poly_model(shape = 1, sigma = 1, include_z = TRUE, x = rand_uniform(-1, 1)). Note models produce exactly lineups shown subjects due randomness. Data stored get_polynomials_lineup() used instead.","code":""},{"path":"https://tengmcing.github.io/visage/reference/portal.html","id":null,"dir":"Reference","previous_headings":"","what":"Portals to class instantiate methods — portal","title":"Portals to class instantiate methods — portal","text":"functions class$instantiate.","code":""},{"path":"https://tengmcing.github.io/visage/reference/portal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Portals to class instantiate methods — portal","text":"","code":"rand_var(..., env = new.env(parent = parent.frame()), init_call = sys.call())  rand_uniform(   ...,   env = new.env(parent = parent.frame()),   init_call = sys.call() )  rand_uniform_d(   ...,   env = new.env(parent = parent.frame()),   init_call = sys.call() )  rand_normal(   ...,   env = new.env(parent = parent.frame()),   init_call = sys.call() )  rand_lognormal(   ...,   env = new.env(parent = parent.frame()),   init_call = sys.call() )  rand_t(..., env = new.env(parent = parent.frame()), init_call = sys.call())  closed_form(   ...,   env = new.env(parent = parent.frame()),   init_call = sys.call() )  vi_model(..., env = new.env(parent = parent.frame()), init_call = sys.call())  cubic_model(   ...,   env = new.env(parent = parent.frame()),   init_call = sys.call() )  simple_cubic_model(   ...,   env = new.env(parent = parent.frame()),   init_call = sys.call() )  quartic_model(   ...,   env = new.env(parent = parent.frame()),   init_call = sys.call() )  poly_model(..., env = new.env(parent = parent.frame()), init_call = sys.call())  heter_model(   ...,   env = new.env(parent = parent.frame()),   init_call = sys.call() )  ar1_model(..., env = new.env(parent = parent.frame()), init_call = sys.call())  non_normal_model(   ...,   env = new.env(parent = parent.frame()),   init_call = sys.call() )"},{"path":"https://tengmcing.github.io/visage/reference/portal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Portals to class instantiate methods — portal","text":"... Arguments passed init method. env Environment. instance environment. init_call Call. Contents ..init_call... recommended leave default. Default init_call = sys.call().","code":""},{"path":"https://tengmcing.github.io/visage/reference/portal.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Portals to class instantiate methods — portal","text":"rand_var(): RAND_VAR rand_uniform(): RAND_UNIFORM rand_uniform_d(): RAND_UNIFORM_D rand_normal(): RAND_NORMAL rand_lognormal(): RAND_LOGNORMAL rand_t(): RAND_T closed_form(): CLOSED_FORM vi_model(): VI_MODEL cubic_model(): CUBIC_MODEL simple_cubic_model(): SIMPLE_CUBIC_MODEL quartic_model(): QUARTIC_MODEL poly_model(): POLY_MODEL heter_model(): HETER_MODEL ar1_model(): AR1_MODEL non_normal_model(): NON_NORMAL_MODEL","code":""},{"path":"https://tengmcing.github.io/visage/reference/sim_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Approximate the distribution of number of detections of a lineup with simulation — sim_dist","title":"Approximate the distribution of number of detections of a lineup with simulation — sim_dist","text":"function approximate distribution number detections lineup given number evaluations, selections evaluation plots lineup.","code":""},{"path":"https://tengmcing.github.io/visage/reference/sim_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Approximate the distribution of number of detections of a lineup with simulation — sim_dist","text":"","code":"sim_dist(n_sel, n_plot = 20, n_sim = 50000, dist = \"uniform\", alpha = 1)"},{"path":"https://tengmcing.github.io/visage/reference/sim_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Approximate the distribution of number of detections of a lineup with simulation — sim_dist","text":"n_sel Integer. vector number selections. n_plot Integer. Number plots lineup. n_sim Integer. Number simulations draws. dist Character. Name distribution used attractiveness simulation. One \"uniform\" \"dirichlet\". alpha Numeric. single parameter value used Dirichlet distribution.","code":""},{"path":"https://tengmcing.github.io/visage/reference/sim_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Approximate the distribution of number of detections of a lineup with simulation — sim_dist","text":"named vector representing probability mass function distribution.","code":""},{"path":"https://tengmcing.github.io/visage/reference/sim_dist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Approximate the distribution of number of detections of a lineup with simulation — sim_dist","text":"given lineup, plots assumed weights \\(W_i, = 1, ..., M,\\) \\(M\\) number plots, \\(W_i\\) follows attractiveness distribution independently. draw, weights lineup simulated. , evaluation draw, function sample number plots number selection evaluation using simulated weights without replacement. Finally, distribution occurrences plot 1 draw approximated distribution number detections lineup. two attractiveness distribution available, one uniform distribution, another Dirichlet distribution. Uniform distribution ensures marginal distribution probability every plot selected uniform. \\(\\alpha = 1\\), Dirichlet distribution ensures probability every plot selected evenly distributed standard \\(M - 1\\) simplex.","code":""},{"path":"https://tengmcing.github.io/visage/reference/sim_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Approximate the distribution of number of detections of a lineup with simulation — sim_dist","text":"","code":"sim_dist(c(2,2,3)) #>       0       1       2       3  #> 0.69686 0.25592 0.04408 0.00314  sim_dist(1) #>       0       1  #> 0.94726 0.05274"}]
