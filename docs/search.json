[{"path":"https://tengmcing.github.io/visage/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 visage authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://tengmcing.github.io/visage/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Weihao Li. Author, maintainer.","code":""},{"path":"https://tengmcing.github.io/visage/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Li W (2022). visage: Visual Inference Linear Regression Diagnostics. https://tengmcing.github.io/visage/, https://github.com/TengMCing/visage/.","code":"@Manual{,   title = {visage: Visual Inference for Linear Regression Diagnostics},   author = {Weihao Li},   year = {2022},   note = {https://tengmcing.github.io/visage/, https://github.com/TengMCing/visage/}, }"},{"path":"https://tengmcing.github.io/visage/index.html","id":"visage","dir":"","previous_headings":"","what":"Visual Inference for Linear Regression Diagnostics","title":"Visual Inference for Linear Regression Diagnostics","text":"goal visage provide lightweight OOP system set tools running visual inference experiments.","code":""},{"path":"https://tengmcing.github.io/visage/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Visual Inference for Linear Regression Diagnostics","text":"development version GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"TengMCing/visage\") library(visage)"},{"path":"https://tengmcing.github.io/visage/index.html","id":"table-of-content","dir":"","previous_headings":"","what":"Table of Content","title":"Visual Inference for Linear Regression Diagnostics","text":"Visual inference cubic linear model class CUBIC_MODEL Visual inference heteroskedasticity linear model class HETER_MODEL Closed form expression CLOSED_FORM","code":""},{"path":"https://tengmcing.github.io/visage/index.html","id":"1-visual-inference-cubic-linear-model-class-cubic_model","dir":"","previous_headings":"","what":"1. Visual inference cubic linear model class CUBIC_MODEL","title":"Visual Inference for Linear Regression Diagnostics","text":"1.1. Define model visual inference cubic linear model defined : x z random variables, , b c parameters e random error term. cubic_model() cubic model class constructor, takes arguments , b, c, sigma, x z, first four numeric values defined , x z random variable instances created random variable abstract base class constructor rand_var(). like x z uniform random variables ranged −1 1, can achieved using uniform random variable class constructor rand_uniform(). takes two arguments lower bound upper bound support. 1.2. Generate random values model instance cubic model class contains methods simulating data making residual plot. Method gen() returns data frame containing realizations x, z, y e simulated model. number realizations depends integer argument n. addition, null model fitted using simulated data residuals fitted values included returned data frame. null model defined : Generates five realizations model: 1.3. Make residual plot Method plot() produce ggplot object. takes data frame containing columns .resid .fitted input, along character argument type indicating type data plot, aesthetic arguments size alpha control appearance plot.  1.4. Make lineup lineup matrix residual plots can produced using methods gen_lineup() plot_lineup(). Method gen_lineup() takes number realizations n number plots lineup k inputs. , method plot_lineup() user interface plot(). Generate lineup consists 2 plots 8 realizations: Plot lineup consists 20 plots 300 realizations:","code":"CUBIC_MODEL$formula #> y ~ 1 + (2 - c) * x + c * z + a * (((2 - c) * x)^2 + (c * z)^2) +  #>     b * (((2 - c) * x)^3 + (c * z)^3) + e mod <- cubic_model(a = -3, b = -3, c = 1, sigma = 1,                    x = rand_uniform(-1, 1), z = rand_uniform(-1, 1)) mod #>  #> ── <CUBIC_MODEL object> #> y = 1 + (2 - c) * x + c * z + a * (((2 - c) * x)^2 + (c * z)^2) + b * (((2 - c) * x)^3 + (c * z)^3) + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - z: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #>  - a: -3 #>  - b: -3 #>  - c: 1 #>  - sigma: 1 CUBIC_MODEL$null_formula #> y ~ x + z mod$gen(n = 5) #>            y          x           z          e     .resid    .fitted #> 1 -2.4082840 -0.9527958  0.28227081 -2.3026985 -2.0724721 -0.3358118 #> 2  1.1162350 -0.5748778  0.36826332  1.3010213  2.5059879 -1.3897529 #> 3 -3.0935405  0.9005904 -0.01223249 -0.3569594 -0.1256719 -2.9678686 #> 4 -6.1790103  0.9489648  0.75171836 -0.6447801 -0.4095148 -5.7694955 #> 5  0.6039986 -0.3168255 -0.31043863  0.6363541  0.1016709  0.5023277 mod$plot(mod$gen(n = 100), type = \"resid\", size = 1) mod$gen_lineup(n = 8, k = 2) #>             y           x          z          e      .resid    .fitted #> 1  -0.4698695  0.02360236 -0.2798524 -1.0427085  0.91490332 -1.3847728 #> 2   1.5258921 -0.33129920 -0.4138406  1.7923841  2.16464126 -0.6387492 #> 3  -1.0647215 -0.70393787  0.4286435 -0.5618290 -0.29713409 -0.7675874 #> 4  -3.0386325  0.78990716 -0.6421573 -0.3932404 -0.64758404 -2.3910485 #> 5  -2.3544102 -0.39828558  0.6578589 -1.1751749 -0.83872555 -1.5156846 #> 6  -1.6342183  0.18448867  0.6430988 -1.3022205  0.88867303 -2.5228914 #> 7  -1.7696743 -0.40032344 -0.8246933 -0.8986588 -1.63301478 -0.1366595 #> 8  -3.4891458  0.27877947  0.9118286 -0.6129378 -0.55175915 -2.9373867 #> 9  -2.7192872  0.02360236 -0.2798524 -1.0427085 -1.33451439 -1.3847728 #> 10 -0.5834812 -0.33129920 -0.4138406  1.7923841  0.05526803 -0.6387492 #> 11 -1.6884593 -0.70393787  0.4286435 -0.5618290 -0.92087185 -0.7675874 #> 12 -2.0879371  0.78990716 -0.6421573 -0.3932404  0.30311136 -2.3910485 #> 13 -0.1925118 -0.39828558  0.6578589 -1.1751749  1.32317282 -1.5156846 #> 14 -4.2980259  0.18448867  0.6430988 -1.3022205 -1.77513458 -2.5228914 #> 15  0.8031242 -0.40032344 -0.8246933 -0.8986588  0.93978365 -0.1366595 #> 16 -1.5282017  0.27877947  0.9118286 -0.6129378  1.40918496 -2.9373867 #>    test_name statistic   p_value k  null #> 1     F-test 0.7670548 0.6827506 1 FALSE #> 2     F-test 0.7670548 0.6827506 1 FALSE #> 3     F-test 0.7670548 0.6827506 1 FALSE #> 4     F-test 0.7670548 0.6827506 1 FALSE #> 5     F-test 0.7670548 0.6827506 1 FALSE #> 6     F-test 0.7670548 0.6827506 1 FALSE #> 7     F-test 0.7670548 0.6827506 1 FALSE #> 8     F-test 0.7670548 0.6827506 1 FALSE #> 9     F-test 9.2175269 0.2416036 2  TRUE #> 10    F-test 9.2175269 0.2416036 2  TRUE #> 11    F-test 9.2175269 0.2416036 2  TRUE #> 12    F-test 9.2175269 0.2416036 2  TRUE #> 13    F-test 9.2175269 0.2416036 2  TRUE #> 14    F-test 9.2175269 0.2416036 2  TRUE #> 15    F-test 9.2175269 0.2416036 2  TRUE #> 16    F-test 9.2175269 0.2416036 2  TRUE mod$plot_lineup(mod$gen_lineup(n = 300, k = 20), type = \"resid\", alpha = 0.6)"},{"path":"https://tengmcing.github.io/visage/index.html","id":"2-visual-inference-heteroskedasticity-linear-model-class-heter_model","dir":"","previous_headings":"","what":"2. Visual inference heteroskedasticity linear model class HETER_MODEL","title":"Visual Inference for Linear Regression Diagnostics","text":"visual inference heteroskedasticity linear model defined : x random variables, , b parameters e random error term. Similar cubic model, heteroskedasticity model built heteroskedasticity model class constructor heter_model(). function takes three arguments inputs, , b x. b numeric parameters defined . x needs random variable object. Since cubic model class CUBIC_MODEL heteroskedasticity model class HETER_MODEL inherited visual inference model class VI_MODEL, heteroskedasticity model object can used similar way cubic model object. following codes give examples use object.","code":"HETER_MODEL$formula #> y ~ 1 + x + sqrt(1 + (2 - abs(a)) * (x - a)^2 * b) * e mod <- heter_model(a = 0, b = 16, x = rand_uniform(-1, 1))  mod #>  #> ── <HETER_MODEL object> #> y = 1 + x + sqrt(1 + (2 - abs(a)) * (x - a)^2 * b) * e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #>  - a: 0 #>  - b: 16 mod$gen(n = 5) #>            y          x          e     .resid   .fitted #> 1  2.6882289  0.1028836  1.3701839  1.4093750 1.2788539 #> 2 -0.2705299  0.0545881 -1.2661262 -1.6280278 1.3574978 #> 3  0.9136788  0.4146411 -0.1964683  0.1424887 0.7711902 #> 4  3.3598493 -0.8119117  0.6747753  0.5913495 2.7684998 #> 5  2.0846112 -0.7083106  0.4341517 -0.5151854 2.5997966 mod$plot(mod$gen(n = 300), type = \"resid\", size = 1) mod$plot_lineup(mod$gen_lineup(n = 300), alpha = 0.6)"},{"path":"https://tengmcing.github.io/visage/index.html","id":"3-closed-form-expression-closed_form","dir":"","previous_headings":"","what":"3. Closed form expression CLOSED_FORM","title":"Visual Inference for Linear Regression Diagnostics","text":"3.1. Define evaluate closed form expression “Closed form expression” defined special type R expression can replace random variables expression realizations evaluation. may sound confusing, let’s look examples. closed_form() closed form expression constructor, takes one arguments expr required formula. Considering simplest case first, expression contains zero random variables, 1 + 3. can evaluated using method compute() directly typical R expression. However, closed form expression contains random variables, can evaluated directly since values random variables unknown. following example, x uniform random variable ranged -1 1, x + 1 expression can evaluated method compute(). case, gen() method try generate n realizations random variables, evaluate expression. addition, rhs_val = TRUE, realizations generated random variables returned. 3.2. Nested closed form expression Nested closed form expression useful hierarchical structure present expression. Consider following statistical model: y = x + e, x uniform random variable ranged -1 1, e = 1 + x^2 * z, z standard normal random variable. can define model using following code: Note y depends e e closed form expression. y e depend x. method gen() return values x, z e rhs_val = TRUE. 3.3. Turn gen() result dataframe via method as_dataframe() Results gen() either vector list, can converted dataframe via method as_dataframe(). lhs argument naming left hand side result closed form expression. 3.4. Current limitiation CLOSED_FORM closed_form(), simple expressions can provided, long symbols exist current environment. Note function tries evaluate atomic symbols expression initialization, store values object. Hence, calls like $b also decomposed $, b, b interpreted variable b exists current environment. Therefore, use ~[[\"b\"]] instead ~$b. pre-define function like myfun = function() 1, use expression ~myfun().","code":"cf <- closed_form(~1 + 3) cf #>  #> ── <CLOSED_FORM object> #> EXPR = 1 + 3 cf$compute() #> [1] 4 x <- rand_uniform(-1, 1) cf <- closed_form(~1 + x) cf$gen(n = 5, rhs_val = TRUE) #> $lhs #> [1] 1.3170041 1.7636643 1.6469277 0.5630111 1.5370695 #>  #> $rhs #> $rhs$x #> [1]  0.3170041  0.7636643  0.6469277 -0.4369889  0.5370695 z <- rand_normal(mu = 0, sigma = 1) x <- rand_uniform(-1, 1) e <- closed_form(~1 + x^2 * z) y <- closed_form(~x + e) y #>  #> ── <CLOSED_FORM object> #> EXPR = x + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <CLOSED_FORM object> #>    EXPR = 1 + x^2 * z #>     - x: <RAND_UNIFORM object> #>       [a: -1, b: 1] #>     - z: <RAND_NORMAL object> #>       [mu: 0, sigma: 1] y$gen(n = 5, rhs_val = TRUE) #> $lhs #> [1] 1.5498807 1.2346299 0.3426129 1.6373318 2.7634076 #>  #> $rhs #> $rhs$x #> [1] 0.3994252 0.2808786 0.7875256 0.5864617 0.8603465 #>  #> $rhs$z #> [1]  0.9430551 -0.5862216 -2.3297659  0.1479049  1.2200295 #>  #> $rhs$e #> [1]  1.1504555  0.9537514 -0.4449126  1.0508700  1.9030611 y$as_dataframe(y$gen(n = 5, rhs_val = TRUE), lhs = \"y\") #>            y          x          z         e #> 1 1.23631909  0.2953603 -0.6767856 0.9409588 #> 2 0.02214544 -0.5057357 -1.8458824 0.5278812 #> 3 2.33608068  0.9647250  0.3990093 1.3713557 #> 4 1.50697387  0.4625741  0.2075001 1.0443998 #> 5 0.76023852 -0.2661947  0.3730363 1.0264332"},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — CLOSED_FORM$..init..","title":"Initialization method — CLOSED_FORM$..init..","text":"function called instance built. User input stored environment. simple expressions can provided, long symbols exist current environment. Note function tries evaluate atomic symbols expression initialization, store values object. Hence, calls like $b also decomposed $, b, b interpreted variable \"b\" exists current environment. Therefore, use ~[[\"b\"]] instead ~$b. pre-define function like myfun = function() 1, use expression ~myfun().  Random variables replaced returns gen method, typically vectors.  Inner closed form expressions hierarchical closed form expression also replaced returns gen method.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — CLOSED_FORM$..init..","text":"expr Formula. right hand side last ~ kept final expression.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — CLOSED_FORM$..init..","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — CLOSED_FORM$..init..","text":"","code":"# Constant variable a <- 1  # Random uniform variable b <- rand_uniform()  # Define a closed form expression cf <- closed_form(~3 * (exp(a) + b))  cf #>  #> ── <CLOSED_FORM object> #> EXPR = 3 * (exp(a) + b) #>  - b: <RAND_UNIFORM object> #>    [a: 0, b: 1]   d <- rand_normal()  # Define a closed form expression with another closed form expression cf2 <- closed_form(~cf + 3 * d)  cf2 #>  #> ── <CLOSED_FORM object> #> EXPR = cf + 3 * d #>  - cf: <CLOSED_FORM object> #>    EXPR = 3 * (exp(a) + b) #>     - b: <RAND_UNIFORM object> #>       [a: 0, b: 1] #>  - d: <RAND_NORMAL object> #>    [mu: 0, sigma: 1]"},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-..len...html","id":null,"dir":"Reference","previous_headings":"","what":"Length of the object — CLOSED_FORM$..len..","title":"Length of the object — CLOSED_FORM$..len..","text":"function recursively count symbols stored closed form expression nested closed form expression.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-..len...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Length of the object — CLOSED_FORM$..len..","text":"integer.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-..len...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Length of the object — CLOSED_FORM$..len..","text":"","code":"test <- closed_form(~1+1) test$..len..() #> [1] 1"},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-..str...html","id":null,"dir":"Reference","previous_headings":"","what":"String representation of the object — CLOSED_FORM$..str..","title":"String representation of the object — CLOSED_FORM$..str..","text":"function returns string representation object.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-..str...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"String representation of the object — CLOSED_FORM$..str..","text":"string.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-..str...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"String representation of the object — CLOSED_FORM$..str..","text":"","code":"CLOSED_FORM$..str..() #> [1] \"<CLOSED_FORM class>\"  test <- closed_form(~1+1) test$..str..() #> [1] \"<CLOSED_FORM object>\\n EXPR = 1 + 1\""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-as_dataframe.html","id":null,"dir":"Reference","previous_headings":"","what":"Transforming list to data frame — CLOSED_FORM$as_dataframe","title":"Transforming list to data frame — CLOSED_FORM$as_dataframe","text":"function transforms result generated gen data frame.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-as_dataframe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transforming list to data frame — CLOSED_FORM$as_dataframe","text":"dat Vector List. Results generated gen method. lhs Character. name expression. Default \".lhs\".","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-as_dataframe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transforming list to data frame — CLOSED_FORM$as_dataframe","text":"data frame.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-as_dataframe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transforming list to data frame — CLOSED_FORM$as_dataframe","text":"","code":"# Constant variable a <- 1  # Random uniform variable b <- rand_uniform()  # Define a closed form expression cf <- closed_form(~3 * (exp(a) + b))  # Generate data result1 <- cf$gen(10)  cf$as_dataframe(result1) #>         .lhs #> 1   8.192548 #> 2   8.668875 #> 3  10.206296 #> 4   9.072490 #> 5   8.162237 #> 6  10.956643 #> 7  11.017042 #> 8   8.377469 #> 9  11.031086 #> 10 10.040282  # Generate data and keep the RHS result2 <- cf$gen(10, rhs_val = TRUE)  # Specify the name cf$as_dataframe(result2, lhs = \"y\") #>            y         b #> 1   9.854946 0.5667002 #> 2   8.727139 0.1907644 #> 3  10.676978 0.8407109 #> 4  10.457803 0.7676526 #> 5   9.201148 0.3487677 #> 6  10.903974 0.9163763 #> 7  10.926932 0.9240287 #> 8   9.154990 0.3333816 #> 9  10.627135 0.8240964 #> 10 10.280492 0.7085489"},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-ast.html","id":null,"dir":"Reference","previous_headings":"","what":"Abstract syntax tree of the expression — CLOSED_FORM$ast","title":"Abstract syntax tree of the expression — CLOSED_FORM$ast","text":"function returns abstract syntax tree exrpession","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-ast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Abstract syntax tree of the expression — CLOSED_FORM$ast","text":"expr Language. quoted expression.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-ast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Abstract syntax tree of the expression — CLOSED_FORM$ast","text":"list.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-ast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Abstract syntax tree of the expression — CLOSED_FORM$ast","text":"","code":"CLOSED_FORM$ast(quote(a + b)) #> [[1]] #> `+` #>  #> [[2]] #> a #>  #> [[3]] #> b #>  CLOSED_FORM$ast(quote(exp(a) + b^2)) #> [[1]] #> `+` #>  #> [[2]] #> [[2]][[1]] #> exp #>  #> [[2]][[2]] #> a #>  #>  #> [[3]] #> [[3]][[1]] #> `^` #>  #> [[3]][[2]] #> b #>  #> [[3]][[3]] #> [1] 2 #>  #>"},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-compute.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the expression without generating any random values — CLOSED_FORM$compute","title":"Compute the expression without generating any random values — CLOSED_FORM$compute","text":"function computes deterministic expression.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-compute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the expression without generating any random values — CLOSED_FORM$compute","text":"Numeric value.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-compute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the expression without generating any random values — CLOSED_FORM$compute","text":"","code":"test <- closed_form(~1+mean(c(1,2,3))) test$compute() #> [1] 3"},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-expr.html","id":null,"dir":"Reference","previous_headings":"","what":"Expression extracted from the provided formula — CLOSED_FORM$expr","title":"Expression extracted from the provided formula — CLOSED_FORM$expr","text":"language object.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-expr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expression extracted from the provided formula — CLOSED_FORM$expr","text":"","code":"# Constant variable a <- 1  # Random uniform variable b <- rand_uniform()  # Define a closed form expression cf <- closed_form(omit~omit~3 * (exp(a) + b))  # Only the right hand side of the last `~` will be kept cf$expr #> 3 * (exp(a) + b)  d <- rand_normal()  # Define a closed form expression with another closed form expression cf2 <- closed_form(~cf + 3 * d)  cf2$expr #> cf + 3 * d"},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-gen.html","id":null,"dir":"Reference","previous_headings":"","what":"Generating random values from the expression — CLOSED_FORM$gen","title":"Generating random values from the expression — CLOSED_FORM$gen","text":"function generates random values expression. Random values closed form expression share value long name.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-gen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generating random values from the expression — CLOSED_FORM$gen","text":"n Integer. Number observations. rhs_val Boolean. Whether keep right hand side values expression. Default FALSE. computed List. Default NULL. provided, random variables random closed form expression use values list, makes expression potentially deterministic.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-gen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generating random values from the expression — CLOSED_FORM$gen","text":"Numeric values.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-gen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generating random values from the expression — CLOSED_FORM$gen","text":"","code":"# Constant variable a <- 1  # Random uniform variable b <- rand_uniform()  # Define a closed form expression cf <- closed_form(~3 * (exp(a) + b))  # Generate 5 values cf$gen(5) #> [1] 10.083071  8.937196  8.781802 10.474826 10.290357  # Generate 5 values, and keep RHS cf$gen(5, rhs_val = TRUE) #> $lhs #> [1] 10.378261  8.526266  8.198720  9.894443 10.101389 #>  #> $rhs #> $rhs$b #> [1] 0.74113856 0.12380671 0.01462499 0.57986600 0.64884797 #>  #>   d <- rand_normal()  # Define a closed form expression with another closed form expression cf2 <- closed_form(~cf + 3 * d)  # Generate 5 values cf2$gen(5) #> [1]  8.600739  9.455579  8.382511  7.181031 12.334919  # Generate 5 values, and keep RHS cf2$gen(5, rhs_val = TRUE) #> $lhs #> [1]  6.485381  8.930756 12.106361  7.062871 11.128601 #>  #> $rhs #> $rhs$b #> [1] 0.9875281 0.6805939 0.9788710 0.4168383 0.0668799 #>  #> $rhs$cf #> [1] 11.117430 10.196627 11.091458  9.405361  8.355485 #>  #> $rhs$d #> [1] -1.5440163 -0.4219570  0.3383008 -0.7808298  0.9243721 #>  #>   # Define a closed form expression with two random variables of the same name cf3 <- closed_form(~d + d)  # Both `d` will share the same values cf3$gen(5, rhs_val = TRUE) #> $lhs #> [1] -0.47141952 -1.65557201  1.45405312 -0.56348930 -0.04068322 #>  #> $rhs #> $rhs$d #> [1] -0.23570976 -0.82778600  0.72702656 -0.28174465 -0.02034161 #>  #>   # Define a closed form expression with two closed form expressions of the same name cf4 <- closed_form(~cf3 + cf3)  # Both `cf3` will share the same values, both `d` will share the same values as well cf4$gen(5, rhs_val = TRUE) #> $lhs #> [1] -4.5309517 -2.8518840 -0.3722823 -2.2861048 -0.4953342 #>  #> $rhs #> $rhs$d #> [1] -1.13273793 -0.71297099 -0.09307056 -0.57152620 -0.12383354 #>  #> $rhs$cf3 #> [1] -2.2654759 -1.4259420 -0.1861411 -1.1430524 -0.2476671 #>  #>   # Define a closed form expression with two different closed form expressions, # but contains same random variables cf5 <- closed_form(~cf3 + cf4)  # Both `d` in `cf3` and `cf4` will share the same value cf5$gen(5, rhs_val = TRUE) #> $lhs #> [1]  1.999735 -9.055145 -7.227821 -2.795524  3.640855 #>  #> $rhs #> $rhs$d #> [1]  0.3332891 -1.5091909 -1.2046368 -0.4659206  0.6068092 #>  #> $rhs$cf3 #> [1]  0.6665782 -3.0183818 -2.4092735 -0.9318412  1.2136183 #>  #> $rhs$cf4 #> [1]  1.333156 -6.036764 -4.818547 -1.863682  2.427237 #>  #>   # Control the value of `d` cf5$gen(5, rhs_val = TRUE, computed = list(d = 1)) #> $lhs #> [1] 6 #>  #> $rhs #> $rhs$d #> [1] 1 #>  #> $rhs$cf3 #> [1] 2 #>  #> $rhs$cf4 #> [1] 4 #>  #>"},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-set_expr.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the closed form expression — CLOSED_FORM$set_expr","title":"Set the closed form expression — CLOSED_FORM$set_expr","text":"function updates closed form expression. update symbol values. updating symbol values, please check CLOSED_FORM$set_sym.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-set_expr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the closed form expression — CLOSED_FORM$set_expr","text":"expr Formula. right hand side last ~ kept final expression.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-set_expr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the closed form expression — CLOSED_FORM$set_expr","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-set_expr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the closed form expression — CLOSED_FORM$set_expr","text":"","code":"# Constant variable a <- 1  # Random uniform variable z <- closed_form(~2 + a)  z$compute() #> [1] 3  # Update the expression z$set_expr(~2 - a) #>  #> ── <CLOSED_FORM object> #> EXPR = 2 - a   z$compute() #> [1] 1"},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-set_sym.html","id":null,"dir":"Reference","previous_headings":"","what":"Set values for symbols — CLOSED_FORM$set_sym","title":"Set values for symbols — CLOSED_FORM$set_sym","text":"function stores user inputs updated values symbols. List symbol names symbol types updated automatically. protection values modified, may lead error loss binding objects. Please use function caution.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-set_sym.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set values for symbols — CLOSED_FORM$set_sym","text":"sym_name Vector List. sequence character symbol names. sym_value Vector List. sequence symbol values.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-set_sym.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set values for symbols — CLOSED_FORM$set_sym","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-set_sym.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set values for symbols — CLOSED_FORM$set_sym","text":"","code":"# Constant variable a <- 1  # Random uniform variable z <- closed_form(~2 + a)  z$compute() #> [1] 3  # Update value for \"a\" z$set_sym(\"a\", 3) #>  #> ── <CLOSED_FORM object> #> EXPR = 2 + a   z$compute() #> [1] 5  # Update value for \"+\" z$set_sym(\"+\", list(function(a, b) a * b)) #>  #> ── <CLOSED_FORM object> #> EXPR = 2 + a   z$compute() #> [1] 6"},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-sym.html","id":null,"dir":"Reference","previous_headings":"","what":"List of symbols in the abstract syntax tree of the expression — CLOSED_FORM$sym","title":"List of symbols in the abstract syntax tree of the expression — CLOSED_FORM$sym","text":"list, initialized instance built.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-sym.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of symbols in the abstract syntax tree of the expression — CLOSED_FORM$sym","text":"","code":"# Constant variable a <- 1  # Random uniform variable b <- rand_uniform()  # Define a closed form expression cf <- closed_form(~3 * (exp(a) + b))  cf #>  #> ── <CLOSED_FORM object> #> EXPR = 3 * (exp(a) + b) #>  - b: <RAND_UNIFORM object> #>    [a: 0, b: 1]   # Get the list of symbols cf$sym #> $`*` #> function (e1, e2)  .Primitive(\"*\") #>  #> $`(` #> .Primitive(\"(\") #>  #> $`+` #> function (e1, e2)  .Primitive(\"+\") #>  #> $exp #> function (x)  .Primitive(\"exp\") #>  #> $a #> [1] 1 #>  #> $b #>  #> ── <RAND_UNIFORM object> #> [a: 0, b: 1]  #>   # Get the list of symbol names cf$sym_name #> [[1]] #> [1] \"*\" #>  #> [[2]] #> [1] \"(\" #>  #> [[3]] #> [1] \"+\" #>  #> [[4]] #> [1] \"exp\" #>  #> [[5]] #> [1] \"a\" #>  #> [[6]] #> [1] \"b\" #>   # Get the list of symbol types cf$sym_type #> $`*` #> [1] \"other\" #>  #> $`(` #> [1] \"other\" #>  #> $`+` #> [1] \"other\" #>  #> $exp #> [1] \"other\" #>  #> $a #> [1] \"other\" #>  #> $b #> [1] \"rand_var or closed_form\" #>   d <- rand_normal()  # Define a closed form expression with another closed form expression cf2 <- closed_form(~cf + 3 * d)  cf2 #>  #> ── <CLOSED_FORM object> #> EXPR = cf + 3 * d #>  - cf: <CLOSED_FORM object> #>    EXPR = 3 * (exp(a) + b) #>     - b: <RAND_UNIFORM object> #>       [a: 0, b: 1] #>  - d: <RAND_NORMAL object> #>    [mu: 0, sigma: 1]   # Get the list of symbols, constants are not counted as symbols cf2$sym #> $`+` #> function (e1, e2)  .Primitive(\"+\") #>  #> $cf #>  #> ── <CLOSED_FORM object> #> EXPR = 3 * (exp(a) + b) #>  - b: <RAND_UNIFORM object> #>    [a: 0, b: 1]  #>  #> $`*` #> function (e1, e2)  .Primitive(\"*\") #>  #> $d #>  #> ── <RAND_NORMAL object> #> [mu: 0, sigma: 1]  #>   # Get the list of symbol names cf2$sym_name #> [[1]] #> [1] \"+\" #>  #> [[2]] #> [1] \"cf\" #>  #> [[3]] #> [1] \"*\" #>  #> [[4]] #> [1] \"d\" #>   # Get the list of symbol types cf$sym_type #> $`*` #> [1] \"other\" #>  #> $`(` #> [1] \"other\" #>  #> $`+` #> [1] \"other\" #>  #> $exp #> [1] \"other\" #>  #> $a #> [1] \"other\" #>  #> $b #> [1] \"rand_var or closed_form\" #>"},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-sym_name.html","id":null,"dir":"Reference","previous_headings":"","what":"List of symbol names in the abstract syntax tree of the expression — CLOSED_FORM$sym_name","title":"List of symbol names in the abstract syntax tree of the expression — CLOSED_FORM$sym_name","text":"list, initialized instance built.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM-cash-sym_type.html","id":null,"dir":"Reference","previous_headings":"","what":"List of symbol types in the abstract syntax tree of the expression — CLOSED_FORM$sym_type","title":"List of symbol types in the abstract syntax tree of the expression — CLOSED_FORM$sym_type","text":"list, initialized instance built.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM.html","id":null,"dir":"Reference","previous_headings":"","what":"CLOSED_FORM class environment — CLOSED_FORM","title":"CLOSED_FORM class environment — CLOSED_FORM","text":"base class closed form expression, inherited bandicoot::BASE.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CLOSED_FORM class environment — CLOSED_FORM","text":"","code":"CLOSED_FORM"},{"path":"https://tengmcing.github.io/visage/reference/CLOSED_FORM.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CLOSED_FORM class environment — CLOSED_FORM","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — CUBIC_MODEL$..init..","title":"Initialization method — CUBIC_MODEL$..init..","text":"function called instance built. User input stored environment. response variable model y. formula y defined CUBIC_MODEL$formula, null formula defined CUBIC_MODEL$null_formula, alternative defined CUBIC_MODEL$alt_formula.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — CUBIC_MODEL$..init..","text":"Numeric. Default = 1. b Numeric. Default b = 1. c Numeric. Default c = 1. sigma Positive numeric. Default sigma = 1. x Random variable closed form expression. Default x = rand_uniform(-1, 1, env = new.env(parent = parent.env(self))). z Random variable closed form expression. Default z = rand_uniform(-1, 1, env = new.env(parent = parent.env(self))). e Random variable closed form expression. Default e = rand_normal(0, sigma, env = new.env(parent = parent.env(self))).","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — CUBIC_MODEL$..init..","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — CUBIC_MODEL$..init..","text":"","code":"# Instantiate x <- rand_uniform() z <- rand_uniform() e <- rand_normal()  test <- cubic_model(a = 200, b = 200, c = 1, x = x, z = z, e = e)  test #>  #> ── <CUBIC_MODEL object> #> y = 1 + (2 - c) * x + c * z + a * (((2 - c) * x)^2 + (c * z)^2) + b * (((2 - c) * x)^3 + (c * z)^3) + e #>  - x: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - z: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #>  - a: 200 #>  - b: 200 #>  - c: 1 #>  - sigma: 1   # Generate data test$gen(10) #>            y          x           z           e     .resid   .fitted #> 1  149.73343 0.26380789 0.629815827  0.94981624 -23.765962 173.49939 #> 2  100.98987 0.06740583 0.561223824  0.04286311  24.935545  76.05432 #> 3   12.22379 0.09258826 0.190276372  0.44884479  50.534996 -38.31121 #> 4  541.01634 0.82733793 0.876257855  0.02594967  71.340096 469.67624 #> 5   34.15214 0.30176561 0.205594067 -1.25545285 -12.032430  46.18457 #> 6  159.39403 0.31475804 0.635902465 -0.91054996 -35.473281 194.86731 #> 7  362.22714 0.84414563 0.560782935 -1.16495262  -8.437141 370.66428 #> 8  271.28567 0.66482354 0.615124620 -0.38708592 -49.483290 320.76896 #> 9   67.20643 0.47458489 0.007876557 -0.71292527  21.491538  45.71489 #> 10  59.53218 0.37063909 0.284385051 -0.55559185 -39.110071  98.64225  # Generate lineup test$gen_lineup(10, k = 3) #>            y         x          z           e      .resid    .fitted test_name #> 1  333.37494 0.8300339 0.51287876 -0.72156346 -33.1334229 366.508363    F-test #> 2  285.28622 0.8713794 0.01893385 -0.86562779  64.6208821 220.665335    F-test #> 3  137.84756 0.2811824 0.60183141 -0.33141987 -14.2688596 152.116424    F-test #> 4  327.02680 0.7992478 0.55570550 -1.28206561 -40.0356322 367.062430    F-test #> 5  507.56955 0.9845270 0.61032841  0.28717399  39.9896336 467.579918    F-test #> 6   52.69306 0.3243820 0.29893791 -0.01715031 -17.9230681  70.616129    F-test #> 7  439.19953 0.4730629 0.97078069 -0.63391880  79.1276667 360.071867    F-test #> 8  214.43815 0.6897323 0.42207325  0.88754184 -59.5158222 273.953969    F-test #> 9   26.63335 0.2302883 0.21932351  0.40406279  24.3114208   2.321926    F-test #> 10 302.55415 0.6563128 0.68263330  0.70756601 -43.1727981 345.726952    F-test #> 11 316.78174 0.8300339 0.51287876 -0.72156346 -49.7266218 366.508363    F-test #> 12 207.33773 0.8713794 0.01893385 -0.86562779 -13.3276012 220.665335    F-test #> 13 126.16518 0.2811824 0.60183141 -0.33141987 -25.9512479 152.116424    F-test #> 14 347.74878 0.7992478 0.55570550 -1.28206561 -19.3136459 367.062430    F-test #> 15 513.15615 0.9845270 0.61032841  0.28717399  45.5762285 467.579918    F-test #> 16 154.29358 0.3243820 0.29893791 -0.01715031  83.6774492  70.616129    F-test #> 17 328.69275 0.4730629 0.97078069 -0.63391880 -31.3791130 360.071867    F-test #> 18 240.28246 0.6897323 0.42207325  0.88754184 -33.6715086 273.953969    F-test #> 19 -27.53975 0.2302883 0.21932351  0.40406279 -29.8616726   2.321926    F-test #> 20 419.70469 0.6563128 0.68263330  0.70756601  73.9777333 345.726952    F-test #> 21 442.11094 0.8300339 0.51287876 -0.72156346  75.6025809 366.508363    F-test #> 22 228.26200 0.8713794 0.01893385 -0.86562779   7.5966665 220.665335    F-test #> 23 194.45140 0.2811824 0.60183141 -0.33141987  42.3349773 152.116424    F-test #> 24 422.46575 0.7992478 0.55570550 -1.28206561  55.4033184 367.062430    F-test #> 25 400.73138 0.9845270 0.61032841  0.28717399 -66.8485420 467.579918    F-test #> 26  19.85977 0.3243820 0.29893791 -0.01715031 -50.7563613  70.616129    F-test #> 27 365.44076 0.4730629 0.97078069 -0.63391880   5.3688898 360.071867    F-test #> 28 262.95504 0.6897323 0.42207325  0.88754184 -10.9989323 273.953969    F-test #> 29   3.16935 0.2302883 0.21932351  0.40406279   0.8474234   2.321926    F-test #> 30 287.17693 0.6563128 0.68263330  0.70756601 -58.5500208 345.726952    F-test #>       statistic      p_value k  null #> 1  4565.6795893 5.261674e-06 1 FALSE #> 2  4565.6795893 5.261674e-06 1 FALSE #> 3  4565.6795893 5.261674e-06 1 FALSE #> 4  4565.6795893 5.261674e-06 1 FALSE #> 5  4565.6795893 5.261674e-06 1 FALSE #> 6  4565.6795893 5.261674e-06 1 FALSE #> 7  4565.6795893 5.261674e-06 1 FALSE #> 8  4565.6795893 5.261674e-06 1 FALSE #> 9  4565.6795893 5.261674e-06 1 FALSE #> 10 4565.6795893 5.261674e-06 1 FALSE #> 11    1.0216940 5.136781e-01 2  TRUE #> 12    1.0216940 5.136781e-01 2  TRUE #> 13    1.0216940 5.136781e-01 2  TRUE #> 14    1.0216940 5.136781e-01 2  TRUE #> 15    1.0216940 5.136781e-01 2  TRUE #> 16    1.0216940 5.136781e-01 2  TRUE #> 17    1.0216940 5.136781e-01 2  TRUE #> 18    1.0216940 5.136781e-01 2  TRUE #> 19    1.0216940 5.136781e-01 2  TRUE #> 20    1.0216940 5.136781e-01 2  TRUE #> 21    0.7641615 6.125040e-01 3  TRUE #> 22    0.7641615 6.125040e-01 3  TRUE #> 23    0.7641615 6.125040e-01 3  TRUE #> 24    0.7641615 6.125040e-01 3  TRUE #> 25    0.7641615 6.125040e-01 3  TRUE #> 26    0.7641615 6.125040e-01 3  TRUE #> 27    0.7641615 6.125040e-01 3  TRUE #> 28    0.7641615 6.125040e-01 3  TRUE #> 29    0.7641615 6.125040e-01 3  TRUE #> 30    0.7641615 6.125040e-01 3  TRUE  # Plot the lineup test$plot_lineup(test$gen_lineup(100))"},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-E.html","id":null,"dir":"Reference","previous_headings":"","what":"Expectation of the residuals — CUBIC_MODEL$E","title":"Expectation of the residuals — CUBIC_MODEL$E","text":"function calculate expectation residuals use Frisch–Waugh–Lovell theorem.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-E.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expectation of the residuals — CUBIC_MODEL$E","text":"dat Dataframe/List. List contains variable x z. Numeric. Default = self$prm$. b Numeric. Default b = self$prm$b. c Numeric. Default c = self$prm$c.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-E.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expectation of the residuals — CUBIC_MODEL$E","text":"vector numeric expectations.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-E.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expectation of the residuals — CUBIC_MODEL$E","text":"","code":"mod <- cubic_model(-1, 1, 1, 0.5) dat <- mod$gen(1000, fit_model = TRUE) dat$exp <- mod$E(dat) mod$plot(dat) + ggplot2::geom_point(ggplot2::aes(.fitted, exp),                                     col = \"red\",                                     alpha = 0.6)"},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-alt_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the alternative model — CUBIC_MODEL$alt_formula","title":"Formula for fitting the alternative model — CUBIC_MODEL$alt_formula","text":"Quoted formula fitting alternative model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-alt_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the alternative model — CUBIC_MODEL$alt_formula","text":"","code":"CUBIC_MODEL$alt_formula #> y ~ x + I(x^2) + I(x^3) + z + I(z^2) + I(z^3)"},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-effect_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the effect size of the simulated data — CUBIC_MODEL$effect_size","title":"Compute the effect size of the simulated data — CUBIC_MODEL$effect_size","text":"function computes effect size simulated data.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-effect_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the effect size of the simulated data — CUBIC_MODEL$effect_size","text":"dat Dataframe/List. List contains variable x z. Numeric. Default = self$prm$. b Numeric. Default b = self$prm$b. c Numeric. Default c = self$prm$c. sigma Positive numeric. Default sigma = self$prm$sigma.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-effect_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the effect size of the simulated data — CUBIC_MODEL$effect_size","text":"numeric value.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-effect_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the effect size of the simulated data — CUBIC_MODEL$effect_size","text":"","code":"mod <- cubic_model(-1, 1, 1, 0.5) dat <- mod$gen(1000, fit_model = TRUE) mod$effect_size(dat) #> [1] 3.516905"},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Closed form expression of y — CUBIC_MODEL$formula","title":"Closed form expression of y — CUBIC_MODEL$formula","text":"quoted formula, passed CLOSED_FORM$instantiate define closed form expression y.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Closed form expression of y — CUBIC_MODEL$formula","text":"","code":"CUBIC_MODEL$formula #> y ~ 1 + (2 - c) * x + c * z + a * (((2 - c) * x)^2 + (c * z)^2) +  #>     b * (((2 - c) * x)^3 + (c * z)^3) + e"},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-null_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the null model — CUBIC_MODEL$null_formula","title":"Formula for fitting the null model — CUBIC_MODEL$null_formula","text":"Quoted formula fitting null model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-null_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the null model — CUBIC_MODEL$null_formula","text":"","code":"CUBIC_MODEL$null_formula #> y ~ x + z"},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-set_prm.html","id":null,"dir":"Reference","previous_headings":"","what":"Set parameter for the model — CUBIC_MODEL$set_prm","title":"Set parameter for the model — CUBIC_MODEL$set_prm","text":"function store values environment update values closed form expression y, except parameter sigma. parameter sigma, value updated, corresponding value e updated.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-set_prm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set parameter for the model — CUBIC_MODEL$set_prm","text":"prm_name List Vector. Parameter character names. prm_val List Vector. Parameter values.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-set_prm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set parameter for the model — CUBIC_MODEL$set_prm","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL-cash-set_prm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set parameter for the model — CUBIC_MODEL$set_prm","text":"","code":"# Instantiate mod <- cubic_model(a = -1, b = 1, c = 1, sigma = 0.5)  mod #>  #> ── <CUBIC_MODEL object> #> y = 1 + (2 - c) * x + c * z + a * (((2 - c) * x)^2 + (c * z)^2) + b * (((2 - c) * x)^3 + (c * z)^3) + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - z: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #>  - a: -1 #>  - b: 1 #>  - c: 1 #>  - sigma: 0.5   mod$set_prm(\"a\", 2) #>  #> ── <CUBIC_MODEL object> #> y = 1 + (2 - c) * x + c * z + a * (((2 - c) * x)^2 + (c * z)^2) + b * (((2 - c) * x)^3 + (c * z)^3) + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - z: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #>  - a: 2 #>  - b: 1 #>  - c: 1 #>  - sigma: 0.5   mod #>  #> ── <CUBIC_MODEL object> #> y = 1 + (2 - c) * x + c * z + a * (((2 - c) * x)^2 + (c * z)^2) + b * (((2 - c) * x)^3 + (c * z)^3) + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - z: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #>  - a: 2 #>  - b: 1 #>  - c: 1 #>  - sigma: 0.5   mod$set_prm(\"sigma\", 1) #>  #> ── <CUBIC_MODEL object> #> y = 1 + (2 - c) * x + c * z + a * (((2 - c) * x)^2 + (c * z)^2) + b * (((2 - c) * x)^3 + (c * z)^3) + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - z: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #>  - a: 2 #>  - b: 1 #>  - c: 1 #>  - sigma: 1   mod #>  #> ── <CUBIC_MODEL object> #> y = 1 + (2 - c) * x + c * z + a * (((2 - c) * x)^2 + (c * z)^2) + b * (((2 - c) * x)^3 + (c * z)^3) + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - z: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #>  - a: 2 #>  - b: 1 #>  - c: 1 #>  - sigma: 1"},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL.html","id":null,"dir":"Reference","previous_headings":"","what":"CUBIC_MODEL class environment — CUBIC_MODEL","title":"CUBIC_MODEL class environment — CUBIC_MODEL","text":"class visual inference cubic linear model, inherited VI_MODEL.","code":""},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CUBIC_MODEL class environment — CUBIC_MODEL","text":"","code":"CUBIC_MODEL"},{"path":"https://tengmcing.github.io/visage/reference/CUBIC_MODEL.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"CUBIC_MODEL class environment — CUBIC_MODEL","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — HETER_MODEL$..init..","title":"Initialization method — HETER_MODEL$..init..","text":"function called instance built. User input stored environment. response variable model y. formula y defined HETER_MODEL$formula, null formula defined HETER_MODEL$null_formula.","code":""},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — HETER_MODEL$..init..","text":"Numeric. Default = 0. b Numeric. Default b = 1. x Random variable closed form expression. Default x = rand_uniform(-1, 1, env = new.env(parent = parent.env(self))). e Random variable closed form expression. Default e = rand_normal(0, 1, env = new.env(parent = parent.env(self))).","code":""},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — HETER_MODEL$..init..","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — HETER_MODEL$..init..","text":"","code":"# Instantiate test <- heter_model(a = 0, b = 20)  test #>  #> ── <HETER_MODEL object> #> y = 1 + x + sqrt(1 + (2 - abs(a)) * (x - a)^2 * b) * e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #>  - a: 0 #>  - b: 20   # Generate data test$gen(10) #>             y           x           e     .resid   .fitted #> 1   5.0296775  0.59786552  0.87742504  4.4132817 0.6163958 #> 2   3.0267304 -0.13381960  1.64917513  1.7182531 1.3084773 #> 3   1.6140448 -0.05520045  0.63184622  0.3799312 1.2341136 #> 4  -0.6564423 -0.37195200 -0.50250866 -2.1901628 1.5337204 #> 5  -2.2394981  0.49021469 -1.14490175 -2.9577179 0.7182198 #> 6  -0.5253047  0.26647615 -0.91431893 -1.4551529 0.9298482 #> 7   0.9944900  0.04985490 -0.05280232 -0.1402545 1.1347445 #> 8   1.7938840 -0.63596319  0.34498781  0.0104424 1.7834416 #> 9   3.4477777 -0.43999876  0.97658397  1.8496937 1.5980841 #> 10 -0.7584095  0.32985008 -0.90266100 -1.6283139 0.8699045  # Generate lineup test$gen_lineup(10, k = 3) #>              y           x           e      .resid   .fitted test_name #> 1   2.00226863  0.08709549  0.80160470 -1.08133237 3.0836010   BP-test #> 2   8.72435933  0.89379029  1.18987104  3.73395655 4.9904028   BP-test #> 3   1.73281869 -0.81129159  0.29537673  0.77275445 0.9600642   BP-test #> 4   3.10596553  0.29999108  0.84205953 -0.48086134 3.5868269   BP-test #> 5   5.11049380 -0.62508593  1.16127804  3.71029125 1.4002026   BP-test #> 6  -0.78633599  0.08231268 -1.65749527 -3.85863178 3.0722958   BP-test #> 7   2.09684354 -0.56301690  0.44878272  0.54992710 1.5469164   BP-test #> 8  -0.04673993  0.12099851 -0.92735338 -3.21047823 3.1637383   BP-test #> 9   0.75000121 -0.60050785  0.08924734 -0.70829707 1.4582983   BP-test #> 10  5.25659961  0.76413263  0.70766839  0.57267142 4.6839282   BP-test #> 11  0.15535783  0.08709549  0.80160470 -2.92824317 3.0836010   BP-test #> 12  7.00884167  0.89379029  1.18987104  2.01843889 4.9904028   BP-test #> 13  1.02173563 -0.81129159  0.29537673  0.06167139 0.9600642   BP-test #> 14  1.40031003  0.29999108  0.84205953 -2.18651683 3.5868269   BP-test #> 15  3.47800380 -0.62508593  1.16127804  2.07780125 1.4002026   BP-test #> 16  7.39530879  0.08231268 -1.65749527  4.32301300 3.0722958   BP-test #> 17  2.58094865 -0.56301690  0.44878272  1.03403222 1.5469164   BP-test #> 18  3.85196121  0.12099851 -0.92735338  0.68822292 3.1637383   BP-test #> 19 -1.82977756 -0.60050785  0.08924734 -3.28807584 1.4582983   BP-test #> 20  2.88358437  0.76413263  0.70766839 -1.80034382 4.6839282   BP-test #> 21  1.08100820  0.08709549  0.80160470 -2.00259280 3.0836010   BP-test #> 22  1.09669908  0.89379029  1.18987104 -3.89370370 4.9904028   BP-test #> 23  1.69389640 -0.81129159  0.29537673  0.73383216 0.9600642   BP-test #> 24  4.15264644  0.29999108  0.84205953  0.56581958 3.5868269   BP-test #> 25  1.54508893 -0.62508593  1.16127804  0.14488638 1.4002026   BP-test #> 26  7.83715471  0.08231268 -1.65749527  4.76485892 3.0722958   BP-test #> 27 -1.06768226 -0.56301690  0.44878272 -2.61459869 1.5469164   BP-test #> 28  4.00483350  0.12099851 -0.92735338  0.84109520 3.1637383   BP-test #> 29  0.66045853 -0.60050785  0.08924734 -0.79783975 1.4582983   BP-test #> 30  6.94217089  0.76413263  0.70766839  2.25824270 4.6839282   BP-test #>    statistic   p_value k  null #> 1  0.4869898 0.7838835 3 FALSE #> 2  0.4869898 0.7838835 3 FALSE #> 3  0.4869898 0.7838835 3 FALSE #> 4  0.4869898 0.7838835 3 FALSE #> 5  0.4869898 0.7838835 3 FALSE #> 6  0.4869898 0.7838835 3 FALSE #> 7  0.4869898 0.7838835 3 FALSE #> 8  0.4869898 0.7838835 3 FALSE #> 9  0.4869898 0.7838835 3 FALSE #> 10 0.4869898 0.7838835 3 FALSE #> 11 1.9169347 0.3834802 1  TRUE #> 12 1.9169347 0.3834802 1  TRUE #> 13 1.9169347 0.3834802 1  TRUE #> 14 1.9169347 0.3834802 1  TRUE #> 15 1.9169347 0.3834802 1  TRUE #> 16 1.9169347 0.3834802 1  TRUE #> 17 1.9169347 0.3834802 1  TRUE #> 18 1.9169347 0.3834802 1  TRUE #> 19 1.9169347 0.3834802 1  TRUE #> 20 1.9169347 0.3834802 1  TRUE #> 21 1.7639737 0.4139596 2  TRUE #> 22 1.7639737 0.4139596 2  TRUE #> 23 1.7639737 0.4139596 2  TRUE #> 24 1.7639737 0.4139596 2  TRUE #> 25 1.7639737 0.4139596 2  TRUE #> 26 1.7639737 0.4139596 2  TRUE #> 27 1.7639737 0.4139596 2  TRUE #> 28 1.7639737 0.4139596 2  TRUE #> 29 1.7639737 0.4139596 2  TRUE #> 30 1.7639737 0.4139596 2  TRUE  # Plot the lineup test$plot_lineup(test$gen_lineup(100))"},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-alt_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the alternative model — HETER_MODEL$alt_formula","title":"Formula for fitting the alternative model — HETER_MODEL$alt_formula","text":"Quoted formula fitting alternative model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-alt_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the alternative model — HETER_MODEL$alt_formula","text":"","code":"HETER_MODEL$alt_formula #> NULL"},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-effect_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the effect size of the simulated data — HETER_MODEL$effect_size","title":"Compute the effect size of the simulated data — HETER_MODEL$effect_size","text":"function computes effect size simulated data.","code":""},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-effect_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the effect size of the simulated data — HETER_MODEL$effect_size","text":"dat Dataframe. number rows data frame used. b Numeric. Default b = self$prm$b.","code":""},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-effect_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the effect size of the simulated data — HETER_MODEL$effect_size","text":"single numeric value.","code":""},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-effect_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the effect size of the simulated data — HETER_MODEL$effect_size","text":"","code":"mod <- heter_model(a = 0, b = 16) mod$effect_size(mod$gen(100)) #> [1] 160"},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Closed form expression of y — HETER_MODEL$formula","title":"Closed form expression of y — HETER_MODEL$formula","text":"quoted formula, passed CLOSED_FORM$instantiate define closed form expression y.","code":""},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Closed form expression of y — HETER_MODEL$formula","text":"","code":"HETER_MODEL$formula #> y ~ 1 + x + sqrt(1 + (2 - abs(a)) * (x - a)^2 * b) * e"},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-null_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the null model — HETER_MODEL$null_formula","title":"Formula for fitting the null model — HETER_MODEL$null_formula","text":"Quoted formula fitting null model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-null_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the null model — HETER_MODEL$null_formula","text":"","code":"HETER_MODEL$null_formula #> y ~ x"},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-test.html","id":null,"dir":"Reference","previous_headings":"","what":"Test the null model — HETER_MODEL$test","title":"Test the null model — HETER_MODEL$test","text":"function test null model. class, test BP-test computed using lmtest::bptest. variance formula ~ x + (x^2).","code":""},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test the null model — HETER_MODEL$test","text":"dat Data frame. data frame containing variables needed null_formula. null_formula Formula. Formula fitting null model. Default null_formula = self$null_formula.","code":""},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test the null model — HETER_MODEL$test","text":"list containing test name, test statistic p-value.","code":""},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL-cash-test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test the null model — HETER_MODEL$test","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- heter_model(a = 0, b = 100)   dat <- test$gen(100000) test$test(dat) #> $name #> [1] \"BP-test\" #>  #> $statistic #> [1] 17862.38 #>  #> $p_value #> [1] 0 #>"},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL.html","id":null,"dir":"Reference","previous_headings":"","what":"HETER_MODEL class environment — HETER_MODEL","title":"HETER_MODEL class environment — HETER_MODEL","text":"class visual inference heteroskedasticity linear model, inherited VI_MODEL.","code":""},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HETER_MODEL class environment — HETER_MODEL","text":"","code":"HETER_MODEL"},{"path":"https://tengmcing.github.io/visage/reference/HETER_MODEL.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"HETER_MODEL class environment — HETER_MODEL","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — POLY_MODEL$..init..","title":"Initialization method — POLY_MODEL$..init..","text":"function called instance built. User input stored environment. response variable model y. formula y defined POLY_MODEL$formula, null formula defined POLY_MODEL$null_formula, alternative defined POLY_MODEL$alt_formula. formula raw orthogonal polynomial term defined POLY_MODEL$raw_z_formula, scaled orthogonal polynomial term defined POLY_MODEL$z_formula.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — POLY_MODEL$..init..","text":"shape Integer. shape orthogonal polynomial used model. Note value 1 4. Default shape = 1. sigma Positive numeric. Default sigma = 1. include_z Boolean. Whether include z formula y. Default include_z = TRUE. x Random variable closed form expression. Default x = rand_uniform(-1, 1, env = new.env(parent = parent.env(self))). e Random variable closed form expression. Default e = rand_normal(0, sigma, env = new.env(parent = parent.env(self))).","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — POLY_MODEL$..init..","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — POLY_MODEL$..init..","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal(sigma = 0.5)  test <- poly_model(shape = 1, x = x, e = e)  test #>  #> ── <POLY_MODEL object> #> y = 1 + x + include_z * z + e #>  - x: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - z: <CLOSED_FORM object> #>    EXPR = (raw_z - min(raw_z))/max(raw_z - min(raw_z)) * 2 - 1 #>     - raw_z: <CLOSED_FORM object> #>       EXPR = hermite(shape)((x - min(x))/max(x - min(x)) * 4 - 2) #>        - x: <RAND_UNIFORM object> #>          [a: 0, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #>  - shape: 1 #>  - include_z: TRUE #>  - sigma: 1   # Generate data test$gen(10) #>             y           x      raw_z          z            e     .resid #> 1  -0.2905213 0.286986285 -0.2650253 -0.7852703 -0.792237331 -1.4610734 #> 2   1.2104270 0.084643995  1.7900818  0.3384336 -0.212650585  0.4840364 #> 3   1.0369748 0.308658211 -0.4067534 -0.8627653  0.591081810 -0.1811493 #> 4   1.4530158 0.081057360  1.8384349  0.3648724  0.007086098  0.7344982 #> 5   2.1318383 0.002605247  3.0000000  1.0000000  0.129233035  1.5855308 #> 6   1.1512338 0.646167062 -0.6566682 -0.9994152  0.504481941 -0.8077557 #> 7   0.5197815 0.167335842  0.7904670 -0.2081419 -0.439412499 -0.3881260 #> 8   3.2778168 0.962053255  2.4418853  0.6948307  0.620932841  0.6254256 #> 9  -0.1512245 0.354747070 -0.6577377 -1.0000000 -0.505971617 -1.4705183 #> 10  3.6106085 0.998081562  3.0000000  1.0000000  0.612526977  0.8791317 #>      .fitted #> 1  1.1705521 #> 2  0.7263906 #> 3  1.2181241 #> 4  0.7185176 #> 5  0.5463074 #> 6  1.9589896 #> 7  0.9079075 #> 8  2.6523911 #> 9  1.3192937 #> 10 2.7314769  # Generate lineup test$gen_lineup(10, k = 3) #>             y         x      raw_z           z            e      .resid #> 1  1.91621465 0.8946192  1.3811317  0.16885867 -0.147263246  0.49181925 #> 2  1.35013692 0.5425423  1.1361862  0.04310145 -0.235506846  0.20776436 #> 3  0.83074305 0.7635130 -0.8200395 -0.96124217  0.028472186 -0.48863285 #> 4  0.42772347 0.7516781 -0.8955306 -1.00000000 -0.323954659 -0.88217236 #> 5  2.02924720 0.4794507  3.0000000  1.00000000 -0.450203533  0.93741266 #> 6  1.62426425 0.8702874  0.7834034 -0.13802039 -0.108002763  0.21935928 #> 7  0.09227942 0.6443742 -0.6489135 -0.87338457 -0.678710234 -1.13166317 #> 8  2.22287834 0.9481583  3.0000000  1.00000000 -0.725280000  0.75559670 #> 9  1.55733866 0.5099521  2.0265481  0.50022118 -0.452834666  0.44107169 #> 10 0.69411394 0.6702497 -0.8618378 -0.98270182  0.006566085 -0.55055556 #> 11 2.31030710 0.8946192  1.3811317  0.16885867 -0.147263246  0.88591169 #> 12 1.66716918 0.5425423  1.1361862  0.04310145 -0.235506846  0.52479663 #> 13 0.97391362 0.7635130 -0.8200395 -0.96124217  0.028472186 -0.34546228 #> 14 2.27268428 0.7516781 -0.8955306 -1.00000000 -0.323954659  0.96278845 #> 15 0.30451138 0.4794507  3.0000000  1.00000000 -0.450203533 -0.78732316 #> 16 1.54496144 0.8702874  0.7834034 -0.13802039 -0.108002763  0.14005646 #> 17 1.50948548 0.6443742 -0.6489135 -0.87338457 -0.678710234  0.28554289 #> 18 0.19754113 0.9481583  3.0000000  1.00000000 -0.725280000 -1.26974051 #> 19 1.09073436 0.5099521  2.0265481  0.50022118 -0.452834666 -0.02553261 #> 20 0.87363194 0.6702497 -0.8618378 -0.98270182  0.006566085 -0.37103756 #> 21 2.68955172 0.8946192  1.3811317  0.16885867 -0.147263246  1.26515631 #> 22 1.11025986 0.5425423  1.1361862  0.04310145 -0.235506846 -0.03211269 #> 23 0.18962744 0.7635130 -0.8200395 -0.96124217  0.028472186 -1.12974846 #> 24 1.00209072 0.7516781 -0.8955306 -1.00000000 -0.323954659 -0.30780511 #> 25 1.28412141 0.4794507  3.0000000  1.00000000 -0.450203533  0.19228687 #> 26 1.27873090 0.8702874  0.7834034 -0.13802039 -0.108002763 -0.12617408 #> 27 2.33004014 0.6443742 -0.6489135 -0.87338457 -0.678710234  1.10609755 #> 28 1.10114470 0.9481583  3.0000000  1.00000000 -0.725280000 -0.36613693 #> 29 0.89938436 0.5099521  2.0265481  0.50022118 -0.452834666 -0.21688261 #> 30 0.85998866 0.6702497 -0.8618378 -0.98270182  0.006566085 -0.38468085 #>     .fitted test_name  statistic      p_value k  null #> 1  1.424395    F-test 58.8812388 0.0001188247 1 FALSE #> 2  1.142373    F-test 58.8812388 0.0001188247 1 FALSE #> 3  1.319376    F-test 58.8812388 0.0001188247 1 FALSE #> 4  1.309896    F-test 58.8812388 0.0001188247 1 FALSE #> 5  1.091835    F-test 58.8812388 0.0001188247 1 FALSE #> 6  1.404905    F-test 58.8812388 0.0001188247 1 FALSE #> 7  1.223943    F-test 58.8812388 0.0001188247 1 FALSE #> 8  1.467282    F-test 58.8812388 0.0001188247 1 FALSE #> 9  1.116267    F-test 58.8812388 0.0001188247 1 FALSE #> 10 1.244670    F-test 58.8812388 0.0001188247 1 FALSE #> 11 1.424395    F-test  2.0228857 0.1979381262 2  TRUE #> 12 1.142373    F-test  2.0228857 0.1979381262 2  TRUE #> 13 1.319376    F-test  2.0228857 0.1979381262 2  TRUE #> 14 1.309896    F-test  2.0228857 0.1979381262 2  TRUE #> 15 1.091835    F-test  2.0228857 0.1979381262 2  TRUE #> 16 1.404905    F-test  2.0228857 0.1979381262 2  TRUE #> 17 1.223943    F-test  2.0228857 0.1979381262 2  TRUE #> 18 1.467282    F-test  2.0228857 0.1979381262 2  TRUE #> 19 1.116267    F-test  2.0228857 0.1979381262 2  TRUE #> 20 1.244670    F-test  2.0228857 0.1979381262 2  TRUE #> 21 1.424395    F-test  0.1537248 0.7066644048 3  TRUE #> 22 1.142373    F-test  0.1537248 0.7066644048 3  TRUE #> 23 1.319376    F-test  0.1537248 0.7066644048 3  TRUE #> 24 1.309896    F-test  0.1537248 0.7066644048 3  TRUE #> 25 1.091835    F-test  0.1537248 0.7066644048 3  TRUE #> 26 1.404905    F-test  0.1537248 0.7066644048 3  TRUE #> 27 1.223943    F-test  0.1537248 0.7066644048 3  TRUE #> 28 1.467282    F-test  0.1537248 0.7066644048 3  TRUE #> 29 1.116267    F-test  0.1537248 0.7066644048 3  TRUE #> 30 1.244670    F-test  0.1537248 0.7066644048 3  TRUE  # Plot the lineup test$plot_lineup(test$gen_lineup(100))   test <- poly_model(shape = 1, include_z = FALSE, x = x, e = e) test$plot_lineup(test$gen_lineup(100))   test <- poly_model(shape = 2, x = x, e = e) test$plot_lineup(test$gen_lineup(100))   test <- poly_model(shape = 3, x = x, e = e) test$plot_lineup(test$gen_lineup(100))   test <- poly_model(shape = 4, x = x, e = e) test$plot_lineup(test$gen_lineup(100))"},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-E.html","id":null,"dir":"Reference","previous_headings":"","what":"Expectation of the residuals — POLY_MODEL$E","title":"Expectation of the residuals — POLY_MODEL$E","text":"function calculate expectation residuals use Frisch–Waugh–Lovell theorem.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-E.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expectation of the residuals — POLY_MODEL$E","text":"dat Dataframe/List. List contains variable x z.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-E.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expectation of the residuals — POLY_MODEL$E","text":"vector numeric expectations.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-E.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expectation of the residuals — POLY_MODEL$E","text":"","code":"mod <- poly_model(4, 0.5) dat <- mod$gen(1000, fit_model = TRUE) dat$exp <- mod$E(dat) mod$plot(dat) + ggplot2::geom_point(ggplot2::aes(.fitted, exp),                                     col = \"red\",                                     alpha = 0.6)"},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-alt_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the alternative model — POLY_MODEL$alt_formula","title":"Formula for fitting the alternative model — POLY_MODEL$alt_formula","text":"Quoted formula fitting alternative model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-alt_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the alternative model — POLY_MODEL$alt_formula","text":"","code":"POLY_MODEL$alt_formula #> y ~ x + z"},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-effect_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the effect size of the simulated data — POLY_MODEL$effect_size","title":"Compute the effect size of the simulated data — POLY_MODEL$effect_size","text":"function computes effect size simulated data.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-effect_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the effect size of the simulated data — POLY_MODEL$effect_size","text":"dat Dataframe/List. List contains variable x z. sigma Positive numeric. Default sigma = self$prm$sigma. type Character. Type effect size measure. Default type = kl.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-effect_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the effect size of the simulated data — POLY_MODEL$effect_size","text":"numeric value.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-effect_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the effect size of the simulated data — POLY_MODEL$effect_size","text":"","code":"mod <- poly_model(4, 0.5) dat <- mod$gen(1000, fit_model = TRUE) mod$effect_size(dat) #> [1] 651.8393"},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Closed form expression of y — POLY_MODEL$formula","title":"Closed form expression of y — POLY_MODEL$formula","text":"quoted formula, passed CLOSED_FORM$instantiate define closed form expression y.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Closed form expression of y — POLY_MODEL$formula","text":"","code":"POLY_MODEL$formula #> y ~ 1 + x + include_z * z + e"},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-hermite.html","id":null,"dir":"Reference","previous_headings":"","what":"Hermite polynomial functions — POLY_MODEL$hermite","title":"Hermite polynomial functions — POLY_MODEL$hermite","text":"function returns Hermite polynomial function defined using mpoly::hermite.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-hermite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hermite polynomial functions — POLY_MODEL$hermite","text":"shape Integer. value 1 4.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-hermite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hermite polynomial functions — POLY_MODEL$hermite","text":"function.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-hermite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hermite polynomial functions — POLY_MODEL$hermite","text":"","code":"POLY_MODEL$hermite(1) #> function (.)  #> { #>     if (length(.) > 1) { #>         .[] <- sapply(., f) #>         return(.) #>     } #>     -1 + .^2 #> } #> <environment: 0x7f948115e400> POLY_MODEL$hermite(2) #> function (.)  #> { #>     if (length(.) > 1) { #>         .[] <- sapply(., f) #>         return(.) #>     } #>     -3 * . + .^3 #> } #> <environment: 0x7f9480e297c0> POLY_MODEL$hermite(3) #> function (.)  #> { #>     if (length(.) > 1) { #>         .[] <- sapply(., f) #>         return(.) #>     } #>     -15 + 45 * .^2 - 15 * .^4 + .^6 #> } #> <environment: 0x7f9480bfe758> POLY_MODEL$hermite(4) #> function (.)  #> { #>     if (length(.) > 1) { #>         .[] <- sapply(., f) #>         return(.) #>     } #>     -34459425 + 310134825 * .^2 - 413513100 * .^4 + 192972780 *  #>         .^6 - 41351310 * .^8 + 4594590 * .^10 - 278460 * .^12 +  #>         9180 * .^14 - 153 * .^16 + .^18 #> } #> <environment: 0x7f94a2c17270>"},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-null_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the null model — POLY_MODEL$null_formula","title":"Formula for fitting the null model — POLY_MODEL$null_formula","text":"Quoted formula fitting null model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-null_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the null model — POLY_MODEL$null_formula","text":"","code":"POLY_MODEL$null_formula #> y ~ x"},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-raw_z_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for the raw orthogonal polynomial term raw_z — POLY_MODEL$raw_z_formula","title":"Formula for the raw orthogonal polynomial term raw_z — POLY_MODEL$raw_z_formula","text":"Quoted formula raw orthogonal polynomial term raw_z.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-raw_z_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for the raw orthogonal polynomial term raw_z — POLY_MODEL$raw_z_formula","text":"","code":"POLY_MODEL$raw_z_formula #> raw_z ~ hermite(shape)((x - min(x))/max(x - min(x)) * 4 - 2)"},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-set_prm.html","id":null,"dir":"Reference","previous_headings":"","what":"Set parameter for the model — POLY_MODEL$set_prm","title":"Set parameter for the model — POLY_MODEL$set_prm","text":"function store values environment update values closed form expression y, except parameter sigma, shape raw_z. parameter sigma, value updated, corresponding value e updated. parameter shape, value updated, corresponding value raw_z updated. parameter raw_z, value updated, corresponding value z updated.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-set_prm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set parameter for the model — POLY_MODEL$set_prm","text":"prm_name List Vector. Parameter character names. prm_val List Vector. Parameter values.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-set_prm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set parameter for the model — POLY_MODEL$set_prm","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-set_prm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set parameter for the model — POLY_MODEL$set_prm","text":"","code":"# Instantiate mod <- poly_model(shape = 2, sigma = 0.5)  mod #>  #> ── <POLY_MODEL object> #> y = 1 + x + include_z * z + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - z: <CLOSED_FORM object> #>    EXPR = (raw_z - min(raw_z))/max(raw_z - min(raw_z)) * 2 - 1 #>     - raw_z: <CLOSED_FORM object> #>       EXPR = hermite(shape)((x - min(x))/max(x - min(x)) * 4 - 2) #>        - x: <RAND_UNIFORM object> #>          [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #>  - shape: 2 #>  - include_z: TRUE #>  - sigma: 0.5   mod$set_prm(\"shape\", 4) #>  #> ── <POLY_MODEL object> #> y = 1 + x + include_z * z + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - z: <CLOSED_FORM object> #>    EXPR = (raw_z - min(raw_z))/max(raw_z - min(raw_z)) * 2 - 1 #>     - raw_z: <CLOSED_FORM object> #>       EXPR = hermite(shape)((x - min(x))/max(x - min(x)) * 4 - 2) #>        - x: <RAND_UNIFORM object> #>          [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #>  - shape: 4 #>  - include_z: TRUE #>  - sigma: 0.5   mod #>  #> ── <POLY_MODEL object> #> y = 1 + x + include_z * z + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - z: <CLOSED_FORM object> #>    EXPR = (raw_z - min(raw_z))/max(raw_z - min(raw_z)) * 2 - 1 #>     - raw_z: <CLOSED_FORM object> #>       EXPR = hermite(shape)((x - min(x))/max(x - min(x)) * 4 - 2) #>        - x: <RAND_UNIFORM object> #>          [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #>  - shape: 4 #>  - include_z: TRUE #>  - sigma: 0.5   mod$set_prm(\"sigma\", 1) #>  #> ── <POLY_MODEL object> #> y = 1 + x + include_z * z + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - z: <CLOSED_FORM object> #>    EXPR = (raw_z - min(raw_z))/max(raw_z - min(raw_z)) * 2 - 1 #>     - raw_z: <CLOSED_FORM object> #>       EXPR = hermite(shape)((x - min(x))/max(x - min(x)) * 4 - 2) #>        - x: <RAND_UNIFORM object> #>          [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #>  - shape: 4 #>  - include_z: TRUE #>  - sigma: 1   mod #>  #> ── <POLY_MODEL object> #> y = 1 + x + include_z * z + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - z: <CLOSED_FORM object> #>    EXPR = (raw_z - min(raw_z))/max(raw_z - min(raw_z)) * 2 - 1 #>     - raw_z: <CLOSED_FORM object> #>       EXPR = hermite(shape)((x - min(x))/max(x - min(x)) * 4 - 2) #>        - x: <RAND_UNIFORM object> #>          [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #>  - shape: 4 #>  - include_z: TRUE #>  - sigma: 1"},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-z_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for the scaled orthogonal polynomial term z — POLY_MODEL$z_formula","title":"Formula for the scaled orthogonal polynomial term z — POLY_MODEL$z_formula","text":"Quoted formula scaled orthogonal polynomial term z.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL-cash-z_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for the scaled orthogonal polynomial term z — POLY_MODEL$z_formula","text":"","code":"POLY_MODEL$z_formula #> z ~ (raw_z - min(raw_z))/max(raw_z - min(raw_z)) * 2 - 1"},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL.html","id":null,"dir":"Reference","previous_headings":"","what":"POLY_MODEL class environment — POLY_MODEL","title":"POLY_MODEL class environment — POLY_MODEL","text":"class visual inference orthogonal polynomial linear model, inherited VI_MODEL.","code":""},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"POLY_MODEL class environment — POLY_MODEL","text":"","code":"POLY_MODEL"},{"path":"https://tengmcing.github.io/visage/reference/POLY_MODEL.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"POLY_MODEL class environment — POLY_MODEL","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — QUARTIC_MODEL$..init..","title":"Initialization method — QUARTIC_MODEL$..init..","text":"function called instance built. User input stored environment. response variable model y. formula y defined QUARTIC_MODEL$formula, null formula defined QUARTIC_MODEL$null_formula, alternative defined QUARTIC_MODEL$alt_formula.","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — QUARTIC_MODEL$..init..","text":"Numeric. Default = 1. b Numeric. Default b = 1. c Numeric. Default c = 1. sigma Positive numeric. Default sigma = 1. x Random variable closed form expression. Default x = rand_uniform(-1, 1, env = new.env(parent = parent.env(self))). e Random variable closed form expression. Default e = rand_normal(0, sigma, env = new.env(parent = parent.env(self))).","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — QUARTIC_MODEL$..init..","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — QUARTIC_MODEL$..init..","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal()  test <- quartic_model(a = 200, b = 200, c = 20, x = x, e = e)  test #>  #> ── <QUARTIC_MODEL object> #> y = 1 + x + a * x^2 + b * x^3 + c * x^4 + e #>  - x: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #>  - a: 200 #>  - b: 200 #>  - c: 20 #>  - sigma: 1   # Generate data test$gen(10) #>              y          x           e     .resid     .fitted #> 1   58.0761705 0.44130801 -0.26345351 -30.974566  89.0507367 #> 2   10.4387831 0.19568782  0.05629908  10.392063   0.0467199 #> 3   17.6124584 0.25530946 -0.09277435  -4.039020  21.6514786 #> 4  199.3742369 0.74090950  0.47310500   1.758582 197.6156549 #> 5    7.5837595 0.18615177 -1.84702871  10.992566  -3.4088063 #> 6   95.7734097 0.54799300 -0.54946535 -31.936172 127.7095817 #> 7   80.6999050 0.50417366  1.43396416 -31.131105 111.8310104 #> 8  311.1931377 0.88627076  0.64339291  60.903734 250.2894034 #> 9   -0.2521511 0.07042749 -2.38494147  45.091017 -45.3431678 #> 10  68.8810949 0.47135361  1.04314301 -31.057098  99.9381930  # Generate lineup test$gen_lineup(10, k = 3) #>              y         x          e      .resid    .fitted test_name #> 1  107.2486793 0.5755336 -0.8968531 -26.6701855 133.918865    F-test #> 2  120.8666144 0.6015254  0.7497478 -23.2447670 144.111381    F-test #> 3   18.0669988 0.2586672 -0.1243637   8.4053360   9.661663    F-test #> 4  288.0627839 0.8583910  1.4803674  43.2231670 244.839617    F-test #> 5  226.3018173 0.7810619 -0.2327259  11.7863236 214.515494    F-test #> 6   20.6797487 0.2758672 -0.1313450   4.2731978  16.406551    F-test #> 7   90.7900557 0.5331659  0.4754161 -26.5145580 117.304614    F-test #> 8  140.0160236 0.6427410 -0.7685272 -20.2578013 160.273825    F-test #> 9   19.4382328 0.2591673  1.1737601   9.5804418   9.857791    F-test #> 10  15.3866348 0.2237466  1.8599852  19.4188457  -4.032211    F-test #> 11  96.3909215 0.5755336 -0.8968531 -37.5279433 133.918865    F-test #> 12 119.6663257 0.6015254  0.7497478 -24.4450557 144.111381    F-test #> 13  20.5171092 0.2586672 -0.1243637  10.8554464   9.661663    F-test #> 14 251.6359489 0.8583910  1.4803674   6.7963320 244.839617    F-test #> 15 233.9043313 0.7810619 -0.2327259  19.3888375 214.515494    F-test #> 16   2.6863774 0.2758672 -0.1313450 -13.7201735  16.406551    F-test #> 17 161.3186505 0.5331659  0.4754161  44.0140369 117.304614    F-test #> 18 145.6099736 0.6427410 -0.7685272 -14.6638514 160.273825    F-test #> 19  14.9120076 0.2591673  1.1737601   5.0542165   9.857791    F-test #> 20   0.2159437 0.2237466  1.8599852   4.2481546  -4.032211    F-test #> 21 153.2054225 0.5755336 -0.8968531  19.2865577 133.918865    F-test #> 22 122.1183084 0.6015254  0.7497478 -21.9930729 144.111381    F-test #> 23 -34.2928476 0.2586672 -0.1243637 -43.9545104   9.661663    F-test #> 24 233.4439782 0.8583910  1.4803674 -11.3956387 244.839617    F-test #> 25 238.4955013 0.7810619 -0.2327259  23.9800075 214.515494    F-test #> 26  20.9869566 0.2758672 -0.1313450   4.5804057  16.406551    F-test #> 27 115.7720648 0.5331659  0.4754161  -1.5325489 117.304614    F-test #> 28 153.4227258 0.6427410 -0.7685272  -6.8510992 160.273825    F-test #> 29  10.7743179 0.2591673  1.1737601   0.9165268   9.857791    F-test #> 30  32.9311616 0.2237466  1.8599852  36.9633725  -4.032211    F-test #>       statistic      p_value k  null #> 1  2861.2829020 1.665434e-08 3 FALSE #> 2  2861.2829020 1.665434e-08 3 FALSE #> 3  2861.2829020 1.665434e-08 3 FALSE #> 4  2861.2829020 1.665434e-08 3 FALSE #> 5  2861.2829020 1.665434e-08 3 FALSE #> 6  2861.2829020 1.665434e-08 3 FALSE #> 7  2861.2829020 1.665434e-08 3 FALSE #> 8  2861.2829020 1.665434e-08 3 FALSE #> 9  2861.2829020 1.665434e-08 3 FALSE #> 10 2861.2829020 1.665434e-08 3 FALSE #> 11    0.1772961 9.073797e-01 1  TRUE #> 12    0.1772961 9.073797e-01 1  TRUE #> 13    0.1772961 9.073797e-01 1  TRUE #> 14    0.1772961 9.073797e-01 1  TRUE #> 15    0.1772961 9.073797e-01 1  TRUE #> 16    0.1772961 9.073797e-01 1  TRUE #> 17    0.1772961 9.073797e-01 1  TRUE #> 18    0.1772961 9.073797e-01 1  TRUE #> 19    0.1772961 9.073797e-01 1  TRUE #> 20    0.1772961 9.073797e-01 1  TRUE #> 21    0.4757699 7.127967e-01 2  TRUE #> 22    0.4757699 7.127967e-01 2  TRUE #> 23    0.4757699 7.127967e-01 2  TRUE #> 24    0.4757699 7.127967e-01 2  TRUE #> 25    0.4757699 7.127967e-01 2  TRUE #> 26    0.4757699 7.127967e-01 2  TRUE #> 27    0.4757699 7.127967e-01 2  TRUE #> 28    0.4757699 7.127967e-01 2  TRUE #> 29    0.4757699 7.127967e-01 2  TRUE #> 30    0.4757699 7.127967e-01 2  TRUE  # Plot the lineup test$plot_lineup(test$gen_lineup(100))"},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-E.html","id":null,"dir":"Reference","previous_headings":"","what":"Expectation of the residuals — QUARTIC_MODEL$E","title":"Expectation of the residuals — QUARTIC_MODEL$E","text":"function calculate expectation residuals use Frisch–Waugh–Lovell theorem.","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-E.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expectation of the residuals — QUARTIC_MODEL$E","text":"dat Dataframe/List. List contains variable x z. Numeric. Default = self$prm$. b Numeric. Default b = self$prm$b. c Numeric. Default c = self$prm$c.","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-E.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expectation of the residuals — QUARTIC_MODEL$E","text":"vector numeric expectations.","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-E.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expectation of the residuals — QUARTIC_MODEL$E","text":"","code":"mod <- quartic_model(-1, 1, 1, 0.5) dat <- mod$gen(1000, fit_model = TRUE) dat$exp <- mod$E(dat) mod$plot(dat) + ggplot2::geom_point(ggplot2::aes(.fitted, exp),                                     col = \"red\",                                     alpha = 0.6)"},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-alt_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the alternative model — QUARTIC_MODEL$alt_formula","title":"Formula for fitting the alternative model — QUARTIC_MODEL$alt_formula","text":"Quoted formula fitting alternative model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-alt_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the alternative model — QUARTIC_MODEL$alt_formula","text":"","code":"QUARTIC_MODEL$alt_formula #> y ~ x + I(x^2) + I(x^3) + I(x^4)"},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-effect_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the effect size of the simulated data — QUARTIC_MODEL$effect_size","title":"Compute the effect size of the simulated data — QUARTIC_MODEL$effect_size","text":"function computes effect size simulated data.","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-effect_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the effect size of the simulated data — QUARTIC_MODEL$effect_size","text":"dat Dataframe/List. List contains variable x. Numeric. Default = self$prm$. b Numeric. Default b = self$prm$b. c Numeric. Default c = self$prm$c. sigma Positive numeric. Default sigma = self$prm$sigma.","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-effect_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the effect size of the simulated data — QUARTIC_MODEL$effect_size","text":"numeric value.","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-effect_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the effect size of the simulated data — QUARTIC_MODEL$effect_size","text":"","code":"mod <- quartic_model(-1, 1, 1, 0.5) dat <- mod$gen(1000, fit_model = TRUE) mod$effect_size(dat) #> [1] 0.6896268"},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Closed form expression of y — QUARTIC_MODEL$formula","title":"Closed form expression of y — QUARTIC_MODEL$formula","text":"quoted formula, passed CLOSED_FORM$instantiate define closed form expression y.","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Closed form expression of y — QUARTIC_MODEL$formula","text":"","code":"QUARTIC_MODEL$formula #> y ~ 1 + x + a * x^2 + b * x^3 + c * x^4 + e"},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-null_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the null model — QUARTIC_MODEL$null_formula","title":"Formula for fitting the null model — QUARTIC_MODEL$null_formula","text":"Quoted formula fitting null model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-null_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the null model — QUARTIC_MODEL$null_formula","text":"","code":"QUARTIC_MODEL$null_formula #> y ~ x"},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-set_prm.html","id":null,"dir":"Reference","previous_headings":"","what":"Set parameter for the model — QUARTIC_MODEL$set_prm","title":"Set parameter for the model — QUARTIC_MODEL$set_prm","text":"function store values environment update values closed form expression y, except parameter sigma. parameter sigma, value updated, corresponding value e updated.","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-set_prm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set parameter for the model — QUARTIC_MODEL$set_prm","text":"prm_name List Vector. Parameter character names. prm_val List Vector. Parameter values.","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-set_prm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set parameter for the model — QUARTIC_MODEL$set_prm","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL-cash-set_prm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set parameter for the model — QUARTIC_MODEL$set_prm","text":"","code":"# Instantiate mod <- quartic_model(a = -1, b = 1, c = 1, sigma = 0.5)  mod #>  #> ── <QUARTIC_MODEL object> #> y = 1 + x + a * x^2 + b * x^3 + c * x^4 + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #>  - a: -1 #>  - b: 1 #>  - c: 1 #>  - sigma: 0.5   mod$set_prm(\"a\", 2) #>  #> ── <QUARTIC_MODEL object> #> y = 1 + x + a * x^2 + b * x^3 + c * x^4 + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #>  - a: 2 #>  - b: 1 #>  - c: 1 #>  - sigma: 0.5   mod #>  #> ── <QUARTIC_MODEL object> #> y = 1 + x + a * x^2 + b * x^3 + c * x^4 + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #>  - a: 2 #>  - b: 1 #>  - c: 1 #>  - sigma: 0.5   mod$set_prm(\"sigma\", 1) #>  #> ── <QUARTIC_MODEL object> #> y = 1 + x + a * x^2 + b * x^3 + c * x^4 + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #>  - a: 2 #>  - b: 1 #>  - c: 1 #>  - sigma: 1   mod #>  #> ── <QUARTIC_MODEL object> #> y = 1 + x + a * x^2 + b * x^3 + c * x^4 + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #>  - a: 2 #>  - b: 1 #>  - c: 1 #>  - sigma: 1"},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL.html","id":null,"dir":"Reference","previous_headings":"","what":"QUARTIC_MODEL class environment — QUARTIC_MODEL","title":"QUARTIC_MODEL class environment — QUARTIC_MODEL","text":"class visual inference quartic linear model, inherited VI_MODEL.","code":""},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"QUARTIC_MODEL class environment — QUARTIC_MODEL","text":"","code":"QUARTIC_MODEL"},{"path":"https://tengmcing.github.io/visage/reference/QUARTIC_MODEL.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"QUARTIC_MODEL class environment — QUARTIC_MODEL","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/RAND_LOGNORMAL-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — RAND_LOGNORMAL$..init..","title":"Initialization method — RAND_LOGNORMAL$..init..","text":"function called instance built. User input stored environment.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_LOGNORMAL-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — RAND_LOGNORMAL$..init..","text":"mu Numeric. Mean log random variable. Default 0. sigma Numeric. Standard deviation log random variable. Default 1.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_LOGNORMAL-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — RAND_LOGNORMAL$..init..","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_LOGNORMAL-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — RAND_LOGNORMAL$..init..","text":"","code":"# Instantiate test <- rand_lognormal(mu = 1, sigma = 2) test #>  #> ── <RAND_LOGNORMAL object> #> [mu: 1, sigma: 2]"},{"path":"https://tengmcing.github.io/visage/reference/RAND_LOGNORMAL-cash-gen.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random values — RAND_LOGNORMAL$gen","title":"Generate random values — RAND_LOGNORMAL$gen","text":"function generates random values random variable.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_LOGNORMAL-cash-gen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random values — RAND_LOGNORMAL$gen","text":"n Integer. Number observations. mu Numeric. provided length n, values used realization. sigma Numeric. provided length n, values used realization.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_LOGNORMAL-cash-gen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random values — RAND_LOGNORMAL$gen","text":"vector numeric values.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/RAND_LOGNORMAL-cash-gen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random values — RAND_LOGNORMAL$gen","text":"","code":"test <- rand_lognormal(mu = 1, sigma = 2) test$gen(10) #>  [1] 47.41358284  0.01329952  9.87356158  9.82143595  1.48831096  0.17602223 #>  [7]  4.90513639  1.75628065  0.69939770  3.19595382  test$gen(3, mu = c(0,1,2), sigma = c(1,2,3)) #> [1]  0.8563946 34.9172875 29.5742608"},{"path":"https://tengmcing.github.io/visage/reference/RAND_LOGNORMAL.html","id":null,"dir":"Reference","previous_headings":"","what":"RAND_LOGNORMAL class environment — RAND_LOGNORMAL","title":"RAND_LOGNORMAL class environment — RAND_LOGNORMAL","text":"class log-normal random variable, inherited RAND_VAR.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_LOGNORMAL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RAND_LOGNORMAL class environment — RAND_LOGNORMAL","text":"","code":"RAND_LOGNORMAL"},{"path":"https://tengmcing.github.io/visage/reference/RAND_LOGNORMAL.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"RAND_LOGNORMAL class environment — RAND_LOGNORMAL","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/RAND_NORMAL-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — RAND_NORMAL$..init..","title":"Initialization method — RAND_NORMAL$..init..","text":"function called instance built. User input stored environment.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_NORMAL-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — RAND_NORMAL$..init..","text":"mu Numeric. Mean. Default 0. sigma Numeric. Standard deviation. Default 1.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_NORMAL-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — RAND_NORMAL$..init..","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_NORMAL-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — RAND_NORMAL$..init..","text":"","code":"# Instantiate test <- rand_normal(mu = 1, sigma = 2) test #>  #> ── <RAND_NORMAL object> #> [mu: 1, sigma: 2]"},{"path":"https://tengmcing.github.io/visage/reference/RAND_NORMAL-cash-gen.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random values — RAND_NORMAL$gen","title":"Generate random values — RAND_NORMAL$gen","text":"function generates random values random variable.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_NORMAL-cash-gen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random values — RAND_NORMAL$gen","text":"n Integer. Number observations. mu Numeric. provided length n, values used realization. sigma Numeric. provided length n, values used realization.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_NORMAL-cash-gen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random values — RAND_NORMAL$gen","text":"vector numeric values.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/RAND_NORMAL-cash-gen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random values — RAND_NORMAL$gen","text":"","code":"test <- rand_normal(mu = 1, sigma = 2) test$gen(10) #>  [1] -2.6765286 -1.5698614  1.8732343  0.6723982  3.3008637 -0.4590942 #>  [7]  0.7495655  2.5865515 -1.0228320  4.1361407  test$gen(3, mu = c(0,1,2), sigma = c(1,2,4)) #> [1]  1.1519469 -1.3525918  0.6233698"},{"path":"https://tengmcing.github.io/visage/reference/RAND_NORMAL.html","id":null,"dir":"Reference","previous_headings":"","what":"RAND_NORMAL class environment — RAND_NORMAL","title":"RAND_NORMAL class environment — RAND_NORMAL","text":"class normal random variable, inherited RAND_VAR.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_NORMAL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RAND_NORMAL class environment — RAND_NORMAL","text":"","code":"RAND_NORMAL"},{"path":"https://tengmcing.github.io/visage/reference/RAND_NORMAL.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"RAND_NORMAL class environment — RAND_NORMAL","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — RAND_UNIFORM$..init..","title":"Initialization method — RAND_UNIFORM$..init..","text":"function called instance built. User input stored environment.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — RAND_UNIFORM$..init..","text":"Numeric. Lower bound. Default 0. b Numeric. Upper bound. Default 1.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — RAND_UNIFORM$..init..","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — RAND_UNIFORM$..init..","text":"","code":"# Instantiate test <- rand_uniform(a = 1, b = 2) test #>  #> ── <RAND_UNIFORM object> #> [a: 1, b: 2]"},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM-cash-gen.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random values — RAND_UNIFORM$gen","title":"Generate random values — RAND_UNIFORM$gen","text":"function generates random values random variable.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM-cash-gen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random values — RAND_UNIFORM$gen","text":"n Integer. Number observations. Numeric. provided length n, values used realization. b Numeric. provided length n, values used realization.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM-cash-gen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random values — RAND_UNIFORM$gen","text":"vector numeric values.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM-cash-gen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random values — RAND_UNIFORM$gen","text":"","code":"test <- rand_uniform(a = 1, b = 2) test$gen(10) #>  [1] 1.085308 1.055658 1.336953 1.460761 1.000734 1.648327 1.989173 1.482561 #>  [9] 1.060360 1.097292  test$gen(3, a = c(1,2,3), b = c(2,3,4)) #> [1] 1.886390 2.575691 3.224190"},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM.html","id":null,"dir":"Reference","previous_headings":"","what":"RAND_UNIFORM class environment — RAND_UNIFORM","title":"RAND_UNIFORM class environment — RAND_UNIFORM","text":"class uniform random variable, inherited RAND_VAR.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RAND_UNIFORM class environment — RAND_UNIFORM","text":"","code":"RAND_UNIFORM"},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"RAND_UNIFORM class environment — RAND_UNIFORM","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM_D-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — RAND_UNIFORM_D$..init..","title":"Initialization method — RAND_UNIFORM_D$..init..","text":"function called instance built. User input stored environment.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM_D-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — RAND_UNIFORM_D$..init..","text":"Numeric. Lower bound. Default 0. b Numeric. Upper bound. Default 1. k Integer. Number unique discrete values. Default 5. even Boolean. Whether candidate values evenly spaced.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM_D-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — RAND_UNIFORM_D$..init..","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM_D-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — RAND_UNIFORM_D$..init..","text":"","code":"# Instantiate test <- rand_uniform_d(a = 1, b = 2, k = 3) test #>  #> ── <RAND_UNIFORM_D object> #> [a: 1, b: 2, k: 3, even: 0]"},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM_D-cash-gen.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random values — RAND_UNIFORM_D$gen","title":"Generate random values — RAND_UNIFORM_D$gen","text":"function generates random values random variable.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM_D-cash-gen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random values — RAND_UNIFORM_D$gen","text":"n Integer. Number observations. Numeric. provided length n, values used realization. b Numeric. provided length n, values used realization. k Numeric. provided length n, values used realization. even Boolean. provided length n, values used realization.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM_D-cash-gen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random values — RAND_UNIFORM_D$gen","text":"vector numeric values.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM_D-cash-gen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random values — RAND_UNIFORM_D$gen","text":"","code":"test <- rand_uniform_d(a = 1, b = 2, k = 2, even = TRUE) test$gen(10) #>  [1] 1 2 1 2 2 1 2 2 1 2  test$gen(3, a = c(1,2,3), b = c(2,3,4), k = 1, even = c(TRUE, TRUE, FALSE)) #> [1] 1 1 2"},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM_D.html","id":null,"dir":"Reference","previous_headings":"","what":"RAND_UNIFORM_D class environment — RAND_UNIFORM_D","title":"RAND_UNIFORM_D class environment — RAND_UNIFORM_D","text":"class discrete uniform random variable, inherited RAND_VAR.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM_D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RAND_UNIFORM_D class environment — RAND_UNIFORM_D","text":"","code":"RAND_UNIFORM_D"},{"path":"https://tengmcing.github.io/visage/reference/RAND_UNIFORM_D.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"RAND_UNIFORM_D class environment — RAND_UNIFORM_D","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — RAND_VAR$..init..","title":"Initialization method — RAND_VAR$..init..","text":"function called instance built. User input stored environment.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — RAND_VAR$..init..","text":"dist Character. Distribution name. prm List. List parameters.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — RAND_VAR$..init..","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — RAND_VAR$..init..","text":"","code":"RAND_VAR$..init.. #> function (dist = \"uniform\", prm = list())  #> { #>     self$dist <- dist #>     if (!is.list(prm))  #>         stop(\"`prm` is not a list!\") #>     self$prm <- prm #>     return(self) #> } #> <bytecode: 0x7f94a1bdfba8> #> <environment: 0x7f94a1bdb8d0>  # Instantiate test <- rand_var(dist = \"uniform\", prm = list(a = 1, b = 2)) test$prm #> $a #> [1] 1 #>  #> $b #> [1] 2 #>  test$dist #> [1] \"uniform\""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-..str...html","id":null,"dir":"Reference","previous_headings":"","what":"String representation of the object — RAND_VAR$..str..","title":"String representation of the object — RAND_VAR$..str..","text":"function returns string representation object.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-..str...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"String representation of the object — RAND_VAR$..str..","text":"string.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-..str...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"String representation of the object — RAND_VAR$..str..","text":"","code":"RAND_VAR$..str..() #> [1] \"<RAND_VAR class>\"  test <- rand_var(dist = \"uniform\", prm = list(a = 1, b = 2)) test$..str..() #> [1] \"<RAND_VAR object>\\n [a: 1, b: 2]\""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-E.html","id":null,"dir":"Reference","previous_headings":"","what":"Expectation of the random variable — RAND_VAR$E","title":"Expectation of the random variable — RAND_VAR$E","text":"Expectation random variable. User override method derived class.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-E.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expectation of the random variable — RAND_VAR$E","text":"NA","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-E.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expectation of the random variable — RAND_VAR$E","text":"","code":"RAND_VAR$E() #> [1] NA"},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-Var.html","id":null,"dir":"Reference","previous_headings":"","what":"Variance of the random variable — RAND_VAR$Var","title":"Variance of the random variable — RAND_VAR$Var","text":"Variance random variable. User override method derived class.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-Var.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variance of the random variable — RAND_VAR$Var","text":"NA","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-Var.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variance of the random variable — RAND_VAR$Var","text":"","code":"RAND_VAR$Var() #> [1] NA"},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Distribution name — RAND_VAR$dist","title":"Distribution name — RAND_VAR$dist","text":"string, initialized instance built.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distribution name — RAND_VAR$dist","text":"","code":"# Instantiate test <- rand_var(dist = \"uniform\", prm = list(a = 1, b = 2)) test$prm #> $a #> [1] 1 #>  #> $b #> [1] 2 #>  test$dist #> [1] \"uniform\""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-gen.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random values — RAND_VAR$gen","title":"Generate random values — RAND_VAR$gen","text":"function generates random values random variable.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-gen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random values — RAND_VAR$gen","text":"n Integer. Number observations. ... Ignored.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-gen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random values — RAND_VAR$gen","text":"NA. User needs define gen method derived class.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-gen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random values — RAND_VAR$gen","text":"","code":"test <- RAND_VAR$gen(10)"},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-prm.html","id":null,"dir":"Reference","previous_headings":"","what":"List of parameters — RAND_VAR$prm","title":"List of parameters — RAND_VAR$prm","text":"list, initialized instance built.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-prm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of parameters — RAND_VAR$prm","text":"","code":"# Instantiate test <- rand_var(dist = \"uniform\", prm = list(a = 1, b = 2)) test$prm #> $a #> [1] 1 #>  #> $b #> [1] 2 #>  test$dist #> [1] \"uniform\""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-set_prm.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random values — RAND_VAR$set_prm","title":"Generate random values — RAND_VAR$set_prm","text":"function updates parameters.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-set_prm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random values — RAND_VAR$set_prm","text":"prm_name List Vector. sequence character parameter names. prm_value List Vector. sequence parameter values.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-set_prm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random values — RAND_VAR$set_prm","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR-cash-set_prm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random values — RAND_VAR$set_prm","text":"","code":"test <- rand_var() test$set_prm(\"a\", 1) #>  #> ── <RAND_VAR object> #> [a: 1]  test #>  #> ── <RAND_VAR object> #> [a: 1]"},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR.html","id":null,"dir":"Reference","previous_headings":"","what":"RAND_VAR class environment — RAND_VAR","title":"RAND_VAR class environment — RAND_VAR","text":"base class random variable, inherited bandicoot::BASE.","code":""},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RAND_VAR class environment — RAND_VAR","text":"","code":"RAND_VAR"},{"path":"https://tengmcing.github.io/visage/reference/RAND_VAR.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"RAND_VAR class environment — RAND_VAR","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — SIMPLE_CUBIC_MODEL$..init..","title":"Initialization method — SIMPLE_CUBIC_MODEL$..init..","text":"function called instance built. User input stored environment. response variable model y. formula y defined SIMPLE_CUBIC_MODEL$formula, null formula defined SIMPLE_CUBIC_MODEL$null_formula, alternative defined SIMPLE_CUBIC_MODEL$alt_formula.","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — SIMPLE_CUBIC_MODEL$..init..","text":"Numeric. Default = 1. b Numeric. Default b = 1. sigma Positive numeric. Default sigma = 1. x Random variable closed form expression. Default x = rand_uniform(-1, 1, env = new.env(parent = parent.env(self))). e Random variable closed form expression. Default e = rand_normal(0, sigma, env = new.env(parent = parent.env(self))).","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — SIMPLE_CUBIC_MODEL$..init..","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — SIMPLE_CUBIC_MODEL$..init..","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal()  test <- simple_cubic_model(a = 200, b = 200, x = x, e = e)  test #>  #> ── <SIMPLE_CUBIC_MODEL object> #> y = 1 + x + a * x^2 + b * x^3 + e #>  - x: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #>  - a: 200 #>  - b: 200 #>  - sigma: 1   # Generate data test$gen(10) #>             y          x          e    .resid   .fitted #> 1  276.055295 0.85705142  1.3835979  11.24983 264.80547 #> 2   46.584853 0.40438758 -0.7512423 -25.48458  72.06944 #> 3  370.591920 0.96693170  0.8257114  59.00143 311.59049 #> 4   57.473113 0.44009225  0.2492662 -29.79872  87.27183 #> 5   29.747289 0.33911891 -2.3920023 -14.53193  44.27922 #> 6   87.656489 0.52997057  0.1823186 -37.88390 125.54039 #> 7   41.710715 0.38538289 -0.8260748 -22.26687  63.97759 #> 8   97.995203 0.55828572 -0.7013000 -39.60126 137.59647 #> 9    8.506207 0.16511257  0.9883969  38.31572 -29.80951 #> 10   3.445150 0.09994858  0.1475657  61.00030 -57.55515  # Generate lineup test$gen_lineup(10, k = 3) #>             y          x          e     .resid   .fitted test_name    statistic #> 1   34.860002 0.35127699  0.1604189 -24.846009  59.70601    F-test 2958.9908645 #> 2  338.567742 0.93142961  1.5096664  80.762618 257.80512    F-test 2958.9908645 #> 3    2.456273 0.05841362  0.6755656  42.751489 -40.29522    F-test 2958.9908645 #> 4  143.133319 0.65145706  1.3074085 -19.072282 162.20560    F-test 2958.9908645 #> 5  137.188825 0.63924612  1.5787132 -20.847225 158.03605    F-test 2958.9908645 #> 6  161.406109 0.68825868 -0.2277783 -13.365785 174.77189    F-test 2958.9908645 #> 7    5.592395 0.14170145 -0.1342198  17.448119 -11.85572    F-test 2958.9908645 #> 8  170.348935 0.70733660 -2.2030591 -10.937313 181.28625    F-test 2958.9908645 #> 9  143.564663 0.65434276  0.2441714 -19.626289 163.19095    F-test 2958.9908645 #> 10  76.145617 0.49391999  1.7612619 -32.267323 108.41294    F-test 2958.9908645 #> 11  79.612117 0.35127699  0.1604189  19.906106  59.70601    F-test    1.0977669 #> 12 212.864770 0.93142961  1.5096664 -44.940354 257.80512    F-test    1.0977669 #> 13 -25.346102 0.05841362  0.6755656  14.949114 -40.29522    F-test    1.0977669 #> 14 167.508147 0.65145706  1.3074085   5.302546 162.20560    F-test    1.0977669 #> 15 140.834482 0.63924612  1.5787132 -17.201568 158.03605    F-test    1.0977669 #> 16 256.524805 0.68825868 -0.2277783  81.752911 174.77189    F-test    1.0977669 #> 17 -56.250759 0.14170145 -0.1342198 -44.395035 -11.85572    F-test    1.0977669 #> 18 184.262012 0.70733660 -2.2030591   2.975764 181.28625    F-test    1.0977669 #> 19 153.944405 0.65434276  0.2441714  -9.246548 163.19095    F-test    1.0977669 #> 20  99.310003 0.49391999  1.7612619  -9.102936 108.41294    F-test    1.0977669 #> 21  15.003778 0.35127699  0.1604189 -44.702233  59.70601    F-test    0.3315801 #> 22 242.311609 0.93142961  1.5096664 -15.493516 257.80512    F-test    0.3315801 #> 23 -45.873712 0.05841362  0.6755656  -5.578496 -40.29522    F-test    0.3315801 #> 24 176.100001 0.65145706  1.3074085  13.894399 162.20560    F-test    0.3315801 #> 25 230.816318 0.63924612  1.5787132  72.780268 158.03605    F-test    0.3315801 #> 26 151.131811 0.68825868 -0.2277783 -23.640082 174.77189    F-test    0.3315801 #> 27  15.262637 0.14170145 -0.1342198  27.118361 -11.85572    F-test    0.3315801 #> 28 210.093281 0.70733660 -2.2030591  28.807034 181.28625    F-test    0.3315801 #> 29 120.832537 0.65434276  0.2441714 -42.358415 163.19095    F-test    0.3315801 #> 30  97.585621 0.49391999  1.7612619 -10.827319 108.41294    F-test    0.3315801 #>         p_value k  null #> 1  1.038993e-09 2 FALSE #> 2  1.038993e-09 2 FALSE #> 3  1.038993e-09 2 FALSE #> 4  1.038993e-09 2 FALSE #> 5  1.038993e-09 2 FALSE #> 6  1.038993e-09 2 FALSE #> 7  1.038993e-09 2 FALSE #> 8  1.038993e-09 2 FALSE #> 9  1.038993e-09 2 FALSE #> 10 1.038993e-09 2 FALSE #> 11 3.923937e-01 1  TRUE #> 12 3.923937e-01 1  TRUE #> 13 3.923937e-01 1  TRUE #> 14 3.923937e-01 1  TRUE #> 15 3.923937e-01 1  TRUE #> 16 3.923937e-01 1  TRUE #> 17 3.923937e-01 1  TRUE #> 18 3.923937e-01 1  TRUE #> 19 3.923937e-01 1  TRUE #> 20 3.923937e-01 1  TRUE #> 21 7.301515e-01 3  TRUE #> 22 7.301515e-01 3  TRUE #> 23 7.301515e-01 3  TRUE #> 24 7.301515e-01 3  TRUE #> 25 7.301515e-01 3  TRUE #> 26 7.301515e-01 3  TRUE #> 27 7.301515e-01 3  TRUE #> 28 7.301515e-01 3  TRUE #> 29 7.301515e-01 3  TRUE #> 30 7.301515e-01 3  TRUE  # Plot the lineup test$plot_lineup(test$gen_lineup(100))"},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-E.html","id":null,"dir":"Reference","previous_headings":"","what":"Expectation of the residuals — SIMPLE_CUBIC_MODEL$E","title":"Expectation of the residuals — SIMPLE_CUBIC_MODEL$E","text":"function calculate expectation residuals use Frisch–Waugh–Lovell theorem.","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-E.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expectation of the residuals — SIMPLE_CUBIC_MODEL$E","text":"dat Dataframe/List. List contains variable x z. Numeric. Default = self$prm$. b Numeric. Default b = self$prm$b.","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-E.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expectation of the residuals — SIMPLE_CUBIC_MODEL$E","text":"vector numeric expectations.","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-E.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expectation of the residuals — SIMPLE_CUBIC_MODEL$E","text":"","code":"mod <- simple_cubic_model(-1, 1, 0.5) dat <- mod$gen(1000, fit_model = TRUE) dat$exp <- mod$E(dat) mod$plot(dat) + ggplot2::geom_point(ggplot2::aes(.fitted, exp),                                     col = \"red\",                                     alpha = 0.6)"},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-alt_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the alternative model — SIMPLE_CUBIC_MODEL$alt_formula","title":"Formula for fitting the alternative model — SIMPLE_CUBIC_MODEL$alt_formula","text":"Quoted formula fitting alternative model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-alt_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the alternative model — SIMPLE_CUBIC_MODEL$alt_formula","text":"","code":"SIMPLE_CUBIC_MODEL$alt_formula #> y ~ x + I(x^2) + I(x^3)"},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-effect_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the effect size of the simulated data — SIMPLE_CUBIC_MODEL$effect_size","title":"Compute the effect size of the simulated data — SIMPLE_CUBIC_MODEL$effect_size","text":"function computes effect size simulated data.","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-effect_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the effect size of the simulated data — SIMPLE_CUBIC_MODEL$effect_size","text":"dat Dataframe/List. List contains variable x. Numeric. Default = self$prm$. b Numeric. Default b = self$prm$b. sigma Positive numeric. Default sigma = self$prm$sigma.","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-effect_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the effect size of the simulated data — SIMPLE_CUBIC_MODEL$effect_size","text":"numeric value.","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-effect_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the effect size of the simulated data — SIMPLE_CUBIC_MODEL$effect_size","text":"","code":"mod <- simple_cubic_model(-1, 1, 0.5) dat <- mod$gen(1000, fit_model = TRUE) mod$effect_size(dat) #> [1] 1.362568"},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Closed form expression of y — SIMPLE_CUBIC_MODEL$formula","title":"Closed form expression of y — SIMPLE_CUBIC_MODEL$formula","text":"quoted formula, passed CLOSED_FORM$instantiate define closed form expression y.","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Closed form expression of y — SIMPLE_CUBIC_MODEL$formula","text":"","code":"SIMPLE_CUBIC_MODEL$formula #> y ~ 1 + x + a * x^2 + b * x^3 + e"},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-null_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the null model — SIMPLE_CUBIC_MODEL$null_formula","title":"Formula for fitting the null model — SIMPLE_CUBIC_MODEL$null_formula","text":"Quoted formula fitting null model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-null_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the null model — SIMPLE_CUBIC_MODEL$null_formula","text":"","code":"SIMPLE_CUBIC_MODEL$null_formula #> y ~ x"},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-set_prm.html","id":null,"dir":"Reference","previous_headings":"","what":"Set parameter for the model — SIMPLE_CUBIC_MODEL$set_prm","title":"Set parameter for the model — SIMPLE_CUBIC_MODEL$set_prm","text":"function store values environment update values closed form expression y, except parameter sigma. parameter sigma, value updated, corresponding value e updated.","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-set_prm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set parameter for the model — SIMPLE_CUBIC_MODEL$set_prm","text":"prm_name List Vector. Parameter character names. prm_val List Vector. Parameter values.","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-set_prm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set parameter for the model — SIMPLE_CUBIC_MODEL$set_prm","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL-cash-set_prm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set parameter for the model — SIMPLE_CUBIC_MODEL$set_prm","text":"","code":"# Instantiate mod <- simple_cubic_model(a = -1, b = 1, sigma = 0.5)  mod #>  #> ── <SIMPLE_CUBIC_MODEL object> #> y = 1 + x + a * x^2 + b * x^3 + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #>  - a: -1 #>  - b: 1 #>  - sigma: 0.5   mod$set_prm(\"a\", 2) #>  #> ── <SIMPLE_CUBIC_MODEL object> #> y = 1 + x + a * x^2 + b * x^3 + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #>  - a: 2 #>  - b: 1 #>  - sigma: 0.5   mod #>  #> ── <SIMPLE_CUBIC_MODEL object> #> y = 1 + x + a * x^2 + b * x^3 + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 0.5] #>  - a: 2 #>  - b: 1 #>  - sigma: 0.5   mod$set_prm(\"sigma\", 1) #>  #> ── <SIMPLE_CUBIC_MODEL object> #> y = 1 + x + a * x^2 + b * x^3 + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #>  - a: 2 #>  - b: 1 #>  - sigma: 1   mod #>  #> ── <SIMPLE_CUBIC_MODEL object> #> y = 1 + x + a * x^2 + b * x^3 + e #>  - x: <RAND_UNIFORM object> #>    [a: -1, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #>  - a: 2 #>  - b: 1 #>  - sigma: 1"},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL.html","id":null,"dir":"Reference","previous_headings":"","what":"SIMPLE_CUBIC_MODEL class environment — SIMPLE_CUBIC_MODEL","title":"SIMPLE_CUBIC_MODEL class environment — SIMPLE_CUBIC_MODEL","text":"class visual inference simple cubic linear model, inherited VI_MODEL.","code":""},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SIMPLE_CUBIC_MODEL class environment — SIMPLE_CUBIC_MODEL","text":"","code":"SIMPLE_CUBIC_MODEL"},{"path":"https://tengmcing.github.io/visage/reference/SIMPLE_CUBIC_MODEL.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"SIMPLE_CUBIC_MODEL class environment — SIMPLE_CUBIC_MODEL","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-..cache...html","id":null,"dir":"Reference","previous_headings":"","what":"Cache list, containing the last fitted model, data frame and formula — VI_MODEL$..cache..","title":"Cache list, containing the last fitted model, data frame and formula — VI_MODEL$..cache..","text":"list, used cache = TRUE calling fit method.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-..cache...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cache list, containing the last fitted model, data frame and formula — VI_MODEL$..cache..","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  # Turn on cache test$fit(test$gen(10), cache = TRUE) #>  #> Call: #> stats::lm(formula = y ~ x, data = test$gen(10)) #>  #> Coefficients: #> (Intercept)            x   #>     -0.1109       3.3806   #>   test$..cache.. #> $dat #>             y         x          e     .resid  .fitted #> 1  4.07015113 0.9199177  1.3039849  1.0839521 2.986199 #> 2  1.73143209 0.6787654 -0.4080557 -0.5940221 2.325454 #> 3  0.08431366 0.2485532 -1.2260182 -1.0623816 1.146695 #> 4  2.64759766 0.6193111  0.6447403  0.4850451 2.162553 #> 5  2.35173253 0.3454261  0.8869873  0.9396107 1.412122 #> 6  2.23236542 0.8417953 -0.3180492 -0.5397823 2.772148 #> 7  1.15341091 0.8436970 -1.4021106 -1.6239473 2.777358 #> 8  3.13780293 0.4888853  1.4099089  1.3326103 1.805193 #> 9  0.94234274 0.3037250 -0.4536312 -0.3555205 1.297863 #> 10 3.47214122 0.9752132  0.5458874  0.3344355 3.137706 #>  #> $formula #> y ~ x #>  #> $mod #>  #> Call: #> stats::lm(formula = y ~ x, data = test$gen(10)) #>  #> Coefficients: #> (Intercept)            x   #>     -0.1109       3.3806   #>  #>"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-..init...html","id":null,"dir":"Reference","previous_headings":"","what":"Initialization method — VI_MODEL$..init..","title":"Initialization method — VI_MODEL$..init..","text":"function called instance built. User input stored environment. response variable model y.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-..init...html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialization method — VI_MODEL$..init..","text":"prm Named List. list random variables closed form expressions needs used constructing y. Constant parameters also supplied. prm_type Named List. list characters denoting type parameters. \"r\" stands random variable closed form used expression y, \"o\" stands others. value affects string representation object. formula Formula. passed CLOSED_FORM$instantiate define closed form expression y. Default formula = self$formula. null_formula Formula. Formula fitting null model. Default NULL. alt_formula Formula. Formula fitting alternative model. Default NULL.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-..init...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialization method — VI_MODEL$..init..","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-..init...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialization method — VI_MODEL$..init..","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  test #>  #> ── <VI_MODEL object> #> y = 1 + x + x^2 + e #>  - x: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1]"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-..str...html","id":null,"dir":"Reference","previous_headings":"","what":"String representation of the object — VI_MODEL$..str..","title":"String representation of the object — VI_MODEL$..str..","text":"function returns string representation object.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-..str...html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"String representation of the object — VI_MODEL$..str..","text":"string.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-..str...html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"String representation of the object — VI_MODEL$..str..","text":"","code":"VI_MODEL$..str..() #> [1] \"<VI_MODEL class>\"  # Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  test$..str..() #> [1] \"<VI_MODEL object>\\n y = 1 + x + x^2 + e\\n  - x: <RAND_UNIFORM object>\\n    [a: 0, b: 1]\\n  - e: <RAND_NORMAL object>\\n    [mu: 0, sigma: 1]\""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-alt_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the alternative model — VI_MODEL$alt_formula","title":"Formula for fitting the alternative model — VI_MODEL$alt_formula","text":"quoted formula, used fit alternative model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-alt_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the alternative model — VI_MODEL$alt_formula","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  # A formula with environment equals to `test` test$alt_formula #> y ~ x + I(x^2)  # Use alternative formula in `fit` test$fit(test$gen(10), test$alt_formula) #>  #> Call: #> stats::lm(formula = y ~ x + I(x^2), data = test$gen(10)) #>  #> Coefficients: #> (Intercept)            x       I(x^2)   #>      0.8155       2.8104      -1.8954   #>   # F-test also needs to use the alternative model test$test(test$gen(1000)) #> $name #> [1] \"F-test\" #>  #> $statistic #> [1] 8.174705 #>  #> $p_value #> [1] 0.004336393 #>"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-effect_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the effect size of the simulated data or the defined model — VI_MODEL$effect_size","title":"Compute the effect size of the simulated data or the defined model — VI_MODEL$effect_size","text":"function computes effect size simulated data defined model. abstract method.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-effect_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the effect size of the simulated data or the defined model — VI_MODEL$effect_size","text":"... Derived class needs override method.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-effect_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the effect size of the simulated data or the defined model — VI_MODEL$effect_size","text":"NA","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-effect_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the effect size of the simulated data or the defined model — VI_MODEL$effect_size","text":"","code":"VI_MODEL$effect_size() #> [1] NA"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Test the null model against the alternative model — VI_MODEL$fit","title":"Test the null model against the alternative model — VI_MODEL$fit","text":"function fit linear model using stats::lm.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test the null model against the alternative model — VI_MODEL$fit","text":"dat Data frame. data frame containing variables needed formula. Default dat = self$..cache..$dat. formula Formula. Formula fitting model. Default formula = self$null_formula. cache Boolean. Whether cache model. Default FALSE. ... Arguments passed stats::lm.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test the null model against the alternative model — VI_MODEL$fit","text":"fitted linear model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test the null model against the alternative model — VI_MODEL$fit","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  test$fit(test$gen(100000)) #>  #> Call: #> stats::lm(formula = y ~ x, data = test$gen(1e+05)) #>  #> Coefficients: #> (Intercept)            x   #>      0.8287       2.0108   #>   test$fit(test$gen(100000), formula = y ~ x + I(x^2)) #>  #> Call: #> stats::lm(formula = y ~ x + I(x^2), data = test$gen(1e+05)) #>  #> Coefficients: #> (Intercept)            x       I(x^2)   #>      1.0186       0.9243       1.0565   #>"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Closed form expression of y — VI_MODEL$formula","title":"Closed form expression of y — VI_MODEL$formula","text":"quoted formula, passed CLOSED_FORM$instantiate define closed form expression y.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Closed form expression of y — VI_MODEL$formula","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  # A formula with environment equals to `test` test$formula #> y ~ 1 + x + x^2 + e  # `y` has the same expression test$prm$y #>  #> ── <CLOSED_FORM object> #> EXPR = 1 + x + x^2 + e #>  - x: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1]"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-gen.html","id":null,"dir":"Reference","previous_headings":"","what":"Generating random values from the expression of y — VI_MODEL$gen","title":"Generating random values from the expression of y — VI_MODEL$gen","text":"function generates random values expression y, keeps right hand side information data frame.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-gen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generating random values from the expression of y — VI_MODEL$gen","text":"n Integer. Number observations. fit_model Boolean. Whether fit null model obtain fitted values residuals. Default TRUE. test Boolean. Whether test null model alternative model obtain test statistic p-value. Default FALSE. computed List. Default NULL. provided, random variables random closed form expression use values list, makes expression potentially deterministic.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-gen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generating random values from the expression of y — VI_MODEL$gen","text":"data frame.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-gen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generating random values from the expression of y — VI_MODEL$gen","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  dat <- test$gen(10) dat #>             y          x           e      .resid   .fitted #> 1   1.7387689 0.79947275 -0.69986050  0.08470404 1.6540649 #> 2   1.4736922 0.20266648  0.22995202  0.37404736 1.0996448 #> 3   1.2708604 0.87726195 -1.37599008 -0.45546894 1.7263294 #> 4   1.3846941 0.06516278  0.31528513  0.41278720 0.9719069 #> 5   2.4765052 0.84470702 -0.08173177  0.78041868 1.6960865 #> 6  -0.3241651 0.56453279 -2.20739511 -1.75997582 1.4358108 #> 7   1.7304359 0.54441323 -0.11036306  0.31331580 1.4171201 #> 8   2.0998369 0.45002866  0.44728242  0.77039795 1.3294389 #> 9   0.1702947 0.02290108 -0.85313089 -0.76235205 0.9326467 #> 10  1.3977649 0.26294165  0.06568497  0.24212577 1.1556392  test$gen(10, computed = list(e = dat$e)) #>              y           e          x     .resid    .fitted #> 1   1.29168658 -0.69986050 0.61424732 -0.3822155  1.6739021 #> 2   3.22203804  0.22995202 0.99735968  0.2723827  2.9496553 #> 3  -0.32848163 -1.37599008 0.04544335 -0.1082828 -0.2201989 #> 4   2.52525919  0.31528513 0.70829386  0.5381848  1.9870744 #> 5   1.86670920 -0.08173177 0.59473329  0.2577883  1.6089209 #> 6  -0.08697323 -2.20739511 0.67065020 -1.9486953  1.8617221 #> 7   1.24375399 -0.11036306 0.27724967  0.6920444  0.5517096 #> 8   2.64861975  0.44728242 0.70471463  0.6734641  1.9751556 #> 9   0.79574522 -0.85313089 0.44809077 -0.3248603  1.1206055 #> 10  2.17247542  0.06568497 0.66481348  0.3301895  1.8422860  test$gen(10, test = TRUE) #>            y         x          e     .resid  .fitted test_name   statistic #> 1  1.3618813 0.4779422 -0.3444896 -0.6056634 1.967545    F-test 0.002747847 #> 2  1.8908979 0.7210452 -0.3500535 -0.3727287 2.263627    F-test 0.002747847 #> 3  3.4636186 0.6418399  1.4098204  1.2964585 2.167160    F-test 0.002747847 #> 4  2.1593007 0.1550162  0.9802545  0.5850564 1.574244    F-test 0.002747847 #> 5  1.5065665 0.8084922 -0.9555854 -0.8635641 2.370131    F-test 0.002747847 #> 6  2.4869861 0.4631236  0.8093792  0.5374894 1.949497    F-test 0.002747847 #> 7  2.5041918 0.7100323  0.2900136  0.2539782 2.250214    F-test 0.002747847 #> 8  3.0400770 0.6942762  0.8637814  0.8090532 2.231024    F-test 0.002747847 #> 9  0.6933052 0.3319984 -0.7489160 -1.0964905 1.789796    F-test 0.002747847 #> 10 1.4990734 0.5396189 -0.3317339 -0.5435890 2.042662    F-test 0.002747847 #>      p_value #> 1  0.9596587 #> 2  0.9596587 #> 3  0.9596587 #> 4  0.9596587 #> 5  0.9596587 #> 6  0.9596587 #> 7  0.9596587 #> 8  0.9596587 #> 9  0.9596587 #> 10 0.9596587"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-gen_lineup.html","id":null,"dir":"Reference","previous_headings":"","what":"Generating random values from the expression of y, and forms a lineup — VI_MODEL$gen_lineup","title":"Generating random values from the expression of y, and forms a lineup — VI_MODEL$gen_lineup","text":"function generates random values expression y, keeps right hand side information data frame.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-gen_lineup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generating random values from the expression of y, and forms a lineup — VI_MODEL$gen_lineup","text":"n Integer. Number observations. k Integer. Number plots lineup. Default k = 20. pos Integer. Position true data plot. Default pos = NULL, means position random. computed List. Default NULL. provided, random variables random closed form expression use values list, makes expression potentially deterministic.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-gen_lineup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generating random values from the expression of y, and forms a lineup — VI_MODEL$gen_lineup","text":"data frame.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-gen_lineup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generating random values from the expression of y, and forms a lineup — VI_MODEL$gen_lineup","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  test$gen_lineup(10, k = 3) #>             y          x            e       .resid  .fitted test_name #> 1   1.9249476 0.76725533 -0.430988445 -0.873754108 2.798702    F-test #> 2   2.0852221 0.79365558 -0.338322628 -0.782111129 2.867333    F-test #> 3   3.5135030 0.93103977  0.715628137  0.289018284 3.224485    F-test #> 4   0.1203557 0.07812263 -0.963870064 -0.886839154 1.007195    F-test #> 5   5.0994314 0.69677176  2.917168790  2.483962624 2.615469    F-test #> 6   1.6752950 0.61869833 -0.326190932 -0.737209854 2.412505    F-test #> 7   2.1522678 0.16787863  0.956205980  0.911738395 1.240529    F-test #> 8   3.1056570 0.85623219  0.516291210  0.075646142 3.030011    F-test #> 9   2.2876769 0.58250399  0.365862025 -0.030735185 2.318412    F-test #> 10  2.5698771 0.85222483 -0.008634934 -0.449716014 3.019593    F-test #> 11  3.7406749 0.76725533 -0.430988445  0.941973192 2.798702    F-test #> 12  0.8526322 0.79365558 -0.338322628 -2.014701003 2.867333    F-test #> 13  4.0056352 0.93103977  0.715628137  0.781150472 3.224485    F-test #> 14  2.2154586 0.07812263 -0.963870064  1.208263723 1.007195    F-test #> 15  3.5524564 0.69677176  2.917168790  0.936987593 2.615469    F-test #> 16  1.4618430 0.61869833 -0.326190932 -0.950661889 2.412505    F-test #> 17  0.1655248 0.16787863  0.956205980 -1.075004602 1.240529    F-test #> 18  3.2070039 0.85623219  0.516291210  0.176993105 3.030011    F-test #> 19  2.2329126 0.58250399  0.365862025 -0.085499522 2.318412    F-test #> 20  3.1000920 0.85222483 -0.008634934  0.080498931 3.019593    F-test #> 21  3.2363847 0.76725533 -0.430988445  0.437682945 2.798702    F-test #> 22  3.9369368 0.79365558 -0.338322628  1.069603507 2.867333    F-test #> 23  3.4388798 0.93103977  0.715628137  0.214395119 3.224485    F-test #> 24 -0.1931027 0.07812263 -0.963870064 -1.200297545 1.007195    F-test #> 25  0.5512502 0.69677176  2.917168790 -2.064218643 2.615469    F-test #> 26  2.2982043 0.61869833 -0.326190932 -0.114300561 2.412505    F-test #> 27  2.9297300 0.16787863  0.956205980  1.689200538 1.240529    F-test #> 28  2.8562632 0.85623219  0.516291210 -0.173747628 3.030011    F-test #> 29  2.4559692 0.58250399  0.365862025  0.137557104 2.318412    F-test #> 30  3.0237182 0.85222483 -0.008634934  0.004125164 3.019593    F-test #>     statistic   p_value k  null #> 1  0.18123589 0.6830965 3 FALSE #> 2  0.18123589 0.6830965 3 FALSE #> 3  0.18123589 0.6830965 3 FALSE #> 4  0.18123589 0.6830965 3 FALSE #> 5  0.18123589 0.6830965 3 FALSE #> 6  0.18123589 0.6830965 3 FALSE #> 7  0.18123589 0.6830965 3 FALSE #> 8  0.18123589 0.6830965 3 FALSE #> 9  0.18123589 0.6830965 3 FALSE #> 10 0.18123589 0.6830965 3 FALSE #> 11 0.80307707 0.3999421 1  TRUE #> 12 0.80307707 0.3999421 1  TRUE #> 13 0.80307707 0.3999421 1  TRUE #> 14 0.80307707 0.3999421 1  TRUE #> 15 0.80307707 0.3999421 1  TRUE #> 16 0.80307707 0.3999421 1  TRUE #> 17 0.80307707 0.3999421 1  TRUE #> 18 0.80307707 0.3999421 1  TRUE #> 19 0.80307707 0.3999421 1  TRUE #> 20 0.80307707 0.3999421 1  TRUE #> 21 0.02302314 0.8836774 2  TRUE #> 22 0.02302314 0.8836774 2  TRUE #> 23 0.02302314 0.8836774 2  TRUE #> 24 0.02302314 0.8836774 2  TRUE #> 25 0.02302314 0.8836774 2  TRUE #> 26 0.02302314 0.8836774 2  TRUE #> 27 0.02302314 0.8836774 2  TRUE #> 28 0.02302314 0.8836774 2  TRUE #> 29 0.02302314 0.8836774 2  TRUE #> 30 0.02302314 0.8836774 2  TRUE  test$gen_lineup(10, k = 3, computed = list(e = 1:10)) #>            y  e         x      .resid  .fitted test_name statistic    p_value k #> 1   2.112949  1 0.1024523 -2.87330867 4.986257    F-test 2.2219497 0.17968149 1 #> 2   3.153171  2 0.1349574 -2.00906486 5.162236    F-test 2.2219497 0.17968149 1 #> 3   5.562918  3 0.8464466 -3.45122050 9.014139    F-test 2.2219497 0.17968149 1 #> 4   6.453081  4 0.8050213 -2.33678754 8.789868    F-test 2.2219497 0.17968149 1 #> 5   6.950377  5 0.5956172 -0.70580644 7.656183    F-test 2.2219497 0.17968149 1 #> 6   7.645675  6 0.4464011  0.79732658 6.848349    F-test 2.2219497 0.17968149 1 #> 7   9.974446  7 0.9914577  0.17523714 9.799209    F-test 2.2219497 0.17968149 1 #> 8   9.771362  8 0.5106247  2.57531632 7.196046    F-test 2.2219497 0.17968149 1 #> 9  11.433941  9 0.7976675  2.68388521 8.750056    F-test 2.2219497 0.17968149 1 #> 10 11.473247 10 0.3504392  5.14442276 6.328824    F-test 2.2219497 0.17968149 1 #> 11  8.634383  1 0.1024523  3.64812549 4.986257    F-test 4.3304994 0.07597455 2 #> 12  4.511254  2 0.1349574 -0.65098154 5.162236    F-test 4.3304994 0.07597455 2 #> 13  9.464218  3 0.8464466  0.45007942 9.014139    F-test 4.3304994 0.07597455 2 #> 14 11.707306  4 0.8050213  2.91743815 8.789868    F-test 4.3304994 0.07597455 2 #> 15  3.245063  5 0.5956172 -4.41111997 7.656183    F-test 4.3304994 0.07597455 2 #> 16  7.681936  6 0.4464011  0.83358781 6.848349    F-test 4.3304994 0.07597455 2 #> 17 11.725377  7 0.9914577  1.92616753 9.799209    F-test 4.3304994 0.07597455 2 #> 18  2.292634  8 0.5106247 -4.90341193 7.196046    F-test 4.3304994 0.07597455 2 #> 19  8.229557  9 0.7976675 -0.52049913 8.750056    F-test 4.3304994 0.07597455 2 #> 20  7.039438 10 0.3504392  0.71061419 6.328824    F-test 4.3304994 0.07597455 2 #> 21  5.083401  1 0.1024523  0.09714327 4.986257    F-test 0.0137285 0.91001734 3 #> 22  6.180789  2 0.1349574  1.01855326 5.162236    F-test 0.0137285 0.91001734 3 #> 23  9.219716  3 0.8464466  0.20557725 9.014139    F-test 0.0137285 0.91001734 3 #> 24 13.742042  4 0.8050213  4.95217371 8.789868    F-test 0.0137285 0.91001734 3 #> 25  9.603979  5 0.5956172  1.94779552 7.656183    F-test 0.0137285 0.91001734 3 #> 26  1.265167  6 0.4464011 -5.58318149 6.848349    F-test 0.0137285 0.91001734 3 #> 27  8.391411  7 0.9914577 -1.40779824 9.799209    F-test 0.0137285 0.91001734 3 #> 28  7.496942  8 0.5106247  0.30089624 7.196046    F-test 0.0137285 0.91001734 3 #> 29  6.073290  9 0.7976675 -2.67676619 8.750056    F-test 0.0137285 0.91001734 3 #> 30  7.474431 10 0.3504392  1.14560667 6.328824    F-test 0.0137285 0.91001734 3 #>     null #> 1  FALSE #> 2  FALSE #> 3  FALSE #> 4  FALSE #> 5  FALSE #> 6  FALSE #> 7  FALSE #> 8  FALSE #> 9  FALSE #> 10 FALSE #> 11  TRUE #> 12  TRUE #> 13  TRUE #> 14  TRUE #> 15  TRUE #> 16  TRUE #> 17  TRUE #> 18  TRUE #> 19  TRUE #> 20  TRUE #> 21  TRUE #> 22  TRUE #> 23  TRUE #> 24  TRUE #> 25  TRUE #> 26  TRUE #> 27  TRUE #> 28  TRUE #> 29  TRUE #> 30  TRUE"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-null_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Formula for fitting the null model — VI_MODEL$null_formula","title":"Formula for fitting the null model — VI_MODEL$null_formula","text":"quoted formula, used fit null model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-null_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formula for fitting the null model — VI_MODEL$null_formula","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  # A formula with environment equals to `test` test$null_formula #> y ~ x  # By default, `fit` use the null formula test$fit(test$gen(10)) #>  #> Call: #> stats::lm(formula = y ~ x, data = test$gen(10)) #>  #> Coefficients: #> (Intercept)            x   #>       0.171        2.748   #>   # F-test also needs to use the null model test$test(test$gen(1000)) #> $name #> [1] \"F-test\" #>  #> $statistic #> [1] 0.8508625 #>  #> $p_value #> [1] 0.3565316 #>"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-null_resid.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate null residuals from a null model — VI_MODEL$null_resid","title":"Generate null residuals from a null model — VI_MODEL$null_resid","text":"function uses data null model generate null residuals. null residuals generated first regressing random noises original regressors, multiply obtained residuals original RSS divided current RSS. results null residuals.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-null_resid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate null residuals from a null model — VI_MODEL$null_resid","text":"dat Data frame. data frame used fit model. mod Linear Model. null model. test Boolean. Whether use test newly generated data.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-null_resid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate null residuals from a null model — VI_MODEL$null_resid","text":"data frame updated y, .resid, potentially updated test result.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-null_resid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate null residuals from a null model — VI_MODEL$null_resid","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  dat <- test$gen(10) test$null_resid(dat, test$fit(dat), test = TRUE) #>            y           x           e     .resid  .fitted test_name statistic #> 1  1.0038869 0.418978521  0.82230173 -0.6718341 1.675721    F-test 0.2414636 #> 2  3.6535327 0.564095980 -0.24761601  1.8328923 1.820640    F-test 0.2414636 #> 3  0.1072492 0.072862467  0.60265703 -1.2228280 1.330077    F-test 0.2414636 #> 4  1.7301663 0.077875124 -0.51995297  0.3950833 1.335083    F-test 0.2414636 #> 5  2.1247989 0.004139485  1.60218741  0.8633509 1.261448    F-test 0.2414636 #> 6  2.7318933 0.983076510 -0.27987075  0.4928440 2.239049    F-test 0.2414636 #> 7  1.5286418 0.409663092  0.92884642 -0.1377765 1.666418    F-test 0.2414636 #> 8  1.7641211 0.179064397 -1.15683026  0.3279869 1.436134    F-test 0.2414636 #> 9  0.2756355 0.584959612 -1.83772450 -1.5658401 1.841476    F-test 0.2414636 #> 10 1.7977732 0.855504977 -0.09205108 -0.3138787 2.111652    F-test 0.2414636 #>      p_value null #> 1  0.6381825 TRUE #> 2  0.6381825 TRUE #> 3  0.6381825 TRUE #> 4  0.6381825 TRUE #> 5  0.6381825 TRUE #> 6  0.6381825 TRUE #> 7  0.6381825 TRUE #> 8  0.6381825 TRUE #> 9  0.6381825 TRUE #> 10 0.6381825 TRUE"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the fitted model — VI_MODEL$plot","title":"Plot the fitted model — VI_MODEL$plot","text":"function generates plot fitted model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the fitted model — VI_MODEL$plot","text":"dat Data frame. data frame containing correspoding variables. type Character. \"resid\": VI_MODEL$plot_resid. Default type = \"resid\". theme ggtheme. ggplot theme object. alpha Numeric. Alpha dot. Value 0 1. Default 1. size Numeric. Size dot. Value 0 1. Default 0.5. remove_axis Boolean. Whether remove axis. Default remove_axis = FALSE. remove_legend Boolean. Whether remove legend. Default remove_legend = FALSE. remove_grid_line Boolean. Whether remove grid lines. Default remove_grid_line = FALSE. add_zero_line Boolean. Whether add zero horizontal line. Default add_zero_line = TRUE.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the fitted model — VI_MODEL$plot","text":"ggplot.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the fitted model — VI_MODEL$plot","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + 10 * x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  # Residual plot of the null model test$plot(test$gen(1000, fit_model = TRUE), type = \"resid\")   # Customize the plot test$plot(test$gen(1000, fit_model = TRUE),           type = \"resid\",           theme = ggplot2::theme_light(),           remove_axis = TRUE,           remove_grid_line = TRUE,           add_zero_line = TRUE)"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot_lineup.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the lineup — VI_MODEL$plot_lineup","title":"Plot the lineup — VI_MODEL$plot_lineup","text":"function plots lineup.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot_lineup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the lineup — VI_MODEL$plot_lineup","text":"dat Data frame. data frame containing correspoding variables. type Character. \"resid\": VI_MODEL$plot_resid. Default type = \"resid\". ... Arguments passed VI_MODEL$plot","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot_lineup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the lineup — VI_MODEL$plot_lineup","text":"ggplot.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot_lineup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the lineup — VI_MODEL$plot_lineup","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + 10 * x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  # Lineup of residual plots test$plot_lineup(test$gen_lineup(100), type = \"resid\")   # Customize the plot test$plot_lineup(test$gen_lineup(100),                  type = \"resid\",                  theme = ggplot2::theme_light(),                  remove_axis = TRUE,                  remove_grid_line = TRUE,                  add_zero_line = TRUE)"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot_qq.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the residual Q-Q plot — VI_MODEL$plot_qq","title":"Plot the residual Q-Q plot — VI_MODEL$plot_qq","text":"function generate Q-Q plot residuals.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot_qq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the residual Q-Q plot — VI_MODEL$plot_qq","text":"dat Data frame. data frame containing .resid.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot_qq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the residual Q-Q plot — VI_MODEL$plot_qq","text":"ggplot.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot_qq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the residual Q-Q plot — VI_MODEL$plot_qq","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + 10 * x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  # Residual plot of the null model test$plot_qq(test$gen(1000, fit_model = TRUE))"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot_resid.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the residuals vs fitted values plot — VI_MODEL$plot_resid","title":"Plot the residuals vs fitted values plot — VI_MODEL$plot_resid","text":"function generate residuals vs fitted values plot.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot_resid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the residuals vs fitted values plot — VI_MODEL$plot_resid","text":"dat Data frame. data frame containing .resid .fitted. alpha Numeric. Alpha dot. Value 0 1. size Numeric. Size dot. Value 0 1. Default 0.5.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot_resid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the residuals vs fitted values plot — VI_MODEL$plot_resid","text":"ggplot.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-plot_resid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the residuals vs fitted values plot — VI_MODEL$plot_resid","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + 10 * x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  # Residual plot of the null model test$plot_resid(test$gen(1000, fit_model = TRUE))"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-prm.html","id":null,"dir":"Reference","previous_headings":"","what":"List of parameters — VI_MODEL$prm","title":"List of parameters — VI_MODEL$prm","text":"list, initialized instance built.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-prm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of parameters — VI_MODEL$prm","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e) test$prm #> $x #>  #> ── <RAND_UNIFORM object> #> [a: 0, b: 1]  #>  #> $e #>  #> ── <RAND_NORMAL object> #> [mu: 0, sigma: 1]  #>  #> $y #>  #> ── <CLOSED_FORM object> #> EXPR = 1 + x + x^2 + e #>  - x: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1]  #>"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-prm_type.html","id":null,"dir":"Reference","previous_headings":"","what":"List of parameter types — VI_MODEL$prm_type","title":"List of parameter types — VI_MODEL$prm_type","text":"list, initialized instance built. \"r\" stands random variable closed form used expression y, \"o\" stands others. value affects string representation object. variable part expression y, labelled \"o\". variable part expression y, random variable closed form expression, labelled \"o\" well.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-prm_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of parameter types — VI_MODEL$prm_type","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e) test$prm_type #> $x #> [1] \"r\" #>  #> $e #> [1] \"r\" #>"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-rss.html","id":null,"dir":"Reference","previous_headings":"","what":"Residual sum of square of a fitted model — VI_MODEL$rss","title":"Residual sum of square of a fitted model — VI_MODEL$rss","text":"function returns residual sum square fitted model.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-rss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Residual sum of square of a fitted model — VI_MODEL$rss","text":"Numeric value.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-rss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Residual sum of square of a fitted model — VI_MODEL$rss","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  test$rss(test$fit(test$gen(100))) #> [1] 123.8291"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-set_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Set formula for y, null model or alternative model — VI_MODEL$set_formula","title":"Set formula for y, null model or alternative model — VI_MODEL$set_formula","text":"function store formula environment, drops attributes. recommended modify formula y instance built, may create confusion.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-set_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set formula for y, null model or alternative model — VI_MODEL$set_formula","text":"... Formulas. Formulas names.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-set_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set formula for y, null model or alternative model — VI_MODEL$set_formula","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-set_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set formula for y, null model or alternative model — VI_MODEL$set_formula","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  test$set_formula(alt_formula = y ~ x + I(x^3)) #>  #> ── <VI_MODEL object> #> y = 1 + x + x^2 + e #>  - x: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1]  test$alt_formula #> y ~ x + I(x^3)"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-set_prm.html","id":null,"dir":"Reference","previous_headings":"","what":"Set parameter for the model — VI_MODEL$set_prm","title":"Set parameter for the model — VI_MODEL$set_prm","text":"function store values environment update values closed form expression y. However, parameter directly used closed form expression, user override method correctly set parameter.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-set_prm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set parameter for the model — VI_MODEL$set_prm","text":"prm_name List Vector. Parameter character names. prm_val List Vector. Parameter values.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-set_prm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set parameter for the model — VI_MODEL$set_prm","text":"Return object .","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-set_prm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set parameter for the model — VI_MODEL$set_prm","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(a = 1, x = x, e = e),                  prm_type = list(a = \"o\", x = \"r\", e = \"r\"),                  formula = y ~ 1 + a * x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))  test #>  #> ── <VI_MODEL object> #> y = 1 + a * x + x^2 + e #>  - x: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #>  - a: 1   test$set_prm(\"a\", 2) #>  #> ── <VI_MODEL object> #> y = 1 + a * x + x^2 + e #>  - x: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #>  - a: 2   test #>  #> ── <VI_MODEL object> #> y = 1 + a * x + x^2 + e #>  - x: <RAND_UNIFORM object> #>    [a: 0, b: 1] #>  - e: <RAND_NORMAL object> #>    [mu: 0, sigma: 1] #>  - a: 2"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-test.html","id":null,"dir":"Reference","previous_headings":"","what":"Test the null model against the alternative model — VI_MODEL$test","title":"Test the null model against the alternative model — VI_MODEL$test","text":"function test null model alternative model. class, test F-test computed using stats::anova. Derived classes may test procedures.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test the null model against the alternative model — VI_MODEL$test","text":"dat Data frame. data frame containing variables needed null_formula alt_formula. null_formula Formula. Formula fitting null model. Default null_formula = self$null_formula. alt_formula Formula. Formula fitting alternative model. Default alt_formula = self$alt_formula.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test the null model against the alternative model — VI_MODEL$test","text":"list containing test name, test statistic p-value.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL-cash-test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test the null model against the alternative model — VI_MODEL$test","text":"","code":"# Instantiate x <- rand_uniform() e <- rand_normal() test <- vi_model(prm = list(x = x, e = e),                  prm_type = list(x = \"r\", e = \"r\"),                  formula = y ~ 1 + x + x^2 + e,                  null_formula = y ~ x,                  alt_formula = y ~ x + I(x^2))   dat <- test$gen(100000) test$test(dat) #> $name #> [1] \"F-test\" #>  #> $statistic #> [1] 606.5596 #>  #> $p_value #> [1] 1.571196e-133 #>   test$test(dat, alt_formula = y ~ x + I(x^3)) #> $name #> [1] \"F-test\" #>  #> $statistic #> [1] 574.4234 #>  #> $p_value #> [1] 1.397167e-126 #>"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL.html","id":null,"dir":"Reference","previous_headings":"","what":"VI_MODEL class environment — VI_MODEL","title":"VI_MODEL class environment — VI_MODEL","text":"base class visual inference linear model, inherited bandicoot::BASE.","code":""},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"VI_MODEL class environment — VI_MODEL","text":"","code":"VI_MODEL"},{"path":"https://tengmcing.github.io/visage/reference/VI_MODEL.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"VI_MODEL class environment — VI_MODEL","text":"environment S3 class bandicoot_oop.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate p-value for a visual test — calc_p_value","title":"Calculate p-value for a visual test — calc_p_value","text":"function calculate p-value visual test. null distribution simulated using function sim_dist(). p-value probability number detections greater equal observed value.","code":""},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate p-value for a visual test — calc_p_value","text":"","code":"calc_p_value(   n_detect,   n_eval,   n_sel,   n_plot = 20,   n_sim = 50000,   cache_env = NULL )"},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate p-value for a visual test — calc_p_value","text":"n_detect Integer. Observed value number detections. n_eval Integer. Number evaluations. n_sel Integer. vector number selections. n_plot Integer. Number plots lineup. n_sim Integer. Number simulations draws. cache_env Environment. provided environment caching.","code":""},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate p-value for a visual test — calc_p_value","text":"numeric value representing p-value.","code":""},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate p-value for a visual test — calc_p_value","text":"encouraged provide cache environment boost performance function needs reused. cache environment remember result corresponding combinations n_eval n_sim.","code":""},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate p-value for a visual test — calc_p_value","text":"","code":"calc_p_value(2, 3, c(1,1,2)) #> [1] 0.01534 calc_p_value(1, 1, c(1)) #> [1] 0.04912"},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value_comb.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate p-value for all combinations of evaluations of a lineup. — calc_p_value_comb","title":"Calculate p-value for all combinations of evaluations of a lineup. — calc_p_value_comb","text":"function calculate p-value combinations evaluations given desired number evaluations. lineup evaluated \\(K\\) subjects, combinations \\(K\\) evaluations, taken \\(X\\) time generated, \\(X\\) desired number evaluations.","code":""},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value_comb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate p-value for all combinations of evaluations of a lineup. — calc_p_value_comb","text":"","code":"calc_p_value_comb(   detected,   n_eval,   n_sel,   n_plot = 20,   n_sim = 50000,   cache_env = NULL )"},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value_comb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate p-value for all combinations of evaluations of a lineup. — calc_p_value_comb","text":"detected Boolean. vector Boolean values indicating whether lineup detected subjects. n_eval Integer. Desired number evaluations. n_sel Integer. vector number selections. n_plot Integer. Number plots lineup. n_sim Integer. Number simulation draws. cache_env Environment. provided environment caching.","code":""},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value_comb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate p-value for all combinations of evaluations of a lineup. — calc_p_value_comb","text":"vector p-value combination matrix attribute.","code":""},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value_comb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate p-value for all combinations of evaluations of a lineup. — calc_p_value_comb","text":"encouraged provide cache environment boost performance function needs reused. cache environment remember result corresponding combinations n_eval n_sim.","code":""},{"path":[]},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value_comb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate p-value for all combinations of evaluations of a lineup. — calc_p_value_comb","text":"","code":"calc_p_value_comb(c(TRUE, FALSE, TRUE), 2, c(1, 1, 2)) #> [1] 0.09792 0.00674 0.14256 #> attr(,\"combinations\") #>      [,1] [,2] [,3] #> [1,]    1    1    2 #> [2,]    2    3    3 calc_p_value_comb(c(TRUE, FALSE), 1, c(1, 1)) #> [1] 0.04946 1.00000 #> attr(,\"combinations\") #>      [,1] [,2] #> [1,]    1    2"},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate p-value for multiple lineups. — calc_p_value_multi","title":"Calculate p-value for multiple lineups. — calc_p_value_multi","text":"function calculates p-value multiple lineups using function calc_p_value(). comb = TRUE, function calc_p_value_comb() used instead.","code":""},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate p-value for multiple lineups. — calc_p_value_multi","text":"","code":"calc_p_value_multi(   dat,   lineup_id = \"lineup_id\",   detected = \"detected\",   n_sel = \"n_sel\",   comb = FALSE,   n_eval = 1,   replace_0 = TRUE,   replace_full = TRUE,   n_plot = 20,   n_sim = 50000,   cache_env = NULL )"},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value_multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate p-value for multiple lineups. — calc_p_value_multi","text":"dat Data.frame/Tibble. data.frame tibble. lineup_id Character. Column name ids lineup. detected Character. Column name whether lineup detected subject. n_sel Character. Column name number selections. comb Boolean. Whether compute combinations. See also calc_p_value_comb(). n_eval Integer. vector desired number evaluations. used comb = TRUE. replace_0 Boolean. Whether give treatment evaluations number selections equal 0. replace_full Boolean. Whether give treatment evaluations number selections equal number plots. n_plot Integer. Number plots. n_sim Integer. Number simulation draws. cache_env Environment. provided environment caching.","code":""},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value_multi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate p-value for multiple lineups. — calc_p_value_multi","text":"comb = TRUE, function returns tiible columns lineup_id p_value, p_value list vectors. comb = FALSE, p_value column vector.","code":""},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value_multi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate p-value for multiple lineups. — calc_p_value_multi","text":"encouraged provide cache environment boost performance. cache environment remember result corresponding combinations n_eval n_sim. replace_0 replace_full can turned set evaluations 0 full selections false detection one selection.","code":""},{"path":"https://tengmcing.github.io/visage/reference/calc_p_value_multi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate p-value for multiple lineups. — calc_p_value_multi","text":"","code":"dat <- data.frame(lineup_id = c(1,1,2),                   detected = c(TRUE, FALSE, TRUE),                   n_sel = c(1,1,2)) calc_p_value_multi(dat, comb = TRUE, n_eval = 1:2) #> # A tibble: 3 × 4 #>   lineup_id p_value   n_eval total_eval #>       <dbl> <list>     <int>      <int> #> 1         1 <dbl [2]>      1          2 #> 2         2 <dbl [1]>      1          1 #> 3         1 <dbl [1]>      2          2 calc_p_value_multi(dat) #> # A tibble: 2 × 2 #>   lineup_id p_value #>       <dbl>   <dbl> #> 1         1  0.0947 #> 2         2  0.0997"},{"path":"https://tengmcing.github.io/visage/reference/eval_p_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate test for given p-value and significance level — eval_p_value","title":"Evaluate test for given p-value and significance level — eval_p_value","text":"function reject null hypothesis p-value smaller given significance level plus tolerance.","code":""},{"path":"https://tengmcing.github.io/visage/reference/eval_p_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate test for given p-value and significance level — eval_p_value","text":"","code":"eval_p_value(p_value, significance_level = 0.05, tol = 1e-06)"},{"path":"https://tengmcing.github.io/visage/reference/eval_p_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate test for given p-value and significance level — eval_p_value","text":"p_value Numeric. vector p-values. significance_level Numeric. significance level. tol Numeric. Tolerance.","code":""},{"path":"https://tengmcing.github.io/visage/reference/eval_p_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate test for given p-value and significance level — eval_p_value","text":"vector Boolean values indicating whether null hypotheses rejected.","code":""},{"path":"https://tengmcing.github.io/visage/reference/eval_p_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate test for given p-value and significance level — eval_p_value","text":"","code":"eval_p_value(c(0.05, 0.0501), 0.05, 1e-3) #> [1] TRUE TRUE eval_p_value(c(0.05, 0.0501), 0.05, 1e-5) #> [1]  TRUE FALSE"},{"path":"https://tengmcing.github.io/visage/reference/portal.html","id":null,"dir":"Reference","previous_headings":"","what":"Portals to class instantiate methods — portal","title":"Portals to class instantiate methods — portal","text":"functions class$instantiate.","code":""},{"path":"https://tengmcing.github.io/visage/reference/portal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Portals to class instantiate methods — portal","text":"","code":"rand_var(..., env = new.env(parent = parent.frame()))  rand_uniform(..., env = new.env(parent = parent.frame()))  rand_uniform_d(..., env = new.env(parent = parent.frame()))  rand_normal(..., env = new.env(parent = parent.frame()))  rand_lognormal(..., env = new.env(parent = parent.frame()))  closed_form(..., env = new.env(parent = parent.frame()))  vi_model(..., env = new.env(parent = parent.frame()))  cubic_model(..., env = new.env(parent = parent.frame()))  simple_cubic_model(..., env = new.env(parent = parent.frame()))  quartic_model(..., env = new.env(parent = parent.frame()))  poly_model(..., env = new.env(parent = parent.frame()))  heter_model(..., env = new.env(parent = parent.frame()))"},{"path":"https://tengmcing.github.io/visage/reference/portal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Portals to class instantiate methods — portal","text":"... Arguments passed init method. env Environment. instance environment.","code":""},{"path":"https://tengmcing.github.io/visage/reference/portal.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Portals to class instantiate methods — portal","text":"rand_var: RAND_VAR rand_uniform: RAND_UNIFORM rand_uniform_d: RAND_UNIFORM_D rand_normal: RAND_NORMAL rand_lognormal: RAND_LOGNORMAL closed_form: CLOSED_FORM vi_model: VI_MODEL cubic_model: CUBIC_MODEL simple_cubic_model: SIMPLE_CUBIC_MODEL quartic_model: QUARTIC_MODEL poly_model: POLY_MODEL heter_model: HETER_MODEL","code":""},{"path":"https://tengmcing.github.io/visage/reference/sim_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Approximate the distribution of number of detections of a lineup with simulation — sim_dist","title":"Approximate the distribution of number of detections of a lineup with simulation — sim_dist","text":"function approximate distribution number detections lineup given number evaluations, selections evaluation plots lineup.","code":""},{"path":"https://tengmcing.github.io/visage/reference/sim_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Approximate the distribution of number of detections of a lineup with simulation — sim_dist","text":"","code":"sim_dist(n_eval, n_sel, n_plot = 20, n_sim = 50000)"},{"path":"https://tengmcing.github.io/visage/reference/sim_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Approximate the distribution of number of detections of a lineup with simulation — sim_dist","text":"n_eval Integer. Number evaluations. n_sel Integer. vector number selections. n_plot Integer. Number plots lineup. n_sim Integer. Number simulations draws.","code":""},{"path":"https://tengmcing.github.io/visage/reference/sim_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Approximate the distribution of number of detections of a lineup with simulation — sim_dist","text":"named vector representing probability mass function distribution.","code":""},{"path":"https://tengmcing.github.io/visage/reference/sim_dist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Approximate the distribution of number of detections of a lineup with simulation — sim_dist","text":"given lineup, plots assumed weights \\(W_i, = 1, ..., N,\\) \\(N\\) number plots, \\(W_i\\) follows uniform distribution independently. draw, weights lineup simulated. , evaluation draw, function sample number plots number selection evaluation using simulated weights without replacement. Finally, distribution occurrences plot 1 draw approximated distribution number detections lineup.","code":""},{"path":"https://tengmcing.github.io/visage/reference/sim_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Approximate the distribution of number of detections of a lineup with simulation — sim_dist","text":"","code":"sim_dist(3, c(2,2,3)) #>       0       1       2       3  #> 0.70098 0.25284 0.04298 0.00320  sim_dist(1, c(1)) #>       0       1  #> 0.95016 0.04984"}]
