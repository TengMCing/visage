% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/oop.R
\name{inherit}
\alias{inherit}
\title{Declare inheritance inside a class constructor}
\usage{
inherit(env, parent, child_name, ...)
}
\arguments{
\item{env}{Environment. The instance environment.}

\item{parent}{Function. The parent class constructor.}

\item{child_name}{Character. The derived class name.}

\item{...}{Arguments passed to the parent class constructor.}
}
\value{
A parent class instance with updated class information.
}
\description{
This function builds an instance of the parent class, with updated
class information.
}
\details{
This function is assumed to be run inside a class constructor directly.
Otherwise, user needs to reset the \code{init_call} attribute by
calling \code{env$init_call <- sys.call()} inside the constructor directly.
}
\examples{

# Define a derived class constructor
myclass <- function(..., env = new.env(parent = parent.frame())) {
  env <- inherit(env, BASE, "myclass", ...)

  myfunc_ <- function() 1 + 1

  register_method(env, myfunc = myfunc_)
  return(env)
}

register_class_ctor(myclass, "myclass", parent = BASE)

}
