% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/p_value.R
\name{calc_p_value_multi}
\alias{calc_p_value_multi}
\title{Calculate p-value for multiple lineups.}
\usage{
calc_p_value_multi(
  dat,
  lineup_id,
  detect,
  n_sel,
  alpha,
  n_plot = 20,
  n_sim = 50000,
  dist = "dirichlet",
  cache_env = NULL,
  method = "linear_approx",
  replace_0 = TRUE
)
}
\arguments{
\item{dat}{Data.frame/Tibble. A data.frame or a tibble.}

\item{lineup_id}{Column of ids of lineup.}

\item{detect}{Column of whether the lineup is detected by the subject.}

\item{n_sel}{Column of the number of selections.}

\item{alpha}{Column of the parameter values used by the Dirichlet distribution.}

\item{n_plot}{Integer. Number of plots.}

\item{n_sim}{Integer. Number of simulation draws.}

\item{dist}{Character. Name of the distribution used for the attractiveness simulation.
One of "uniform" and "dirichlet".}

\item{cache_env}{Environment. A provided environment for caching.}

\item{method}{Character. Method of p-value calculation. "linear_approx" for linear
approximation and "simulate" for simulation.}

\item{replace_0}{Boolean. Whether to treat evaluations with number of
selections equal to 0 as selecting all the plots.}
}
\value{
A tibble with one column for lineup id and one column for the p-value.
}
\description{
This function calculates p-value for multiple lineups by using function
\code{\link[=calc_p_value]{calc_p_value()}}.
}
\details{
It is encouraged to provide a cache environment to boost up the performance.
The cache environment will remember the result corresponding to the
combinations of \code{n_eval} and \code{n_sim}. \code{replace_0} can be
turned on to set evaluations with 0 selections to be false detection
with 20 selections.

There are two attractiveness distribution available,
one is uniform distribution, another is Dirichlet distribution. Uniform
distribution ensures the marginal distribution of the probability of every
plot being selected is uniform.
When \eqn{\alpha = 1},
Dirichlet distribution ensures the probability of every plot being selected
is evenly distributed in a standard \eqn{M - 1} simplex.
}
\examples{
dat <- data.frame(unique_lineup_id = c(1,1,2),
                  detect_or_not = c(TRUE, FALSE, TRUE),
                  num_selection = c(1,1,2))
calc_p_value_multi(dat, unique_lineup_id, detect_or_not, num_selection)

}
